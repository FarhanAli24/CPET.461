
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004680  08004680  00014680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f8  080046f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080046f8  080046f8  000146f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004700  08004700  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004700  08004700  00014700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004704  08004704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004144  20000010  08004718  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004154  08004718  00024154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158b5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ed0  00000000  00000000  000358f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001470  00000000  00000000  000387c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001328  00000000  00000000  00039c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017fcb  00000000  00000000  0003af60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fc35  00000000  00000000  00052f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009791c  00000000  00000000  00062b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fa47c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055e4  00000000  00000000  000fa4f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004668 	.word	0x08004668

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004668 	.word	0x08004668

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b08e      	sub	sp, #56	; 0x38
 8000518:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fd3d 	bl	8000f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f839 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f97d 	bl	8000820 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000526:	f000 f8b9 	bl	800069c <MX_I2C1_Init>
  MX_I2S2_Init();
 800052a:	f000 f8e5 	bl	80006f8 <MX_I2S2_Init>
  MX_I2S3_Init();
 800052e:	f000 f911 	bl	8000754 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000532:	f000 f93f 	bl	80007b4 <MX_SPI1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of FlashGreenLedTa */
  osThreadDef(FlashGreenLedTa, StartFlashGreenLedTask, osPriorityAboveNormal, 0, 128);
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <main+0x70>)
 8000538:	f107 041c 	add.w	r4, r7, #28
 800053c:	461d      	mov	r5, r3
 800053e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000542:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000546:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FlashGreenLedTaHandle = osThreadCreate(osThread(FlashGreenLedTa), NULL);
 800054a:	f107 031c 	add.w	r3, r7, #28
 800054e:	2100      	movs	r1, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f002 fe56 	bl	8003202 <osThreadCreate>
 8000556:	4602      	mov	r2, r0
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <main+0x74>)
 800055a:	601a      	str	r2, [r3, #0]

  /* definition and creation of FlashRedLedTask */
  osThreadDef(FlashRedLedTask, StartFlashRedLedTask, osPriorityNormal, 0, 128);
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <main+0x78>)
 800055e:	463c      	mov	r4, r7
 8000560:	461d      	mov	r5, r3
 8000562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000566:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800056a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FlashRedLedTaskHandle = osThreadCreate(osThread(FlashRedLedTask), NULL);
 800056e:	463b      	mov	r3, r7
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f002 fe45 	bl	8003202 <osThreadCreate>
 8000578:	4602      	mov	r2, r0
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <main+0x7c>)
 800057c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800057e:	f002 fe39 	bl	80031f4 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000582:	e7fe      	b.n	8000582 <main+0x6e>
 8000584:	08004690 	.word	0x08004690
 8000588:	20004020 	.word	0x20004020
 800058c:	080046bc 	.word	0x080046bc
 8000590:	2000410c 	.word	0x2000410c

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b09a      	sub	sp, #104	; 0x68
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800059e:	2230      	movs	r2, #48	; 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f004 f858 	bl	8004658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
 80005c8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	4b31      	ldr	r3, [pc, #196]	; (8000694 <SystemClock_Config+0x100>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	4a30      	ldr	r2, [pc, #192]	; (8000694 <SystemClock_Config+0x100>)
 80005d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d8:	6413      	str	r3, [r2, #64]	; 0x40
 80005da:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <SystemClock_Config+0x100>)
 80005dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	4b2b      	ldr	r3, [pc, #172]	; (8000698 <SystemClock_Config+0x104>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a2a      	ldr	r2, [pc, #168]	; (8000698 <SystemClock_Config+0x104>)
 80005f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f4:	6013      	str	r3, [r2, #0]
 80005f6:	4b28      	ldr	r3, [pc, #160]	; (8000698 <SystemClock_Config+0x104>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000602:	2301      	movs	r3, #1
 8000604:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000610:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000614:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000616:	2304      	movs	r3, #4
 8000618:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800061a:	23c0      	movs	r3, #192	; 0xc0
 800061c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800061e:	2304      	movs	r3, #4
 8000620:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000622:	2308      	movs	r3, #8
 8000624:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800062a:	4618      	mov	r0, r3
 800062c:	f001 fd66 	bl	80020fc <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000636:	f000 fa61 	bl	8000afc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2302      	movs	r3, #2
 8000640:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000646:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000654:	2103      	movs	r1, #3
 8000656:	4618      	mov	r0, r3
 8000658:	f001 ffc0 	bl	80025dc <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000662:	f000 fa4b 	bl	8000afc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000666:	2301      	movs	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800066a:	23c8      	movs	r3, #200	; 0xc8
 800066c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800066e:	2305      	movs	r3, #5
 8000670:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000672:	2302      	movs	r3, #2
 8000674:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	4618      	mov	r0, r3
 800067c:	f002 f9d2 	bl	8002a24 <HAL_RCCEx_PeriphCLKConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000686:	f000 fa39 	bl	8000afc <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3768      	adds	r7, #104	; 0x68
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_I2C1_Init+0x50>)
 80006a2:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <MX_I2C1_Init+0x54>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_I2C1_Init+0x50>)
 80006a8:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_I2C1_Init+0x58>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_I2C1_Init+0x50>)
 80006da:	f000 ff37 	bl	800154c <HAL_I2C_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e4:	f000 fa0a 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20003fcc 	.word	0x20003fcc
 80006f0:	40005400 	.word	0x40005400
 80006f4:	000186a0 	.word	0x000186a0

080006f8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2S2_Init+0x50>)
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <MX_I2S2_Init+0x54>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2S2_Init+0x50>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2S2_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <MX_I2S2_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_I2S2_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_I2S2_Init+0x50>)
 800071e:	4a0c      	ldr	r2, [pc, #48]	; (8000750 <MX_I2S2_Init+0x58>)
 8000720:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_I2S2_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_I2S2_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_I2S2_Init+0x50>)
 8000730:	2201      	movs	r2, #1
 8000732:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_I2S2_Init+0x50>)
 8000736:	f001 f841 	bl	80017bc <HAL_I2S_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000740:	f000 f9dc 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000407c 	.word	0x2000407c
 800074c:	40003800 	.word	0x40003800
 8000750:	00017700 	.word	0x00017700

08000754 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_I2S3_Init+0x54>)
 800075a:	4a14      	ldr	r2, [pc, #80]	; (80007ac <MX_I2S3_Init+0x58>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2S3_Init+0x54>)
 8000760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000764:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_I2S3_Init+0x54>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_I2S3_Init+0x54>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_I2S3_Init+0x54>)
 8000774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000778:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_I2S3_Init+0x54>)
 800077c:	4a0c      	ldr	r2, [pc, #48]	; (80007b0 <MX_I2S3_Init+0x5c>)
 800077e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_I2S3_Init+0x54>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_I2S3_Init+0x54>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_I2S3_Init+0x54>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_I2S3_Init+0x54>)
 8000794:	f001 f812 	bl	80017bc <HAL_I2S_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800079e:	f000 f9ad 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200040c4 	.word	0x200040c4
 80007ac:	40003c00 	.word	0x40003c00
 80007b0:	00017700 	.word	0x00017700

080007b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_SPI1_Init+0x64>)
 80007ba:	4a18      	ldr	r2, [pc, #96]	; (800081c <MX_SPI1_Init+0x68>)
 80007bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_SPI1_Init+0x64>)
 80007c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_SPI1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_SPI1_Init+0x64>)
 80007e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_SPI1_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_SPI1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_SPI1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_SPI1_Init+0x64>)
 8000800:	220a      	movs	r2, #10
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_SPI1_Init+0x64>)
 8000806:	f002 fa5b 	bl	8002cc0 <HAL_SPI_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000810:	f000 f974 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20004024 	.word	0x20004024
 800081c:	40013000 	.word	0x40013000

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	; 0x30
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	4b6f      	ldr	r3, [pc, #444]	; (80009f8 <MX_GPIO_Init+0x1d8>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a6e      	ldr	r2, [pc, #440]	; (80009f8 <MX_GPIO_Init+0x1d8>)
 8000840:	f043 0310 	orr.w	r3, r3, #16
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b6c      	ldr	r3, [pc, #432]	; (80009f8 <MX_GPIO_Init+0x1d8>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0310 	and.w	r3, r3, #16
 800084e:	61bb      	str	r3, [r7, #24]
 8000850:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	4b68      	ldr	r3, [pc, #416]	; (80009f8 <MX_GPIO_Init+0x1d8>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a67      	ldr	r2, [pc, #412]	; (80009f8 <MX_GPIO_Init+0x1d8>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b65      	ldr	r3, [pc, #404]	; (80009f8 <MX_GPIO_Init+0x1d8>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b61      	ldr	r3, [pc, #388]	; (80009f8 <MX_GPIO_Init+0x1d8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a60      	ldr	r2, [pc, #384]	; (80009f8 <MX_GPIO_Init+0x1d8>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b5e      	ldr	r3, [pc, #376]	; (80009f8 <MX_GPIO_Init+0x1d8>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b5a      	ldr	r3, [pc, #360]	; (80009f8 <MX_GPIO_Init+0x1d8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a59      	ldr	r2, [pc, #356]	; (80009f8 <MX_GPIO_Init+0x1d8>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b57      	ldr	r3, [pc, #348]	; (80009f8 <MX_GPIO_Init+0x1d8>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b53      	ldr	r3, [pc, #332]	; (80009f8 <MX_GPIO_Init+0x1d8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a52      	ldr	r2, [pc, #328]	; (80009f8 <MX_GPIO_Init+0x1d8>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b50      	ldr	r3, [pc, #320]	; (80009f8 <MX_GPIO_Init+0x1d8>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b4c      	ldr	r3, [pc, #304]	; (80009f8 <MX_GPIO_Init+0x1d8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a4b      	ldr	r2, [pc, #300]	; (80009f8 <MX_GPIO_Init+0x1d8>)
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b49      	ldr	r3, [pc, #292]	; (80009f8 <MX_GPIO_Init+0x1d8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0308 	and.w	r3, r3, #8
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2108      	movs	r1, #8
 80008e2:	4846      	ldr	r0, [pc, #280]	; (80009fc <MX_GPIO_Init+0x1dc>)
 80008e4:	f000 fdfe 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2101      	movs	r1, #1
 80008ec:	4844      	ldr	r0, [pc, #272]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 80008ee:	f000 fdf9 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80008f2:	2200      	movs	r2, #0
 80008f4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008f8:	4842      	ldr	r0, [pc, #264]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 80008fa:	f000 fdf3 	bl	80014e4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80008fe:	2304      	movs	r3, #4
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	483a      	ldr	r0, [pc, #232]	; (80009fc <MX_GPIO_Init+0x1dc>)
 8000912:	f000 fc65 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000916:	2308      	movs	r3, #8
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4833      	ldr	r0, [pc, #204]	; (80009fc <MX_GPIO_Init+0x1dc>)
 800092e:	f000 fc57 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000932:	2332      	movs	r3, #50	; 0x32
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000936:	4b34      	ldr	r3, [pc, #208]	; (8000a08 <MX_GPIO_Init+0x1e8>)
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	482d      	ldr	r0, [pc, #180]	; (80009fc <MX_GPIO_Init+0x1dc>)
 8000946:	f000 fc4b 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800094a:	2301      	movs	r3, #1
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4827      	ldr	r0, [pc, #156]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 8000962:	f000 fc3d 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000966:	2301      	movs	r3, #1
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800096a:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <MX_GPIO_Init+0x1e8>)
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4824      	ldr	r0, [pc, #144]	; (8000a0c <MX_GPIO_Init+0x1ec>)
 800097a:	f000 fc31 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800097e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000982:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	481b      	ldr	r0, [pc, #108]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 8000998:	f000 fc22 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800099c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4816      	ldr	r0, [pc, #88]	; (8000a0c <MX_GPIO_Init+0x1ec>)
 80009b2:	f000 fc15 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c8:	230a      	movs	r3, #10
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	480e      	ldr	r0, [pc, #56]	; (8000a0c <MX_GPIO_Init+0x1ec>)
 80009d4:	f000 fc04 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d8:	2320      	movs	r3, #32
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4806      	ldr	r0, [pc, #24]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 80009ec:	f000 fbf8 	bl	80011e0 <HAL_GPIO_Init>

}
 80009f0:	bf00      	nop
 80009f2:	3730      	adds	r7, #48	; 0x30
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020c00 	.word	0x40020c00
 8000a08:	10120000 	.word	0x10120000
 8000a0c:	40020000 	.word	0x40020000

08000a10 <StartFlashGreenLedTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartFlashGreenLedTask */
void StartFlashGreenLedTask(void const * argument)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t TaskTimeStamp;
	TickType_t DelayTimeMsec = 2000;// 2 seconds
 8000a18:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a1c:	60bb      	str	r3, [r7, #8]
	  osDelayUntil(&TaskTimeStamp, 1500);//1.5 sec
	  //osDelay(1);
	   */

	  // Exercise 4
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_SET);//enable Blue LED
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a24:	4812      	ldr	r0, [pc, #72]	; (8000a70 <StartFlashGreenLedTask+0x60>)
 8000a26:	f000 fd5d 	bl	80014e4 <HAL_GPIO_WritePin>

	  for(int i=0; i<=160;i++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	e00a      	b.n	8000a46 <StartFlashGreenLedTask+0x36>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);//enable Green LED
 8000a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a34:	480e      	ldr	r0, [pc, #56]	; (8000a70 <StartFlashGreenLedTask+0x60>)
 8000a36:	f000 fd6e 	bl	8001516 <HAL_GPIO_TogglePin>
		  osDelay(25);
 8000a3a:	2019      	movs	r0, #25
 8000a3c:	f002 fc2d 	bl	800329a <osDelay>
	  for(int i=0; i<=160;i++)
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	3301      	adds	r3, #1
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2ba0      	cmp	r3, #160	; 0xa0
 8000a4a:	ddf1      	ble.n	8000a30 <StartFlashGreenLedTask+0x20>
	  }
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_RESET);//disable Blue LED
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a52:	4807      	ldr	r0, [pc, #28]	; (8000a70 <StartFlashGreenLedTask+0x60>)
 8000a54:	f000 fd46 	bl	80014e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_RESET);//disable Green LED
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a5e:	4804      	ldr	r0, [pc, #16]	; (8000a70 <StartFlashGreenLedTask+0x60>)
 8000a60:	f000 fd40 	bl	80014e4 <HAL_GPIO_WritePin>
	  osDelay(6000);
 8000a64:	f241 7070 	movw	r0, #6000	; 0x1770
 8000a68:	f002 fc17 	bl	800329a <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_SET);//enable Blue LED
 8000a6c:	e7d7      	b.n	8000a1e <StartFlashGreenLedTask+0xe>
 8000a6e:	bf00      	nop
 8000a70:	40020c00 	.word	0x40020c00

08000a74 <StartFlashRedLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlashRedLedTask */
void StartFlashRedLedTask(void const * argument)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlashRedLedTask */
	TickType_t TaskTimeStamp;
	TickType_t DelayTimeMsec = 1000;
 8000a7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a80:	60bb      	str	r3, [r7, #8]
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);//Disable Red LED
	  osDelayUntil(&TaskTimeStamp, DelayTimeMsec);
      //osDelay(1);*/

	  // Exercise 4
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_SET);//enable Red LED
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a88:	4812      	ldr	r0, [pc, #72]	; (8000ad4 <StartFlashRedLedTask+0x60>)
 8000a8a:	f000 fd2b 	bl	80014e4 <HAL_GPIO_WritePin>

	  for(int i=0; i<=160;i++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	e00a      	b.n	8000aaa <StartFlashRedLedTask+0x36>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);//enable Orange LED
 8000a94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a98:	480e      	ldr	r0, [pc, #56]	; (8000ad4 <StartFlashRedLedTask+0x60>)
 8000a9a:	f000 fd3c 	bl	8001516 <HAL_GPIO_TogglePin>
		  osDelay(25);
 8000a9e:	2019      	movs	r0, #25
 8000aa0:	f002 fbfb 	bl	800329a <osDelay>
	  for(int i=0; i<=160;i++)
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2ba0      	cmp	r3, #160	; 0xa0
 8000aae:	ddf1      	ble.n	8000a94 <StartFlashRedLedTask+0x20>
	  }
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_RESET);//disable Red LED
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab6:	4807      	ldr	r0, [pc, #28]	; (8000ad4 <StartFlashRedLedTask+0x60>)
 8000ab8:	f000 fd14 	bl	80014e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_RESET);//disable Orange LED
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac2:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <StartFlashRedLedTask+0x60>)
 8000ac4:	f000 fd0e 	bl	80014e4 <HAL_GPIO_WritePin>
	  osDelay(6000);
 8000ac8:	f241 7070 	movw	r0, #6000	; 0x1770
 8000acc:	f002 fbe5 	bl	800329a <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_SET);//enable Red LED
 8000ad0:	e7d7      	b.n	8000a82 <StartFlashRedLedTask+0xe>
 8000ad2:	bf00      	nop
 8000ad4:	40020c00 	.word	0x40020c00

08000ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d101      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aea:	f000 fa77 	bl	8000fdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40010000 	.word	0x40010000

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_MspInit+0x54>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <HAL_MspInit+0x54>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_MspInit+0x54>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <HAL_MspInit+0x54>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <HAL_MspInit+0x54>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <HAL_MspInit+0x54>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	210f      	movs	r1, #15
 8000b4e:	f06f 0001 	mvn.w	r0, #1
 8000b52:	f000 fb1b 	bl	800118c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800

08000b64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a19      	ldr	r2, [pc, #100]	; (8000be8 <HAL_I2C_MspInit+0x84>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d12c      	bne.n	8000be0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_I2C_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a17      	ldr	r2, [pc, #92]	; (8000bec <HAL_I2C_MspInit+0x88>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_I2C_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ba2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba8:	2312      	movs	r3, #18
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <HAL_I2C_MspInit+0x8c>)
 8000bc0:	f000 fb0e 	bl	80011e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_I2C_MspInit+0x88>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	4a07      	ldr	r2, [pc, #28]	; (8000bec <HAL_I2C_MspInit+0x88>)
 8000bce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_I2C_MspInit+0x88>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000be0:	bf00      	nop
 8000be2:	3728      	adds	r7, #40	; 0x28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40005400 	.word	0x40005400
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020400 	.word	0x40020400

08000bf4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	; 0x38
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a59      	ldr	r2, [pc, #356]	; (8000d78 <HAL_I2S_MspInit+0x184>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d15b      	bne.n	8000cce <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
 8000c1a:	4b58      	ldr	r3, [pc, #352]	; (8000d7c <HAL_I2S_MspInit+0x188>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a57      	ldr	r2, [pc, #348]	; (8000d7c <HAL_I2S_MspInit+0x188>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b55      	ldr	r3, [pc, #340]	; (8000d7c <HAL_I2S_MspInit+0x188>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2e:	623b      	str	r3, [r7, #32]
 8000c30:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
 8000c36:	4b51      	ldr	r3, [pc, #324]	; (8000d7c <HAL_I2S_MspInit+0x188>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a50      	ldr	r2, [pc, #320]	; (8000d7c <HAL_I2S_MspInit+0x188>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b4e      	ldr	r3, [pc, #312]	; (8000d7c <HAL_I2S_MspInit+0x188>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	61fb      	str	r3, [r7, #28]
 8000c4c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
 8000c52:	4b4a      	ldr	r3, [pc, #296]	; (8000d7c <HAL_I2S_MspInit+0x188>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a49      	ldr	r2, [pc, #292]	; (8000d7c <HAL_I2S_MspInit+0x188>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b47      	ldr	r3, [pc, #284]	; (8000d7c <HAL_I2S_MspInit+0x188>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
 8000c68:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c7a:	2306      	movs	r3, #6
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	483e      	ldr	r0, [pc, #248]	; (8000d80 <HAL_I2S_MspInit+0x18c>)
 8000c86:	f000 faab 	bl	80011e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c8a:	2308      	movs	r3, #8
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c9a:	2305      	movs	r3, #5
 8000c9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4836      	ldr	r0, [pc, #216]	; (8000d80 <HAL_I2S_MspInit+0x18c>)
 8000ca6:	f000 fa9b 	bl	80011e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000caa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cbc:	2305      	movs	r3, #5
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	482f      	ldr	r0, [pc, #188]	; (8000d84 <HAL_I2S_MspInit+0x190>)
 8000cc8:	f000 fa8a 	bl	80011e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ccc:	e04f      	b.n	8000d6e <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a2d      	ldr	r2, [pc, #180]	; (8000d88 <HAL_I2S_MspInit+0x194>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d14a      	bne.n	8000d6e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <HAL_I2S_MspInit+0x188>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	4a26      	ldr	r2, [pc, #152]	; (8000d7c <HAL_I2S_MspInit+0x188>)
 8000ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce8:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <HAL_I2S_MspInit+0x188>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <HAL_I2S_MspInit+0x188>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	4a1f      	ldr	r2, [pc, #124]	; (8000d7c <HAL_I2S_MspInit+0x188>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6313      	str	r3, [r2, #48]	; 0x30
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <HAL_I2S_MspInit+0x188>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <HAL_I2S_MspInit+0x188>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	4a18      	ldr	r2, [pc, #96]	; (8000d7c <HAL_I2S_MspInit+0x188>)
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <HAL_I2S_MspInit+0x188>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d2c:	2310      	movs	r3, #16
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d3c:	2306      	movs	r3, #6
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d44:	4619      	mov	r1, r3
 8000d46:	4811      	ldr	r0, [pc, #68]	; (8000d8c <HAL_I2S_MspInit+0x198>)
 8000d48:	f000 fa4a 	bl	80011e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d4c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d5e:	2306      	movs	r3, #6
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <HAL_I2S_MspInit+0x18c>)
 8000d6a:	f000 fa39 	bl	80011e0 <HAL_GPIO_Init>
}
 8000d6e:	bf00      	nop
 8000d70:	3738      	adds	r7, #56	; 0x38
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40003800 	.word	0x40003800
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020800 	.word	0x40020800
 8000d84:	40020400 	.word	0x40020400
 8000d88:	40003c00 	.word	0x40003c00
 8000d8c:	40020000 	.word	0x40020000

08000d90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a19      	ldr	r2, [pc, #100]	; (8000e14 <HAL_SPI_MspInit+0x84>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d12b      	bne.n	8000e0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <HAL_SPI_MspInit+0x88>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	4a17      	ldr	r2, [pc, #92]	; (8000e18 <HAL_SPI_MspInit+0x88>)
 8000dbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_SPI_MspInit+0x88>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_SPI_MspInit+0x88>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a10      	ldr	r2, [pc, #64]	; (8000e18 <HAL_SPI_MspInit+0x88>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_SPI_MspInit+0x88>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000dea:	23e0      	movs	r3, #224	; 0xe0
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <HAL_SPI_MspInit+0x8c>)
 8000e06:	f000 f9eb 	bl	80011e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	; 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40013000 	.word	0x40013000
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020000 	.word	0x40020000

08000e20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	; 0x30
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	2019      	movs	r0, #25
 8000e36:	f000 f9a9 	bl	800118c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000e3a:	2019      	movs	r0, #25
 8000e3c:	f000 f9c2 	bl	80011c4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <HAL_InitTick+0xa0>)
 8000e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e48:	4a1d      	ldr	r2, [pc, #116]	; (8000ec0 <HAL_InitTick+0xa0>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_InitTick+0xa0>)
 8000e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e5c:	f107 0210 	add.w	r2, r7, #16
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 fdaa 	bl	80029c0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e6c:	f001 fd94 	bl	8002998 <HAL_RCC_GetPCLK2Freq>
 8000e70:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e74:	4a13      	ldr	r2, [pc, #76]	; (8000ec4 <HAL_InitTick+0xa4>)
 8000e76:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7a:	0c9b      	lsrs	r3, r3, #18
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_InitTick+0xa8>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <HAL_InitTick+0xac>)
 8000e84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_InitTick+0xa8>)
 8000e88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e8c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <HAL_InitTick+0xa8>)
 8000e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e92:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <HAL_InitTick+0xa8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <HAL_InitTick+0xa8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ea0:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <HAL_InitTick+0xa8>)
 8000ea2:	f001 ff71 	bl	8002d88 <HAL_TIM_Base_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d104      	bne.n	8000eb6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000eac:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <HAL_InitTick+0xa8>)
 8000eae:	f001 ffa0 	bl	8002df2 <HAL_TIM_Base_Start_IT>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3730      	adds	r7, #48	; 0x30
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	431bde83 	.word	0x431bde83
 8000ec8:	20004110 	.word	0x20004110
 8000ecc:	40010000 	.word	0x40010000

08000ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f0a:	f001 ff96 	bl	8002e3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20004110 	.word	0x20004110

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <SystemInit+0x28>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f22:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <SystemInit+0x28>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <SystemInit+0x28>)
 8000f2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f32:	609a      	str	r2, [r3, #8]
#endif
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f4a:	e003      	b.n	8000f54 <LoopCopyDataInit>

08000f4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f52:	3104      	adds	r1, #4

08000f54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f54:	480b      	ldr	r0, [pc, #44]	; (8000f84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f5c:	d3f6      	bcc.n	8000f4c <CopyDataInit>
  ldr  r2, =_sbss
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f60:	e002      	b.n	8000f68 <LoopFillZerobss>

08000f62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f64:	f842 3b04 	str.w	r3, [r2], #4

08000f68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f6c:	d3f9      	bcc.n	8000f62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f6e:	f7ff ffd3 	bl	8000f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f72:	f003 fb4d 	bl	8004610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f76:	f7ff facd 	bl	8000514 <main>
  bx  lr    
 8000f7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f80:	08004708 	.word	0x08004708
  ldr  r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f88:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000f8c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000f90:	20004154 	.word	0x20004154

08000f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC_IRQHandler>
	...

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <HAL_Init+0x40>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <HAL_Init+0x40>)
 8000fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_Init+0x40>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f8d8 	bl	8001176 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff ff2a 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f7ff fd9e 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20004150 	.word	0x20004150

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20004150 	.word	0x20004150

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db0b      	blt.n	80010aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f003 021f 	and.w	r2, r3, #31
 8001098:	4907      	ldr	r1, [pc, #28]	; (80010b8 <__NVIC_EnableIRQ+0x38>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	2001      	movs	r0, #1
 80010a2:	fa00 f202 	lsl.w	r2, r0, r2
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000e100 	.word	0xe000e100

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	; (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
         );
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff4c 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800119e:	f7ff ff61 	bl	8001064 <__NVIC_GetPriorityGrouping>
 80011a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	68b9      	ldr	r1, [r7, #8]
 80011a8:	6978      	ldr	r0, [r7, #20]
 80011aa:	f7ff ffb1 	bl	8001110 <NVIC_EncodePriority>
 80011ae:	4602      	mov	r2, r0
 80011b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b4:	4611      	mov	r1, r2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff80 	bl	80010bc <__NVIC_SetPriority>
}
 80011bc:	bf00      	nop
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff54 	bl	8001080 <__NVIC_EnableIRQ>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
 80011fa:	e159      	b.n	80014b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011fc:	2201      	movs	r2, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	429a      	cmp	r2, r3
 8001216:	f040 8148 	bne.w	80014aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d00b      	beq.n	800123a <HAL_GPIO_Init+0x5a>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d007      	beq.n	800123a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800122e:	2b11      	cmp	r3, #17
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b12      	cmp	r3, #18
 8001238:	d130      	bne.n	800129c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 0201 	and.w	r2, r3, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0xfc>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b12      	cmp	r3, #18
 80012da:	d123      	bne.n	8001324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	08da      	lsrs	r2, r3, #3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3208      	adds	r2, #8
 80012e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	220f      	movs	r2, #15
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	08da      	lsrs	r2, r3, #3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3208      	adds	r2, #8
 800131e:	69b9      	ldr	r1, [r7, #24]
 8001320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0203 	and.w	r2, r3, #3
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 80a2 	beq.w	80014aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b56      	ldr	r3, [pc, #344]	; (80014c4 <HAL_GPIO_Init+0x2e4>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	4a55      	ldr	r2, [pc, #340]	; (80014c4 <HAL_GPIO_Init+0x2e4>)
 8001370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001374:	6453      	str	r3, [r2, #68]	; 0x44
 8001376:	4b53      	ldr	r3, [pc, #332]	; (80014c4 <HAL_GPIO_Init+0x2e4>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001382:	4a51      	ldr	r2, [pc, #324]	; (80014c8 <HAL_GPIO_Init+0x2e8>)
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	089b      	lsrs	r3, r3, #2
 8001388:	3302      	adds	r3, #2
 800138a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	220f      	movs	r2, #15
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a48      	ldr	r2, [pc, #288]	; (80014cc <HAL_GPIO_Init+0x2ec>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d019      	beq.n	80013e2 <HAL_GPIO_Init+0x202>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a47      	ldr	r2, [pc, #284]	; (80014d0 <HAL_GPIO_Init+0x2f0>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d013      	beq.n	80013de <HAL_GPIO_Init+0x1fe>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a46      	ldr	r2, [pc, #280]	; (80014d4 <HAL_GPIO_Init+0x2f4>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d00d      	beq.n	80013da <HAL_GPIO_Init+0x1fa>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a45      	ldr	r2, [pc, #276]	; (80014d8 <HAL_GPIO_Init+0x2f8>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d007      	beq.n	80013d6 <HAL_GPIO_Init+0x1f6>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a44      	ldr	r2, [pc, #272]	; (80014dc <HAL_GPIO_Init+0x2fc>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_GPIO_Init+0x1f2>
 80013ce:	2304      	movs	r3, #4
 80013d0:	e008      	b.n	80013e4 <HAL_GPIO_Init+0x204>
 80013d2:	2307      	movs	r3, #7
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x204>
 80013d6:	2303      	movs	r3, #3
 80013d8:	e004      	b.n	80013e4 <HAL_GPIO_Init+0x204>
 80013da:	2302      	movs	r3, #2
 80013dc:	e002      	b.n	80013e4 <HAL_GPIO_Init+0x204>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <HAL_GPIO_Init+0x204>
 80013e2:	2300      	movs	r3, #0
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	f002 0203 	and.w	r2, r2, #3
 80013ea:	0092      	lsls	r2, r2, #2
 80013ec:	4093      	lsls	r3, r2
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f4:	4934      	ldr	r1, [pc, #208]	; (80014c8 <HAL_GPIO_Init+0x2e8>)
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	089b      	lsrs	r3, r3, #2
 80013fa:	3302      	adds	r3, #2
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001402:	4b37      	ldr	r3, [pc, #220]	; (80014e0 <HAL_GPIO_Init+0x300>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001426:	4a2e      	ldr	r2, [pc, #184]	; (80014e0 <HAL_GPIO_Init+0x300>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800142c:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <HAL_GPIO_Init+0x300>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001450:	4a23      	ldr	r2, [pc, #140]	; (80014e0 <HAL_GPIO_Init+0x300>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_GPIO_Init+0x300>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800147a:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <HAL_GPIO_Init+0x300>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <HAL_GPIO_Init+0x300>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a4:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <HAL_GPIO_Init+0x300>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3301      	adds	r3, #1
 80014ae:	61fb      	str	r3, [r7, #28]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	2b0f      	cmp	r3, #15
 80014b4:	f67f aea2 	bls.w	80011fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b8:	bf00      	nop
 80014ba:	3724      	adds	r7, #36	; 0x24
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40013800 	.word	0x40013800
 80014cc:	40020000 	.word	0x40020000
 80014d0:	40020400 	.word	0x40020400
 80014d4:	40020800 	.word	0x40020800
 80014d8:	40020c00 	.word	0x40020c00
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40013c00 	.word	0x40013c00

080014e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f4:	787b      	ldrb	r3, [r7, #1]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001500:	e003      	b.n	800150a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	041a      	lsls	r2, r3, #16
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	619a      	str	r2, [r3, #24]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	460b      	mov	r3, r1
 8001520:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	401a      	ands	r2, r3
 800152a:	887b      	ldrh	r3, [r7, #2]
 800152c:	429a      	cmp	r2, r3
 800152e:	d104      	bne.n	800153a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	041a      	lsls	r2, r3, #16
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001538:	e002      	b.n	8001540 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800153a:	887a      	ldrh	r2, [r7, #2]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	619a      	str	r2, [r3, #24]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e11f      	b.n	800179e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d106      	bne.n	8001578 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff faf6 	bl	8000b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2224      	movs	r2, #36	; 0x24
 800157c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0201 	bic.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800159e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015b0:	f001 f9de 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 80015b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4a7b      	ldr	r2, [pc, #492]	; (80017a8 <HAL_I2C_Init+0x25c>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d807      	bhi.n	80015d0 <HAL_I2C_Init+0x84>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4a7a      	ldr	r2, [pc, #488]	; (80017ac <HAL_I2C_Init+0x260>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	bf94      	ite	ls
 80015c8:	2301      	movls	r3, #1
 80015ca:	2300      	movhi	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	e006      	b.n	80015de <HAL_I2C_Init+0x92>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4a77      	ldr	r2, [pc, #476]	; (80017b0 <HAL_I2C_Init+0x264>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	bf94      	ite	ls
 80015d8:	2301      	movls	r3, #1
 80015da:	2300      	movhi	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0db      	b.n	800179e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4a72      	ldr	r2, [pc, #456]	; (80017b4 <HAL_I2C_Init+0x268>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	0c9b      	lsrs	r3, r3, #18
 80015f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	430a      	orrs	r2, r1
 8001604:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4a64      	ldr	r2, [pc, #400]	; (80017a8 <HAL_I2C_Init+0x25c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d802      	bhi.n	8001620 <HAL_I2C_Init+0xd4>
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	3301      	adds	r3, #1
 800161e:	e009      	b.n	8001634 <HAL_I2C_Init+0xe8>
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001626:	fb02 f303 	mul.w	r3, r2, r3
 800162a:	4a63      	ldr	r2, [pc, #396]	; (80017b8 <HAL_I2C_Init+0x26c>)
 800162c:	fba2 2303 	umull	r2, r3, r2, r3
 8001630:	099b      	lsrs	r3, r3, #6
 8001632:	3301      	adds	r3, #1
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	430b      	orrs	r3, r1
 800163a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001646:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	4956      	ldr	r1, [pc, #344]	; (80017a8 <HAL_I2C_Init+0x25c>)
 8001650:	428b      	cmp	r3, r1
 8001652:	d80d      	bhi.n	8001670 <HAL_I2C_Init+0x124>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1e59      	subs	r1, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001662:	3301      	adds	r3, #1
 8001664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001668:	2b04      	cmp	r3, #4
 800166a:	bf38      	it	cc
 800166c:	2304      	movcc	r3, #4
 800166e:	e04f      	b.n	8001710 <HAL_I2C_Init+0x1c4>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d111      	bne.n	800169c <HAL_I2C_Init+0x150>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1e58      	subs	r0, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6859      	ldr	r1, [r3, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	440b      	add	r3, r1
 8001686:	fbb0 f3f3 	udiv	r3, r0, r3
 800168a:	3301      	adds	r3, #1
 800168c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001690:	2b00      	cmp	r3, #0
 8001692:	bf0c      	ite	eq
 8001694:	2301      	moveq	r3, #1
 8001696:	2300      	movne	r3, #0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	e012      	b.n	80016c2 <HAL_I2C_Init+0x176>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	1e58      	subs	r0, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6859      	ldr	r1, [r3, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	0099      	lsls	r1, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b2:	3301      	adds	r3, #1
 80016b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bf0c      	ite	eq
 80016bc:	2301      	moveq	r3, #1
 80016be:	2300      	movne	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_I2C_Init+0x17e>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e022      	b.n	8001710 <HAL_I2C_Init+0x1c4>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10e      	bne.n	80016f0 <HAL_I2C_Init+0x1a4>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1e58      	subs	r0, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6859      	ldr	r1, [r3, #4]
 80016da:	460b      	mov	r3, r1
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	440b      	add	r3, r1
 80016e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e4:	3301      	adds	r3, #1
 80016e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ee:	e00f      	b.n	8001710 <HAL_I2C_Init+0x1c4>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	1e58      	subs	r0, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6859      	ldr	r1, [r3, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	0099      	lsls	r1, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	fbb0 f3f3 	udiv	r3, r0, r3
 8001706:	3301      	adds	r3, #1
 8001708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800170c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	6809      	ldr	r1, [r1, #0]
 8001714:	4313      	orrs	r3, r2
 8001716:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69da      	ldr	r2, [r3, #28]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800173e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6911      	ldr	r1, [r2, #16]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68d2      	ldr	r2, [r2, #12]
 800174a:	4311      	orrs	r1, r2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	430b      	orrs	r3, r1
 8001752:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695a      	ldr	r2, [r3, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0201 	orr.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2220      	movs	r2, #32
 800178a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	000186a0 	.word	0x000186a0
 80017ac:	001e847f 	.word	0x001e847f
 80017b0:	003d08ff 	.word	0x003d08ff
 80017b4:	431bde83 	.word	0x431bde83
 80017b8:	10624dd3 	.word	0x10624dd3

080017bc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e128      	b.n	8001a20 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a90      	ldr	r2, [pc, #576]	; (8001a28 <HAL_I2S_Init+0x26c>)
 80017e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff fa03 	bl	8000bf4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2202      	movs	r2, #2
 80017f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001804:	f023 030f 	bic.w	r3, r3, #15
 8001808:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2202      	movs	r2, #2
 8001810:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d060      	beq.n	80018dc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001822:	2310      	movs	r3, #16
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e001      	b.n	800182c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001828:	2320      	movs	r3, #32
 800182a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b20      	cmp	r3, #32
 8001832:	d802      	bhi.n	800183a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800183a:	2001      	movs	r0, #1
 800183c:	f001 f9e2 	bl	8002c04 <HAL_RCCEx_GetPeriphCLKFreq>
 8001840:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800184a:	d125      	bne.n	8001898 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d010      	beq.n	8001876 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	fbb2 f2f3 	udiv	r2, r2, r3
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	461a      	mov	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001870:	3305      	adds	r3, #5
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	e01f      	b.n	80018b6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	461a      	mov	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	3305      	adds	r3, #5
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	e00e      	b.n	80018b6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	fbb2 f2f3 	udiv	r2, r2, r3
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	461a      	mov	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	3305      	adds	r3, #5
 80018b4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4a5c      	ldr	r2, [pc, #368]	; (8001a2c <HAL_I2S_Init+0x270>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	08db      	lsrs	r3, r3, #3
 80018c0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	085b      	lsrs	r3, r3, #1
 80018d2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	e003      	b.n	80018e4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80018dc:	2302      	movs	r3, #2
 80018de:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d902      	bls.n	80018f0 <HAL_I2S_Init+0x134>
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	2bff      	cmp	r3, #255	; 0xff
 80018ee:	d907      	bls.n	8001900 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f4:	f043 0210 	orr.w	r2, r3, #16
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e08f      	b.n	8001a20 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	ea42 0103 	orr.w	r1, r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	430a      	orrs	r2, r1
 8001912:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800191e:	f023 030f 	bic.w	r3, r3, #15
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6851      	ldr	r1, [r2, #4]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6892      	ldr	r2, [r2, #8]
 800192a:	4311      	orrs	r1, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	68d2      	ldr	r2, [r2, #12]
 8001930:	4311      	orrs	r1, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6992      	ldr	r2, [r2, #24]
 8001936:	430a      	orrs	r2, r1
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001942:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d161      	bne.n	8001a10 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a38      	ldr	r2, [pc, #224]	; (8001a30 <HAL_I2S_Init+0x274>)
 8001950:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a37      	ldr	r2, [pc, #220]	; (8001a34 <HAL_I2S_Init+0x278>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d101      	bne.n	8001960 <HAL_I2S_Init+0x1a4>
 800195c:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <HAL_I2S_Init+0x27c>)
 800195e:	e001      	b.n	8001964 <HAL_I2S_Init+0x1a8>
 8001960:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	4932      	ldr	r1, [pc, #200]	; (8001a34 <HAL_I2S_Init+0x278>)
 800196c:	428a      	cmp	r2, r1
 800196e:	d101      	bne.n	8001974 <HAL_I2S_Init+0x1b8>
 8001970:	4a31      	ldr	r2, [pc, #196]	; (8001a38 <HAL_I2S_Init+0x27c>)
 8001972:	e001      	b.n	8001978 <HAL_I2S_Init+0x1bc>
 8001974:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001978:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800197c:	f023 030f 	bic.w	r3, r3, #15
 8001980:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a2b      	ldr	r2, [pc, #172]	; (8001a34 <HAL_I2S_Init+0x278>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d101      	bne.n	8001990 <HAL_I2S_Init+0x1d4>
 800198c:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <HAL_I2S_Init+0x27c>)
 800198e:	e001      	b.n	8001994 <HAL_I2S_Init+0x1d8>
 8001990:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001994:	2202      	movs	r2, #2
 8001996:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a25      	ldr	r2, [pc, #148]	; (8001a34 <HAL_I2S_Init+0x278>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d101      	bne.n	80019a6 <HAL_I2S_Init+0x1ea>
 80019a2:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <HAL_I2S_Init+0x27c>)
 80019a4:	e001      	b.n	80019aa <HAL_I2S_Init+0x1ee>
 80019a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019b6:	d003      	beq.n	80019c0 <HAL_I2S_Init+0x204>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d103      	bne.n	80019c8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80019c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	e001      	b.n	80019cc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	b299      	uxth	r1, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80019e2:	4303      	orrs	r3, r0
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	430b      	orrs	r3, r1
 80019e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80019ea:	4313      	orrs	r3, r2
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	897b      	ldrh	r3, [r7, #10]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019f8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <HAL_I2S_Init+0x278>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d101      	bne.n	8001a08 <HAL_I2S_Init+0x24c>
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <HAL_I2S_Init+0x27c>)
 8001a06:	e001      	b.n	8001a0c <HAL_I2S_Init+0x250>
 8001a08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a0c:	897a      	ldrh	r2, [r7, #10]
 8001a0e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	08001b33 	.word	0x08001b33
 8001a2c:	cccccccd 	.word	0xcccccccd
 8001a30:	08001c49 	.word	0x08001c49
 8001a34:	40003800 	.word	0x40003800
 8001a38:	40003400 	.word	0x40003400

08001a3c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	881a      	ldrh	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	1c9a      	adds	r2, r3, #2
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10e      	bne.n	8001acc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001abc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ffb8 	bl	8001a3c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	b292      	uxth	r2, r2
 8001ae8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aee:	1c9a      	adds	r2, r3, #2
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10e      	bne.n	8001b2a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b1a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff93 	bl	8001a50 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d13a      	bne.n	8001bc4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d109      	bne.n	8001b6c <I2S_IRQHandler+0x3a>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b62:	2b40      	cmp	r3, #64	; 0x40
 8001b64:	d102      	bne.n	8001b6c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ffb4 	bl	8001ad4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b72:	2b40      	cmp	r3, #64	; 0x40
 8001b74:	d126      	bne.n	8001bc4 <I2S_IRQHandler+0x92>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0320 	and.w	r3, r3, #32
 8001b80:	2b20      	cmp	r3, #32
 8001b82:	d11f      	bne.n	8001bc4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b92:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f043 0202 	orr.w	r2, r3, #2
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ff50 	bl	8001a64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d136      	bne.n	8001c3e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d109      	bne.n	8001bee <I2S_IRQHandler+0xbc>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be4:	2b80      	cmp	r3, #128	; 0x80
 8001be6:	d102      	bne.n	8001bee <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ff45 	bl	8001a78 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d122      	bne.n	8001c3e <I2S_IRQHandler+0x10c>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	2b20      	cmp	r3, #32
 8001c04:	d11b      	bne.n	8001c3e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c14:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c30:	f043 0204 	orr.w	r2, r3, #4
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ff13 	bl	8001a64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4aa2      	ldr	r2, [pc, #648]	; (8001ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d101      	bne.n	8001c66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001c62:	4ba2      	ldr	r3, [pc, #648]	; (8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c64:	e001      	b.n	8001c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001c66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a9b      	ldr	r2, [pc, #620]	; (8001ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d101      	bne.n	8001c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001c80:	4b9a      	ldr	r3, [pc, #616]	; (8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c82:	e001      	b.n	8001c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001c84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c94:	d004      	beq.n	8001ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f040 8099 	bne.w	8001dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d107      	bne.n	8001cba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f925 	bl	8001f04 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d107      	bne.n	8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f9c8 	bl	8002064 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cda:	2b40      	cmp	r3, #64	; 0x40
 8001cdc:	d13a      	bne.n	8001d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d035      	beq.n	8001d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a7e      	ldr	r2, [pc, #504]	; (8001ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d101      	bne.n	8001cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001cf2:	4b7e      	ldr	r3, [pc, #504]	; (8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001cf4:	e001      	b.n	8001cfa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001cf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4979      	ldr	r1, [pc, #484]	; (8001ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d02:	428b      	cmp	r3, r1
 8001d04:	d101      	bne.n	8001d0a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001d06:	4b79      	ldr	r3, [pc, #484]	; (8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d08:	e001      	b.n	8001d0e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001d0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d12:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d22:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	f043 0202 	orr.w	r2, r3, #2
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff fe88 	bl	8001a64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	f040 80be 	bne.w	8001edc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80b8 	beq.w	8001edc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d7a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a59      	ldr	r2, [pc, #356]	; (8001ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d101      	bne.n	8001d8a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001d86:	4b59      	ldr	r3, [pc, #356]	; (8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d88:	e001      	b.n	8001d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001d8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4954      	ldr	r1, [pc, #336]	; (8001ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d96:	428b      	cmp	r3, r1
 8001d98:	d101      	bne.n	8001d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001d9a:	4b54      	ldr	r3, [pc, #336]	; (8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d9c:	e001      	b.n	8001da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001d9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001da2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001da6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f043 0204 	orr.w	r2, r3, #4
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff fe4a 	bl	8001a64 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001dd0:	e084      	b.n	8001edc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d107      	bne.n	8001dec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8be 	bl	8001f68 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f8fd 	bl	8002000 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0c:	2b40      	cmp	r3, #64	; 0x40
 8001e0e:	d12f      	bne.n	8001e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d02a      	beq.n	8001e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e28:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a2e      	ldr	r2, [pc, #184]	; (8001ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d101      	bne.n	8001e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001e34:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e36:	e001      	b.n	8001e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001e38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4929      	ldr	r1, [pc, #164]	; (8001ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e44:	428b      	cmp	r3, r1
 8001e46:	d101      	bne.n	8001e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001e48:	4b28      	ldr	r3, [pc, #160]	; (8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e4a:	e001      	b.n	8001e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001e4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e54:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f043 0202 	orr.w	r2, r3, #2
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fdfa 	bl	8001a64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d131      	bne.n	8001ede <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d02c      	beq.n	8001ede <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a17      	ldr	r2, [pc, #92]	; (8001ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e90:	e001      	b.n	8001e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001e92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4912      	ldr	r1, [pc, #72]	; (8001ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e9e:	428b      	cmp	r3, r1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ea4:	e001      	b.n	8001eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001ea6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eaa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001eae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ebe:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ecc:	f043 0204 	orr.w	r2, r3, #4
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff fdc5 	bl	8001a64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001eda:	e000      	b.n	8001ede <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001edc:	bf00      	nop
}
 8001ede:	bf00      	nop
 8001ee0:	3720      	adds	r7, #32
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40003800 	.word	0x40003800
 8001eec:	40003400 	.word	0x40003400

08001ef0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	1c99      	adds	r1, r3, #2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6251      	str	r1, [r2, #36]	; 0x24
 8001f16:	881a      	ldrh	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d113      	bne.n	8001f5e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f44:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d106      	bne.n	8001f5e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff ffc9 	bl	8001ef0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	1c99      	adds	r1, r3, #2
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6251      	str	r1, [r2, #36]	; 0x24
 8001f7a:	8819      	ldrh	r1, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a1d      	ldr	r2, [pc, #116]	; (8001ff8 <I2SEx_TxISR_I2SExt+0x90>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d101      	bne.n	8001f8a <I2SEx_TxISR_I2SExt+0x22>
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <I2SEx_TxISR_I2SExt+0x94>)
 8001f88:	e001      	b.n	8001f8e <I2SEx_TxISR_I2SExt+0x26>
 8001f8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f8e:	460a      	mov	r2, r1
 8001f90:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d121      	bne.n	8001fee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <I2SEx_TxISR_I2SExt+0x90>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d101      	bne.n	8001fb8 <I2SEx_TxISR_I2SExt+0x50>
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <I2SEx_TxISR_I2SExt+0x94>)
 8001fb6:	e001      	b.n	8001fbc <I2SEx_TxISR_I2SExt+0x54>
 8001fb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	490d      	ldr	r1, [pc, #52]	; (8001ff8 <I2SEx_TxISR_I2SExt+0x90>)
 8001fc4:	428b      	cmp	r3, r1
 8001fc6:	d101      	bne.n	8001fcc <I2SEx_TxISR_I2SExt+0x64>
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <I2SEx_TxISR_I2SExt+0x94>)
 8001fca:	e001      	b.n	8001fd0 <I2SEx_TxISR_I2SExt+0x68>
 8001fcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fd4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d106      	bne.n	8001fee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff81 	bl	8001ef0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40003800 	.word	0x40003800
 8001ffc:	40003400 	.word	0x40003400

08002000 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68d8      	ldr	r0, [r3, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	1c99      	adds	r1, r3, #2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002018:	b282      	uxth	r2, r0
 800201a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002020:	b29b      	uxth	r3, r3
 8002022:	3b01      	subs	r3, #1
 8002024:	b29a      	uxth	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800202e:	b29b      	uxth	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d113      	bne.n	800205c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002042:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002048:	b29b      	uxth	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff ff4a 	bl	8001ef0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a20      	ldr	r2, [pc, #128]	; (80020f4 <I2SEx_RxISR_I2SExt+0x90>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d101      	bne.n	800207a <I2SEx_RxISR_I2SExt+0x16>
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <I2SEx_RxISR_I2SExt+0x94>)
 8002078:	e001      	b.n	800207e <I2SEx_RxISR_I2SExt+0x1a>
 800207a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800207e:	68d8      	ldr	r0, [r3, #12]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	1c99      	adds	r1, r3, #2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	62d1      	str	r1, [r2, #44]	; 0x2c
 800208a:	b282      	uxth	r2, r0
 800208c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002092:	b29b      	uxth	r3, r3
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d121      	bne.n	80020ea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <I2SEx_RxISR_I2SExt+0x90>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d101      	bne.n	80020b4 <I2SEx_RxISR_I2SExt+0x50>
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <I2SEx_RxISR_I2SExt+0x94>)
 80020b2:	e001      	b.n	80020b8 <I2SEx_RxISR_I2SExt+0x54>
 80020b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	490d      	ldr	r1, [pc, #52]	; (80020f4 <I2SEx_RxISR_I2SExt+0x90>)
 80020c0:	428b      	cmp	r3, r1
 80020c2:	d101      	bne.n	80020c8 <I2SEx_RxISR_I2SExt+0x64>
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <I2SEx_RxISR_I2SExt+0x94>)
 80020c6:	e001      	b.n	80020cc <I2SEx_RxISR_I2SExt+0x68>
 80020c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020d0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d106      	bne.n	80020ea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff03 	bl	8001ef0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40003800 	.word	0x40003800
 80020f8:	40003400 	.word	0x40003400

080020fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e25b      	b.n	80025c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d075      	beq.n	8002206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800211a:	4ba3      	ldr	r3, [pc, #652]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b04      	cmp	r3, #4
 8002124:	d00c      	beq.n	8002140 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002126:	4ba0      	ldr	r3, [pc, #640]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800212e:	2b08      	cmp	r3, #8
 8002130:	d112      	bne.n	8002158 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002132:	4b9d      	ldr	r3, [pc, #628]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800213e:	d10b      	bne.n	8002158 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002140:	4b99      	ldr	r3, [pc, #612]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d05b      	beq.n	8002204 <HAL_RCC_OscConfig+0x108>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d157      	bne.n	8002204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e236      	b.n	80025c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002160:	d106      	bne.n	8002170 <HAL_RCC_OscConfig+0x74>
 8002162:	4b91      	ldr	r3, [pc, #580]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a90      	ldr	r2, [pc, #576]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e01d      	b.n	80021ac <HAL_RCC_OscConfig+0xb0>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x98>
 800217a:	4b8b      	ldr	r3, [pc, #556]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a8a      	ldr	r2, [pc, #552]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	4b88      	ldr	r3, [pc, #544]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a87      	ldr	r2, [pc, #540]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800218c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	e00b      	b.n	80021ac <HAL_RCC_OscConfig+0xb0>
 8002194:	4b84      	ldr	r3, [pc, #528]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a83      	ldr	r2, [pc, #524]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800219a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	4b81      	ldr	r3, [pc, #516]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a80      	ldr	r2, [pc, #512]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 80021a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d013      	beq.n	80021dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7fe ff26 	bl	8001004 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021bc:	f7fe ff22 	bl	8001004 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	; 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e1fb      	b.n	80025c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	4b76      	ldr	r3, [pc, #472]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0xc0>
 80021da:	e014      	b.n	8002206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7fe ff12 	bl	8001004 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e4:	f7fe ff0e 	bl	8001004 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	; 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e1e7      	b.n	80025c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f6:	4b6c      	ldr	r3, [pc, #432]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0xe8>
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d063      	beq.n	80022da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002212:	4b65      	ldr	r3, [pc, #404]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00b      	beq.n	8002236 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800221e:	4b62      	ldr	r3, [pc, #392]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002226:	2b08      	cmp	r3, #8
 8002228:	d11c      	bne.n	8002264 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222a:	4b5f      	ldr	r3, [pc, #380]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d116      	bne.n	8002264 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002236:	4b5c      	ldr	r3, [pc, #368]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_RCC_OscConfig+0x152>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d001      	beq.n	800224e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e1bb      	b.n	80025c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224e:	4b56      	ldr	r3, [pc, #344]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4952      	ldr	r1, [pc, #328]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002262:	e03a      	b.n	80022da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d020      	beq.n	80022ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800226c:	4b4f      	ldr	r3, [pc, #316]	; (80023ac <HAL_RCC_OscConfig+0x2b0>)
 800226e:	2201      	movs	r2, #1
 8002270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002272:	f7fe fec7 	bl	8001004 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227a:	f7fe fec3 	bl	8001004 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e19c      	b.n	80025c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228c:	4b46      	ldr	r3, [pc, #280]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002298:	4b43      	ldr	r3, [pc, #268]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4940      	ldr	r1, [pc, #256]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]
 80022ac:	e015      	b.n	80022da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ae:	4b3f      	ldr	r3, [pc, #252]	; (80023ac <HAL_RCC_OscConfig+0x2b0>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7fe fea6 	bl	8001004 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022bc:	f7fe fea2 	bl	8001004 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e17b      	b.n	80025c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ce:	4b36      	ldr	r3, [pc, #216]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d030      	beq.n	8002348 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d016      	beq.n	800231c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ee:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <HAL_RCC_OscConfig+0x2b4>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f4:	f7fe fe86 	bl	8001004 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022fc:	f7fe fe82 	bl	8001004 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e15b      	b.n	80025c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230e:	4b26      	ldr	r3, [pc, #152]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x200>
 800231a:	e015      	b.n	8002348 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231c:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <HAL_RCC_OscConfig+0x2b4>)
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002322:	f7fe fe6f 	bl	8001004 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800232a:	f7fe fe6b 	bl	8001004 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e144      	b.n	80025c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800233c:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800233e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f0      	bne.n	800232a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80a0 	beq.w	8002496 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235a:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10f      	bne.n	8002386 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002382:	2301      	movs	r3, #1
 8002384:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_RCC_OscConfig+0x2b8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d121      	bne.n	80023d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002392:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <HAL_RCC_OscConfig+0x2b8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a07      	ldr	r2, [pc, #28]	; (80023b4 <HAL_RCC_OscConfig+0x2b8>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800239e:	f7fe fe31 	bl	8001004 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a4:	e011      	b.n	80023ca <HAL_RCC_OscConfig+0x2ce>
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800
 80023ac:	42470000 	.word	0x42470000
 80023b0:	42470e80 	.word	0x42470e80
 80023b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b8:	f7fe fe24 	bl	8001004 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e0fd      	b.n	80025c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ca:	4b81      	ldr	r3, [pc, #516]	; (80025d0 <HAL_RCC_OscConfig+0x4d4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d106      	bne.n	80023ec <HAL_RCC_OscConfig+0x2f0>
 80023de:	4b7d      	ldr	r3, [pc, #500]	; (80025d4 <HAL_RCC_OscConfig+0x4d8>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e2:	4a7c      	ldr	r2, [pc, #496]	; (80025d4 <HAL_RCC_OscConfig+0x4d8>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ea:	e01c      	b.n	8002426 <HAL_RCC_OscConfig+0x32a>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d10c      	bne.n	800240e <HAL_RCC_OscConfig+0x312>
 80023f4:	4b77      	ldr	r3, [pc, #476]	; (80025d4 <HAL_RCC_OscConfig+0x4d8>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	4a76      	ldr	r2, [pc, #472]	; (80025d4 <HAL_RCC_OscConfig+0x4d8>)
 80023fa:	f043 0304 	orr.w	r3, r3, #4
 80023fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002400:	4b74      	ldr	r3, [pc, #464]	; (80025d4 <HAL_RCC_OscConfig+0x4d8>)
 8002402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002404:	4a73      	ldr	r2, [pc, #460]	; (80025d4 <HAL_RCC_OscConfig+0x4d8>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6713      	str	r3, [r2, #112]	; 0x70
 800240c:	e00b      	b.n	8002426 <HAL_RCC_OscConfig+0x32a>
 800240e:	4b71      	ldr	r3, [pc, #452]	; (80025d4 <HAL_RCC_OscConfig+0x4d8>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	4a70      	ldr	r2, [pc, #448]	; (80025d4 <HAL_RCC_OscConfig+0x4d8>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	6713      	str	r3, [r2, #112]	; 0x70
 800241a:	4b6e      	ldr	r3, [pc, #440]	; (80025d4 <HAL_RCC_OscConfig+0x4d8>)
 800241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241e:	4a6d      	ldr	r2, [pc, #436]	; (80025d4 <HAL_RCC_OscConfig+0x4d8>)
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d015      	beq.n	800245a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242e:	f7fe fde9 	bl	8001004 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002434:	e00a      	b.n	800244c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f7fe fde5 	bl	8001004 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e0bc      	b.n	80025c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	4b61      	ldr	r3, [pc, #388]	; (80025d4 <HAL_RCC_OscConfig+0x4d8>)
 800244e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0ee      	beq.n	8002436 <HAL_RCC_OscConfig+0x33a>
 8002458:	e014      	b.n	8002484 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245a:	f7fe fdd3 	bl	8001004 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	e00a      	b.n	8002478 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7fe fdcf 	bl	8001004 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0a6      	b.n	80025c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	4b56      	ldr	r3, [pc, #344]	; (80025d4 <HAL_RCC_OscConfig+0x4d8>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1ee      	bne.n	8002462 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002484:	7dfb      	ldrb	r3, [r7, #23]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d105      	bne.n	8002496 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248a:	4b52      	ldr	r3, [pc, #328]	; (80025d4 <HAL_RCC_OscConfig+0x4d8>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	4a51      	ldr	r2, [pc, #324]	; (80025d4 <HAL_RCC_OscConfig+0x4d8>)
 8002490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002494:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 8092 	beq.w	80025c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024a0:	4b4c      	ldr	r3, [pc, #304]	; (80025d4 <HAL_RCC_OscConfig+0x4d8>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d05c      	beq.n	8002566 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d141      	bne.n	8002538 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b4:	4b48      	ldr	r3, [pc, #288]	; (80025d8 <HAL_RCC_OscConfig+0x4dc>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7fe fda3 	bl	8001004 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c2:	f7fe fd9f 	bl	8001004 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e078      	b.n	80025c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d4:	4b3f      	ldr	r3, [pc, #252]	; (80025d4 <HAL_RCC_OscConfig+0x4d8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f0      	bne.n	80024c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69da      	ldr	r2, [r3, #28]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	019b      	lsls	r3, r3, #6
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f6:	085b      	lsrs	r3, r3, #1
 80024f8:	3b01      	subs	r3, #1
 80024fa:	041b      	lsls	r3, r3, #16
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	061b      	lsls	r3, r3, #24
 8002504:	4933      	ldr	r1, [pc, #204]	; (80025d4 <HAL_RCC_OscConfig+0x4d8>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800250a:	4b33      	ldr	r3, [pc, #204]	; (80025d8 <HAL_RCC_OscConfig+0x4dc>)
 800250c:	2201      	movs	r2, #1
 800250e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe fd78 	bl	8001004 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002518:	f7fe fd74 	bl	8001004 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e04d      	b.n	80025c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252a:	4b2a      	ldr	r3, [pc, #168]	; (80025d4 <HAL_RCC_OscConfig+0x4d8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0x41c>
 8002536:	e045      	b.n	80025c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002538:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <HAL_RCC_OscConfig+0x4dc>)
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253e:	f7fe fd61 	bl	8001004 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002546:	f7fe fd5d 	bl	8001004 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e036      	b.n	80025c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002558:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <HAL_RCC_OscConfig+0x4d8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f0      	bne.n	8002546 <HAL_RCC_OscConfig+0x44a>
 8002564:	e02e      	b.n	80025c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e029      	b.n	80025c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002572:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <HAL_RCC_OscConfig+0x4d8>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	429a      	cmp	r2, r3
 8002584:	d11c      	bne.n	80025c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d115      	bne.n	80025c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800259a:	4013      	ands	r3, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d10d      	bne.n	80025c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d106      	bne.n	80025c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025bc:	429a      	cmp	r2, r3
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40007000 	.word	0x40007000
 80025d4:	40023800 	.word	0x40023800
 80025d8:	42470060 	.word	0x42470060

080025dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0cc      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025f0:	4b68      	ldr	r3, [pc, #416]	; (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d90c      	bls.n	8002618 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fe:	4b65      	ldr	r3, [pc, #404]	; (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b63      	ldr	r3, [pc, #396]	; (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0b8      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002630:	4b59      	ldr	r3, [pc, #356]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a58      	ldr	r2, [pc, #352]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800263a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002648:	4b53      	ldr	r3, [pc, #332]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	4a52      	ldr	r2, [pc, #328]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002652:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002654:	4b50      	ldr	r3, [pc, #320]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	494d      	ldr	r1, [pc, #308]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	4313      	orrs	r3, r2
 8002664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d044      	beq.n	80026fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267a:	4b47      	ldr	r3, [pc, #284]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d119      	bne.n	80026ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e07f      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d003      	beq.n	800269a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002696:	2b03      	cmp	r3, #3
 8002698:	d107      	bne.n	80026aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269a:	4b3f      	ldr	r3, [pc, #252]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e06f      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026aa:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e067      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ba:	4b37      	ldr	r3, [pc, #220]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f023 0203 	bic.w	r2, r3, #3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4934      	ldr	r1, [pc, #208]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026cc:	f7fe fc9a 	bl	8001004 <HAL_GetTick>
 80026d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d4:	f7fe fc96 	bl	8001004 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e04f      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ea:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 020c 	and.w	r2, r3, #12
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d1eb      	bne.n	80026d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026fc:	4b25      	ldr	r3, [pc, #148]	; (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d20c      	bcs.n	8002724 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270a:	4b22      	ldr	r3, [pc, #136]	; (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b20      	ldr	r3, [pc, #128]	; (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e032      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4916      	ldr	r1, [pc, #88]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	4313      	orrs	r3, r2
 8002740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	490e      	ldr	r1, [pc, #56]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	4313      	orrs	r3, r2
 8002760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002762:	f000 f821 	bl	80027a8 <HAL_RCC_GetSysClockFreq>
 8002766:	4601      	mov	r1, r0
 8002768:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	4a0a      	ldr	r2, [pc, #40]	; (800279c <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	5cd3      	ldrb	r3, [r2, r3]
 8002776:	fa21 f303 	lsr.w	r3, r1, r3
 800277a:	4a09      	ldr	r2, [pc, #36]	; (80027a0 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7fe fb4c 	bl	8000e20 <HAL_InitTick>

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40023c00 	.word	0x40023c00
 8002798:	40023800 	.word	0x40023800
 800279c:	080046e0 	.word	0x080046e0
 80027a0:	20000000 	.word	0x20000000
 80027a4:	20000004 	.word	0x20000004

080027a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	2300      	movs	r3, #0
 80027b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027be:	4b63      	ldr	r3, [pc, #396]	; (800294c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d007      	beq.n	80027da <HAL_RCC_GetSysClockFreq+0x32>
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d008      	beq.n	80027e0 <HAL_RCC_GetSysClockFreq+0x38>
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f040 80b4 	bne.w	800293c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027d4:	4b5e      	ldr	r3, [pc, #376]	; (8002950 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027d6:	60bb      	str	r3, [r7, #8]
       break;
 80027d8:	e0b3      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027da:	4b5e      	ldr	r3, [pc, #376]	; (8002954 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80027dc:	60bb      	str	r3, [r7, #8]
      break;
 80027de:	e0b0      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027e0:	4b5a      	ldr	r3, [pc, #360]	; (800294c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ea:	4b58      	ldr	r3, [pc, #352]	; (800294c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d04a      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f6:	4b55      	ldr	r3, [pc, #340]	; (800294c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	099b      	lsrs	r3, r3, #6
 80027fc:	f04f 0400 	mov.w	r4, #0
 8002800:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	ea03 0501 	and.w	r5, r3, r1
 800280c:	ea04 0602 	and.w	r6, r4, r2
 8002810:	4629      	mov	r1, r5
 8002812:	4632      	mov	r2, r6
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	f04f 0400 	mov.w	r4, #0
 800281c:	0154      	lsls	r4, r2, #5
 800281e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002822:	014b      	lsls	r3, r1, #5
 8002824:	4619      	mov	r1, r3
 8002826:	4622      	mov	r2, r4
 8002828:	1b49      	subs	r1, r1, r5
 800282a:	eb62 0206 	sbc.w	r2, r2, r6
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	f04f 0400 	mov.w	r4, #0
 8002836:	0194      	lsls	r4, r2, #6
 8002838:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800283c:	018b      	lsls	r3, r1, #6
 800283e:	1a5b      	subs	r3, r3, r1
 8002840:	eb64 0402 	sbc.w	r4, r4, r2
 8002844:	f04f 0100 	mov.w	r1, #0
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	00e2      	lsls	r2, r4, #3
 800284e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002852:	00d9      	lsls	r1, r3, #3
 8002854:	460b      	mov	r3, r1
 8002856:	4614      	mov	r4, r2
 8002858:	195b      	adds	r3, r3, r5
 800285a:	eb44 0406 	adc.w	r4, r4, r6
 800285e:	f04f 0100 	mov.w	r1, #0
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	0262      	lsls	r2, r4, #9
 8002868:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800286c:	0259      	lsls	r1, r3, #9
 800286e:	460b      	mov	r3, r1
 8002870:	4614      	mov	r4, r2
 8002872:	4618      	mov	r0, r3
 8002874:	4621      	mov	r1, r4
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f04f 0400 	mov.w	r4, #0
 800287c:	461a      	mov	r2, r3
 800287e:	4623      	mov	r3, r4
 8002880:	f7fd fcae 	bl	80001e0 <__aeabi_uldivmod>
 8002884:	4603      	mov	r3, r0
 8002886:	460c      	mov	r4, r1
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	e049      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800288c:	4b2f      	ldr	r3, [pc, #188]	; (800294c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	099b      	lsrs	r3, r3, #6
 8002892:	f04f 0400 	mov.w	r4, #0
 8002896:	f240 11ff 	movw	r1, #511	; 0x1ff
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	ea03 0501 	and.w	r5, r3, r1
 80028a2:	ea04 0602 	and.w	r6, r4, r2
 80028a6:	4629      	mov	r1, r5
 80028a8:	4632      	mov	r2, r6
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	f04f 0400 	mov.w	r4, #0
 80028b2:	0154      	lsls	r4, r2, #5
 80028b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028b8:	014b      	lsls	r3, r1, #5
 80028ba:	4619      	mov	r1, r3
 80028bc:	4622      	mov	r2, r4
 80028be:	1b49      	subs	r1, r1, r5
 80028c0:	eb62 0206 	sbc.w	r2, r2, r6
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	f04f 0400 	mov.w	r4, #0
 80028cc:	0194      	lsls	r4, r2, #6
 80028ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028d2:	018b      	lsls	r3, r1, #6
 80028d4:	1a5b      	subs	r3, r3, r1
 80028d6:	eb64 0402 	sbc.w	r4, r4, r2
 80028da:	f04f 0100 	mov.w	r1, #0
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	00e2      	lsls	r2, r4, #3
 80028e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028e8:	00d9      	lsls	r1, r3, #3
 80028ea:	460b      	mov	r3, r1
 80028ec:	4614      	mov	r4, r2
 80028ee:	195b      	adds	r3, r3, r5
 80028f0:	eb44 0406 	adc.w	r4, r4, r6
 80028f4:	f04f 0100 	mov.w	r1, #0
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	02a2      	lsls	r2, r4, #10
 80028fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002902:	0299      	lsls	r1, r3, #10
 8002904:	460b      	mov	r3, r1
 8002906:	4614      	mov	r4, r2
 8002908:	4618      	mov	r0, r3
 800290a:	4621      	mov	r1, r4
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f04f 0400 	mov.w	r4, #0
 8002912:	461a      	mov	r2, r3
 8002914:	4623      	mov	r3, r4
 8002916:	f7fd fc63 	bl	80001e0 <__aeabi_uldivmod>
 800291a:	4603      	mov	r3, r0
 800291c:	460c      	mov	r4, r1
 800291e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002920:	4b0a      	ldr	r3, [pc, #40]	; (800294c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	0c1b      	lsrs	r3, r3, #16
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	3301      	adds	r3, #1
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	fbb2 f3f3 	udiv	r3, r2, r3
 8002938:	60bb      	str	r3, [r7, #8]
      break;
 800293a:	e002      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800293c:	4b04      	ldr	r3, [pc, #16]	; (8002950 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800293e:	60bb      	str	r3, [r7, #8]
      break;
 8002940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002942:	68bb      	ldr	r3, [r7, #8]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800294c:	40023800 	.word	0x40023800
 8002950:	00f42400 	.word	0x00f42400
 8002954:	007a1200 	.word	0x007a1200

08002958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <HAL_RCC_GetHCLKFreq+0x14>)
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20000000 	.word	0x20000000

08002970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002974:	f7ff fff0 	bl	8002958 <HAL_RCC_GetHCLKFreq>
 8002978:	4601      	mov	r1, r0
 800297a:	4b05      	ldr	r3, [pc, #20]	; (8002990 <HAL_RCC_GetPCLK1Freq+0x20>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	0a9b      	lsrs	r3, r3, #10
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	4a03      	ldr	r2, [pc, #12]	; (8002994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002986:	5cd3      	ldrb	r3, [r2, r3]
 8002988:	fa21 f303 	lsr.w	r3, r1, r3
}
 800298c:	4618      	mov	r0, r3
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40023800 	.word	0x40023800
 8002994:	080046f0 	.word	0x080046f0

08002998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800299c:	f7ff ffdc 	bl	8002958 <HAL_RCC_GetHCLKFreq>
 80029a0:	4601      	mov	r1, r0
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	0b5b      	lsrs	r3, r3, #13
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	4a03      	ldr	r2, [pc, #12]	; (80029bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ae:	5cd3      	ldrb	r3, [r2, r3]
 80029b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40023800 	.word	0x40023800
 80029bc:	080046f0 	.word	0x080046f0

080029c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	220f      	movs	r2, #15
 80029ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_RCC_GetClockConfig+0x5c>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0203 	and.w	r2, r3, #3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029dc:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <HAL_RCC_GetClockConfig+0x5c>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029e8:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <HAL_RCC_GetClockConfig+0x5c>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029f4:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_RCC_GetClockConfig+0x5c>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	08db      	lsrs	r3, r3, #3
 80029fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a02:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <HAL_RCC_GetClockConfig+0x60>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 020f 	and.w	r2, r3, #15
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	601a      	str	r2, [r3, #0]
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40023c00 	.word	0x40023c00

08002a24 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d038      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a4c:	4b68      	ldr	r3, [pc, #416]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a52:	f7fe fad7 	bl	8001004 <HAL_GetTick>
 8002a56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a58:	e008      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a5a:	f7fe fad3 	bl	8001004 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e0bd      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a6c:	4b61      	ldr	r3, [pc, #388]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1f0      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	019b      	lsls	r3, r3, #6
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	071b      	lsls	r3, r3, #28
 8002a8a:	495a      	ldr	r1, [pc, #360]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a92:	4b57      	ldr	r3, [pc, #348]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a98:	f7fe fab4 	bl	8001004 <HAL_GetTick>
 8002a9c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002aa0:	f7fe fab0 	bl	8001004 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e09a      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ab2:	4b50      	ldr	r3, [pc, #320]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8083 	beq.w	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	4b48      	ldr	r3, [pc, #288]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	4a47      	ldr	r2, [pc, #284]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ada:	6413      	str	r3, [r2, #64]	; 0x40
 8002adc:	4b45      	ldr	r3, [pc, #276]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ae8:	4b43      	ldr	r3, [pc, #268]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a42      	ldr	r2, [pc, #264]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002af4:	f7fe fa86 	bl	8001004 <HAL_GetTick>
 8002af8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002afc:	f7fe fa82 	bl	8001004 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e06c      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b0e:	4b3a      	ldr	r3, [pc, #232]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b1a:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b22:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d02f      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d028      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b38:	4b2e      	ldr	r3, [pc, #184]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b40:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b42:	4b2e      	ldr	r3, [pc, #184]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b48:	4b2c      	ldr	r3, [pc, #176]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b4e:	4a29      	ldr	r2, [pc, #164]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b54:	4b27      	ldr	r3, [pc, #156]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d114      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fe fa50 	bl	8001004 <HAL_GetTick>
 8002b64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b66:	e00a      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7fe fa4c 	bl	8001004 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e034      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7e:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0ee      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b96:	d10d      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002b98:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bac:	4911      	ldr	r1, [pc, #68]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	608b      	str	r3, [r1, #8]
 8002bb2:	e005      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002bb4:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4a0e      	ldr	r2, [pc, #56]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bbe:	6093      	str	r3, [r2, #8]
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bcc:	4909      	ldr	r1, [pc, #36]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	7d1a      	ldrb	r2, [r3, #20]
 8002be2:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002be4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	42470068 	.word	0x42470068
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40007000 	.word	0x40007000
 8002bfc:	42470e40 	.word	0x42470e40
 8002c00:	424711e0 	.word	0x424711e0

08002c04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d13f      	bne.n	8002ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002c22:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c2a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d004      	beq.n	8002c3c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d131      	bne.n	8002c9a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002c36:	4b1f      	ldr	r3, [pc, #124]	; (8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002c38:	617b      	str	r3, [r7, #20]
          break;
 8002c3a:	e031      	b.n	8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c3c:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c48:	d109      	bne.n	8002c5e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002c4a:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c54:	4a18      	ldr	r2, [pc, #96]	; (8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	e008      	b.n	8002c70 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002c5e:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c68:	4a14      	ldr	r2, [pc, #80]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c76:	099b      	lsrs	r3, r3, #6
 8002c78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c8a:	0f1b      	lsrs	r3, r3, #28
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c96:	617b      	str	r3, [r7, #20]
          break;
 8002c98:	e002      	b.n	8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
          break;
 8002c9e:	bf00      	nop
        }
      }
      break;
 8002ca0:	bf00      	nop
    }
  }
  return frequency;
 8002ca2:	697b      	ldr	r3, [r7, #20]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	371c      	adds	r7, #28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	00bb8000 	.word	0x00bb8000
 8002cb8:	007a1200 	.word	0x007a1200
 8002cbc:	00f42400 	.word	0x00f42400

08002cc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e056      	b.n	8002d80 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d106      	bne.n	8002cf2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7fe f84f 	bl	8000d90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d08:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	ea42 0103 	orr.w	r1, r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	0c1b      	lsrs	r3, r3, #16
 8002d50:	f003 0104 	and.w	r1, r3, #4
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69da      	ldr	r2, [r3, #28]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e01d      	b.n	8002dd6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f815 	bl	8002dde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f000 f968 	bl	800309c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b085      	sub	sp, #20
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0201 	orr.w	r2, r2, #1
 8002e08:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b06      	cmp	r3, #6
 8002e1a:	d007      	beq.n	8002e2c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d122      	bne.n	8002e96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d11b      	bne.n	8002e96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f06f 0202 	mvn.w	r2, #2
 8002e66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f8ee 	bl	800305e <HAL_TIM_IC_CaptureCallback>
 8002e82:	e005      	b.n	8002e90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f8e0 	bl	800304a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f8f1 	bl	8003072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d122      	bne.n	8002eea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d11b      	bne.n	8002eea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f06f 0204 	mvn.w	r2, #4
 8002eba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f8c4 	bl	800305e <HAL_TIM_IC_CaptureCallback>
 8002ed6:	e005      	b.n	8002ee4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f8b6 	bl	800304a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f8c7 	bl	8003072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d122      	bne.n	8002f3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d11b      	bne.n	8002f3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f06f 0208 	mvn.w	r2, #8
 8002f0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2204      	movs	r2, #4
 8002f14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f89a 	bl	800305e <HAL_TIM_IC_CaptureCallback>
 8002f2a:	e005      	b.n	8002f38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f88c 	bl	800304a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f89d 	bl	8003072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d122      	bne.n	8002f92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	2b10      	cmp	r3, #16
 8002f58:	d11b      	bne.n	8002f92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f06f 0210 	mvn.w	r2, #16
 8002f62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2208      	movs	r2, #8
 8002f68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f870 	bl	800305e <HAL_TIM_IC_CaptureCallback>
 8002f7e:	e005      	b.n	8002f8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f862 	bl	800304a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f873 	bl	8003072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d10e      	bne.n	8002fbe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d107      	bne.n	8002fbe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f06f 0201 	mvn.w	r2, #1
 8002fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7fd fd8d 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc8:	2b80      	cmp	r3, #128	; 0x80
 8002fca:	d10e      	bne.n	8002fea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd6:	2b80      	cmp	r3, #128	; 0x80
 8002fd8:	d107      	bne.n	8002fea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f8e3 	bl	80031b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff4:	2b40      	cmp	r3, #64	; 0x40
 8002ff6:	d10e      	bne.n	8003016 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003002:	2b40      	cmp	r3, #64	; 0x40
 8003004:	d107      	bne.n	8003016 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800300e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f838 	bl	8003086 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	2b20      	cmp	r3, #32
 8003022:	d10e      	bne.n	8003042 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	2b20      	cmp	r3, #32
 8003030:	d107      	bne.n	8003042 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f06f 0220 	mvn.w	r2, #32
 800303a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f8ad 	bl	800319c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a34      	ldr	r2, [pc, #208]	; (8003180 <TIM_Base_SetConfig+0xe4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d00f      	beq.n	80030d4 <TIM_Base_SetConfig+0x38>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ba:	d00b      	beq.n	80030d4 <TIM_Base_SetConfig+0x38>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a31      	ldr	r2, [pc, #196]	; (8003184 <TIM_Base_SetConfig+0xe8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d007      	beq.n	80030d4 <TIM_Base_SetConfig+0x38>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a30      	ldr	r2, [pc, #192]	; (8003188 <TIM_Base_SetConfig+0xec>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d003      	beq.n	80030d4 <TIM_Base_SetConfig+0x38>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a2f      	ldr	r2, [pc, #188]	; (800318c <TIM_Base_SetConfig+0xf0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d108      	bne.n	80030e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a25      	ldr	r2, [pc, #148]	; (8003180 <TIM_Base_SetConfig+0xe4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d01b      	beq.n	8003126 <TIM_Base_SetConfig+0x8a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f4:	d017      	beq.n	8003126 <TIM_Base_SetConfig+0x8a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a22      	ldr	r2, [pc, #136]	; (8003184 <TIM_Base_SetConfig+0xe8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <TIM_Base_SetConfig+0x8a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a21      	ldr	r2, [pc, #132]	; (8003188 <TIM_Base_SetConfig+0xec>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00f      	beq.n	8003126 <TIM_Base_SetConfig+0x8a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a20      	ldr	r2, [pc, #128]	; (800318c <TIM_Base_SetConfig+0xf0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00b      	beq.n	8003126 <TIM_Base_SetConfig+0x8a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a1f      	ldr	r2, [pc, #124]	; (8003190 <TIM_Base_SetConfig+0xf4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d007      	beq.n	8003126 <TIM_Base_SetConfig+0x8a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a1e      	ldr	r2, [pc, #120]	; (8003194 <TIM_Base_SetConfig+0xf8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d003      	beq.n	8003126 <TIM_Base_SetConfig+0x8a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a1d      	ldr	r2, [pc, #116]	; (8003198 <TIM_Base_SetConfig+0xfc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d108      	bne.n	8003138 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800312c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4313      	orrs	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a08      	ldr	r2, [pc, #32]	; (8003180 <TIM_Base_SetConfig+0xe4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d103      	bne.n	800316c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	615a      	str	r2, [r3, #20]
}
 8003172:	bf00      	nop
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40010000 	.word	0x40010000
 8003184:	40000400 	.word	0x40000400
 8003188:	40000800 	.word	0x40000800
 800318c:	40000c00 	.word	0x40000c00
 8003190:	40014000 	.word	0x40014000
 8003194:	40014400 	.word	0x40014400
 8003198:	40014800 	.word	0x40014800

0800319c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80031d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031d6:	2b84      	cmp	r3, #132	; 0x84
 80031d8:	d005      	beq.n	80031e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80031da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4413      	add	r3, r2
 80031e2:	3303      	adds	r3, #3
 80031e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80031e6:	68fb      	ldr	r3, [r7, #12]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80031f8:	f000 fad2 	bl	80037a0 <vTaskStartScheduler>
  
  return osOK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	bd80      	pop	{r7, pc}

08003202 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003202:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003204:	b089      	sub	sp, #36	; 0x24
 8003206:	af04      	add	r7, sp, #16
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <osThreadCreate+0x54>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01c      	beq.n	8003256 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685c      	ldr	r4, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681d      	ldr	r5, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691e      	ldr	r6, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff ffc8 	bl	80031c4 <makeFreeRtosPriority>
 8003234:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800323e:	9202      	str	r2, [sp, #8]
 8003240:	9301      	str	r3, [sp, #4]
 8003242:	9100      	str	r1, [sp, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	4632      	mov	r2, r6
 8003248:	4629      	mov	r1, r5
 800324a:	4620      	mov	r0, r4
 800324c:	f000 f8ed 	bl	800342a <xTaskCreateStatic>
 8003250:	4603      	mov	r3, r0
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	e01c      	b.n	8003290 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685c      	ldr	r4, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003262:	b29e      	uxth	r6, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff ffaa 	bl	80031c4 <makeFreeRtosPriority>
 8003270:	4602      	mov	r2, r0
 8003272:	f107 030c 	add.w	r3, r7, #12
 8003276:	9301      	str	r3, [sp, #4]
 8003278:	9200      	str	r2, [sp, #0]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	4632      	mov	r2, r6
 800327e:	4629      	mov	r1, r5
 8003280:	4620      	mov	r0, r4
 8003282:	f000 f92b 	bl	80034dc <xTaskCreate>
 8003286:	4603      	mov	r3, r0
 8003288:	2b01      	cmp	r3, #1
 800328a:	d001      	beq.n	8003290 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800328c:	2300      	movs	r3, #0
 800328e:	e000      	b.n	8003292 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003290:	68fb      	ldr	r3, [r7, #12]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800329a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <osDelay+0x16>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	e000      	b.n	80032b2 <osDelay+0x18>
 80032b0:	2301      	movs	r3, #1
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fa40 	bl	8003738 <vTaskDelay>
  
  return osOK;
 80032b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f103 0208 	add.w	r2, r3, #8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f04f 32ff 	mov.w	r2, #4294967295
 80032da:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f103 0208 	add.w	r2, r3, #8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f103 0208 	add.w	r2, r3, #8
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	601a      	str	r2, [r3, #0]
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	d103      	bne.n	8003384 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	e00c      	b.n	800339e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3308      	adds	r3, #8
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	e002      	b.n	8003392 <vListInsert+0x2e>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	429a      	cmp	r2, r3
 800339c:	d2f6      	bcs.n	800338c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	601a      	str	r2, [r3, #0]
}
 80033ca:	bf00      	nop
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033d6:	b480      	push	{r7}
 80033d8:	b085      	sub	sp, #20
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6892      	ldr	r2, [r2, #8]
 80033ec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6852      	ldr	r2, [r2, #4]
 80033f6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d103      	bne.n	800340a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	1e5a      	subs	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800342a:	b580      	push	{r7, lr}
 800342c:	b08e      	sub	sp, #56	; 0x38
 800342e:	af04      	add	r7, sp, #16
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800343e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003442:	f383 8811 	msr	BASEPRI, r3
 8003446:	f3bf 8f6f 	isb	sy
 800344a:	f3bf 8f4f 	dsb	sy
 800344e:	623b      	str	r3, [r7, #32]
 8003450:	e7fe      	b.n	8003450 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003454:	2b00      	cmp	r3, #0
 8003456:	d109      	bne.n	800346c <xTaskCreateStatic+0x42>
 8003458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	e7fe      	b.n	800346a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800346c:	2354      	movs	r3, #84	; 0x54
 800346e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	2b54      	cmp	r3, #84	; 0x54
 8003474:	d009      	beq.n	800348a <xTaskCreateStatic+0x60>
 8003476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347a:	f383 8811 	msr	BASEPRI, r3
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	e7fe      	b.n	8003488 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800348a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01e      	beq.n	80034ce <xTaskCreateStatic+0xa4>
 8003490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01b      	beq.n	80034ce <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800349e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034a8:	2300      	movs	r3, #0
 80034aa:	9303      	str	r3, [sp, #12]
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	9302      	str	r3, [sp, #8]
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f850 	bl	8003566 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034c8:	f000 f8cc 	bl	8003664 <prvAddNewTaskToReadyList>
 80034cc:	e001      	b.n	80034d2 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80034d2:	697b      	ldr	r3, [r7, #20]
	}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3728      	adds	r7, #40	; 0x28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08c      	sub	sp, #48	; 0x30
 80034e0:	af04      	add	r7, sp, #16
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	4613      	mov	r3, r2
 80034ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034ec:	88fb      	ldrh	r3, [r7, #6]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 feb7 	bl	8004264 <pvPortMalloc>
 80034f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00e      	beq.n	800351c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80034fe:	2054      	movs	r0, #84	; 0x54
 8003500:	f000 feb0 	bl	8004264 <pvPortMalloc>
 8003504:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
 8003512:	e005      	b.n	8003520 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003514:	6978      	ldr	r0, [r7, #20]
 8003516:	f000 ff67 	bl	80043e8 <vPortFree>
 800351a:	e001      	b.n	8003520 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800351c:	2300      	movs	r3, #0
 800351e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d017      	beq.n	8003556 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800352e:	88fa      	ldrh	r2, [r7, #6]
 8003530:	2300      	movs	r3, #0
 8003532:	9303      	str	r3, [sp, #12]
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	9302      	str	r3, [sp, #8]
 8003538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353a:	9301      	str	r3, [sp, #4]
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f80e 	bl	8003566 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800354a:	69f8      	ldr	r0, [r7, #28]
 800354c:	f000 f88a 	bl	8003664 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003550:	2301      	movs	r3, #1
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	e002      	b.n	800355c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003556:	f04f 33ff 	mov.w	r3, #4294967295
 800355a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800355c:	69bb      	ldr	r3, [r7, #24]
	}
 800355e:	4618      	mov	r0, r3
 8003560:	3720      	adds	r7, #32
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b088      	sub	sp, #32
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	607a      	str	r2, [r7, #4]
 8003572:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800357e:	3b01      	subs	r3, #1
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	f023 0307 	bic.w	r3, r3, #7
 800358c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	2b00      	cmp	r3, #0
 8003596:	d009      	beq.n	80035ac <prvInitialiseNewTask+0x46>
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	e7fe      	b.n	80035aa <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035ac:	2300      	movs	r3, #0
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	e012      	b.n	80035d8 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	4413      	add	r3, r2
 80035b8:	7819      	ldrb	r1, [r3, #0]
 80035ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	4413      	add	r3, r2
 80035c0:	3334      	adds	r3, #52	; 0x34
 80035c2:	460a      	mov	r2, r1
 80035c4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	4413      	add	r3, r2
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d006      	beq.n	80035e0 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3301      	adds	r3, #1
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2b0f      	cmp	r3, #15
 80035dc:	d9e9      	bls.n	80035b2 <prvInitialiseNewTask+0x4c>
 80035de:	e000      	b.n	80035e2 <prvInitialiseNewTask+0x7c>
		{
			break;
 80035e0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	2b06      	cmp	r3, #6
 80035ee:	d901      	bls.n	80035f4 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035f0:	2306      	movs	r3, #6
 80035f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80035fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003602:	2200      	movs	r2, #0
 8003604:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	3304      	adds	r3, #4
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff fe79 	bl	8003302 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	3318      	adds	r3, #24
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fe74 	bl	8003302 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800361e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	f1c3 0207 	rsb	r2, r3, #7
 8003626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003628:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800362e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003632:	2200      	movs	r2, #0
 8003634:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	68f9      	ldr	r1, [r7, #12]
 8003642:	69b8      	ldr	r0, [r7, #24]
 8003644:	f000 fc08 	bl	8003e58 <pxPortInitialiseStack>
 8003648:	4602      	mov	r2, r0
 800364a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800364e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003658:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800365a:	bf00      	nop
 800365c:	3720      	adds	r7, #32
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800366c:	f000 fd1e 	bl	80040ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003670:	4b2a      	ldr	r3, [pc, #168]	; (800371c <prvAddNewTaskToReadyList+0xb8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3301      	adds	r3, #1
 8003676:	4a29      	ldr	r2, [pc, #164]	; (800371c <prvAddNewTaskToReadyList+0xb8>)
 8003678:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800367a:	4b29      	ldr	r3, [pc, #164]	; (8003720 <prvAddNewTaskToReadyList+0xbc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d109      	bne.n	8003696 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003682:	4a27      	ldr	r2, [pc, #156]	; (8003720 <prvAddNewTaskToReadyList+0xbc>)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003688:	4b24      	ldr	r3, [pc, #144]	; (800371c <prvAddNewTaskToReadyList+0xb8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d110      	bne.n	80036b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003690:	f000 fabc 	bl	8003c0c <prvInitialiseTaskLists>
 8003694:	e00d      	b.n	80036b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003696:	4b23      	ldr	r3, [pc, #140]	; (8003724 <prvAddNewTaskToReadyList+0xc0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d109      	bne.n	80036b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800369e:	4b20      	ldr	r3, [pc, #128]	; (8003720 <prvAddNewTaskToReadyList+0xbc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d802      	bhi.n	80036b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036ac:	4a1c      	ldr	r2, [pc, #112]	; (8003720 <prvAddNewTaskToReadyList+0xbc>)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036b2:	4b1d      	ldr	r3, [pc, #116]	; (8003728 <prvAddNewTaskToReadyList+0xc4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3301      	adds	r3, #1
 80036b8:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <prvAddNewTaskToReadyList+0xc4>)
 80036ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	2201      	movs	r2, #1
 80036c2:	409a      	lsls	r2, r3
 80036c4:	4b19      	ldr	r3, [pc, #100]	; (800372c <prvAddNewTaskToReadyList+0xc8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	4a18      	ldr	r2, [pc, #96]	; (800372c <prvAddNewTaskToReadyList+0xc8>)
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4a15      	ldr	r2, [pc, #84]	; (8003730 <prvAddNewTaskToReadyList+0xcc>)
 80036dc:	441a      	add	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3304      	adds	r3, #4
 80036e2:	4619      	mov	r1, r3
 80036e4:	4610      	mov	r0, r2
 80036e6:	f7ff fe19 	bl	800331c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80036ea:	f000 fd0d 	bl	8004108 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80036ee:	4b0d      	ldr	r3, [pc, #52]	; (8003724 <prvAddNewTaskToReadyList+0xc0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00e      	beq.n	8003714 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <prvAddNewTaskToReadyList+0xbc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	429a      	cmp	r2, r3
 8003702:	d207      	bcs.n	8003714 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <prvAddNewTaskToReadyList+0xd0>)
 8003706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000380 	.word	0x20000380
 8003720:	20000280 	.word	0x20000280
 8003724:	2000038c 	.word	0x2000038c
 8003728:	2000039c 	.word	0x2000039c
 800372c:	20000388 	.word	0x20000388
 8003730:	20000284 	.word	0x20000284
 8003734:	e000ed04 	.word	0xe000ed04

08003738 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d016      	beq.n	8003778 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800374a:	4b13      	ldr	r3, [pc, #76]	; (8003798 <vTaskDelay+0x60>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d009      	beq.n	8003766 <vTaskDelay+0x2e>
 8003752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	e7fe      	b.n	8003764 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003766:	f000 f879 	bl	800385c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800376a:	2100      	movs	r1, #0
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fb0d 	bl	8003d8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003772:	f000 f881 	bl	8003878 <xTaskResumeAll>
 8003776:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d107      	bne.n	800378e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800377e:	4b07      	ldr	r3, [pc, #28]	; (800379c <vTaskDelay+0x64>)
 8003780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	200003a8 	.word	0x200003a8
 800379c:	e000ed04 	.word	0xe000ed04

080037a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08a      	sub	sp, #40	; 0x28
 80037a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80037ae:	463a      	mov	r2, r7
 80037b0:	1d39      	adds	r1, r7, #4
 80037b2:	f107 0308 	add.w	r3, r7, #8
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fc fe92 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80037bc:	6839      	ldr	r1, [r7, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	9202      	str	r2, [sp, #8]
 80037c4:	9301      	str	r3, [sp, #4]
 80037c6:	2300      	movs	r3, #0
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	2300      	movs	r3, #0
 80037cc:	460a      	mov	r2, r1
 80037ce:	491d      	ldr	r1, [pc, #116]	; (8003844 <vTaskStartScheduler+0xa4>)
 80037d0:	481d      	ldr	r0, [pc, #116]	; (8003848 <vTaskStartScheduler+0xa8>)
 80037d2:	f7ff fe2a 	bl	800342a <xTaskCreateStatic>
 80037d6:	4602      	mov	r2, r0
 80037d8:	4b1c      	ldr	r3, [pc, #112]	; (800384c <vTaskStartScheduler+0xac>)
 80037da:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <vTaskStartScheduler+0xac>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80037e4:	2301      	movs	r3, #1
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	e001      	b.n	80037ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d115      	bne.n	8003820 <vTaskStartScheduler+0x80>
 80037f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <vTaskStartScheduler+0xb0>)
 8003808:	f04f 32ff 	mov.w	r2, #4294967295
 800380c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800380e:	4b11      	ldr	r3, [pc, #68]	; (8003854 <vTaskStartScheduler+0xb4>)
 8003810:	2201      	movs	r2, #1
 8003812:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003814:	4b10      	ldr	r3, [pc, #64]	; (8003858 <vTaskStartScheduler+0xb8>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800381a:	f000 fba9 	bl	8003f70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800381e:	e00d      	b.n	800383c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003826:	d109      	bne.n	800383c <vTaskStartScheduler+0x9c>
 8003828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	e7fe      	b.n	800383a <vTaskStartScheduler+0x9a>
}
 800383c:	bf00      	nop
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	080046d8 	.word	0x080046d8
 8003848:	08003bdd 	.word	0x08003bdd
 800384c:	200003a4 	.word	0x200003a4
 8003850:	200003a0 	.word	0x200003a0
 8003854:	2000038c 	.word	0x2000038c
 8003858:	20000384 	.word	0x20000384

0800385c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003860:	4b04      	ldr	r3, [pc, #16]	; (8003874 <vTaskSuspendAll+0x18>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3301      	adds	r3, #1
 8003866:	4a03      	ldr	r2, [pc, #12]	; (8003874 <vTaskSuspendAll+0x18>)
 8003868:	6013      	str	r3, [r2, #0]
}
 800386a:	bf00      	nop
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	200003a8 	.word	0x200003a8

08003878 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003886:	4b41      	ldr	r3, [pc, #260]	; (800398c <xTaskResumeAll+0x114>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <xTaskResumeAll+0x2a>
 800388e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	e7fe      	b.n	80038a0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038a2:	f000 fc03 	bl	80040ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038a6:	4b39      	ldr	r3, [pc, #228]	; (800398c <xTaskResumeAll+0x114>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	4a37      	ldr	r2, [pc, #220]	; (800398c <xTaskResumeAll+0x114>)
 80038ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038b0:	4b36      	ldr	r3, [pc, #216]	; (800398c <xTaskResumeAll+0x114>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d161      	bne.n	800397c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038b8:	4b35      	ldr	r3, [pc, #212]	; (8003990 <xTaskResumeAll+0x118>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d05d      	beq.n	800397c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038c0:	e02e      	b.n	8003920 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80038c2:	4b34      	ldr	r3, [pc, #208]	; (8003994 <xTaskResumeAll+0x11c>)
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3318      	adds	r3, #24
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff fd81 	bl	80033d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff fd7c 	bl	80033d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	2201      	movs	r2, #1
 80038e4:	409a      	lsls	r2, r3
 80038e6:	4b2c      	ldr	r3, [pc, #176]	; (8003998 <xTaskResumeAll+0x120>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	4a2a      	ldr	r2, [pc, #168]	; (8003998 <xTaskResumeAll+0x120>)
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4a27      	ldr	r2, [pc, #156]	; (800399c <xTaskResumeAll+0x124>)
 80038fe:	441a      	add	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	3304      	adds	r3, #4
 8003904:	4619      	mov	r1, r3
 8003906:	4610      	mov	r0, r2
 8003908:	f7ff fd08 	bl	800331c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003910:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <xTaskResumeAll+0x128>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	429a      	cmp	r2, r3
 8003918:	d302      	bcc.n	8003920 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800391a:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <xTaskResumeAll+0x12c>)
 800391c:	2201      	movs	r2, #1
 800391e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003920:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <xTaskResumeAll+0x11c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1cc      	bne.n	80038c2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800392e:	f000 fa07 	bl	8003d40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003932:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <xTaskResumeAll+0x130>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d010      	beq.n	8003960 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800393e:	f000 f837 	bl	80039b0 <xTaskIncrementTick>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003948:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <xTaskResumeAll+0x12c>)
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3b01      	subs	r3, #1
 8003952:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f1      	bne.n	800393e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800395a:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <xTaskResumeAll+0x130>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003960:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <xTaskResumeAll+0x12c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d009      	beq.n	800397c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003968:	2301      	movs	r3, #1
 800396a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800396c:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <xTaskResumeAll+0x134>)
 800396e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800397c:	f000 fbc4 	bl	8004108 <vPortExitCritical>

	return xAlreadyYielded;
 8003980:	68bb      	ldr	r3, [r7, #8]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	200003a8 	.word	0x200003a8
 8003990:	20000380 	.word	0x20000380
 8003994:	20000340 	.word	0x20000340
 8003998:	20000388 	.word	0x20000388
 800399c:	20000284 	.word	0x20000284
 80039a0:	20000280 	.word	0x20000280
 80039a4:	20000394 	.word	0x20000394
 80039a8:	20000390 	.word	0x20000390
 80039ac:	e000ed04 	.word	0xe000ed04

080039b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039ba:	4b50      	ldr	r3, [pc, #320]	; (8003afc <xTaskIncrementTick+0x14c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f040 808c 	bne.w	8003adc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039c4:	4b4e      	ldr	r3, [pc, #312]	; (8003b00 <xTaskIncrementTick+0x150>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3301      	adds	r3, #1
 80039ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80039cc:	4a4c      	ldr	r2, [pc, #304]	; (8003b00 <xTaskIncrementTick+0x150>)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d11f      	bne.n	8003a18 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80039d8:	4b4a      	ldr	r3, [pc, #296]	; (8003b04 <xTaskIncrementTick+0x154>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <xTaskIncrementTick+0x46>
 80039e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	e7fe      	b.n	80039f4 <xTaskIncrementTick+0x44>
 80039f6:	4b43      	ldr	r3, [pc, #268]	; (8003b04 <xTaskIncrementTick+0x154>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	4b42      	ldr	r3, [pc, #264]	; (8003b08 <xTaskIncrementTick+0x158>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a40      	ldr	r2, [pc, #256]	; (8003b04 <xTaskIncrementTick+0x154>)
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	4a40      	ldr	r2, [pc, #256]	; (8003b08 <xTaskIncrementTick+0x158>)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	4b40      	ldr	r3, [pc, #256]	; (8003b0c <xTaskIncrementTick+0x15c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	4a3e      	ldr	r2, [pc, #248]	; (8003b0c <xTaskIncrementTick+0x15c>)
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	f000 f994 	bl	8003d40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a18:	4b3d      	ldr	r3, [pc, #244]	; (8003b10 <xTaskIncrementTick+0x160>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d34d      	bcc.n	8003abe <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a22:	4b38      	ldr	r3, [pc, #224]	; (8003b04 <xTaskIncrementTick+0x154>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <xTaskIncrementTick+0x80>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <xTaskIncrementTick+0x82>
 8003a30:	2300      	movs	r3, #0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d004      	beq.n	8003a40 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a36:	4b36      	ldr	r3, [pc, #216]	; (8003b10 <xTaskIncrementTick+0x160>)
 8003a38:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3c:	601a      	str	r2, [r3, #0]
					break;
 8003a3e:	e03e      	b.n	8003abe <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a40:	4b30      	ldr	r3, [pc, #192]	; (8003b04 <xTaskIncrementTick+0x154>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d203      	bcs.n	8003a60 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a58:	4a2d      	ldr	r2, [pc, #180]	; (8003b10 <xTaskIncrementTick+0x160>)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6013      	str	r3, [r2, #0]
						break;
 8003a5e:	e02e      	b.n	8003abe <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	3304      	adds	r3, #4
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff fcb6 	bl	80033d6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d004      	beq.n	8003a7c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	3318      	adds	r3, #24
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fcad 	bl	80033d6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	2201      	movs	r2, #1
 8003a82:	409a      	lsls	r2, r3
 8003a84:	4b23      	ldr	r3, [pc, #140]	; (8003b14 <xTaskIncrementTick+0x164>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	4a22      	ldr	r2, [pc, #136]	; (8003b14 <xTaskIncrementTick+0x164>)
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4a1f      	ldr	r2, [pc, #124]	; (8003b18 <xTaskIncrementTick+0x168>)
 8003a9c:	441a      	add	r2, r3
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	f7ff fc39 	bl	800331c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aae:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <xTaskIncrementTick+0x16c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d3b4      	bcc.n	8003a22 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003abc:	e7b1      	b.n	8003a22 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003abe:	4b17      	ldr	r3, [pc, #92]	; (8003b1c <xTaskIncrementTick+0x16c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac4:	4914      	ldr	r1, [pc, #80]	; (8003b18 <xTaskIncrementTick+0x168>)
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d907      	bls.n	8003ae6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	e004      	b.n	8003ae6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003adc:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <xTaskIncrementTick+0x170>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	4a0f      	ldr	r2, [pc, #60]	; (8003b20 <xTaskIncrementTick+0x170>)
 8003ae4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ae6:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <xTaskIncrementTick+0x174>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003aee:	2301      	movs	r3, #1
 8003af0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003af2:	697b      	ldr	r3, [r7, #20]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	200003a8 	.word	0x200003a8
 8003b00:	20000384 	.word	0x20000384
 8003b04:	20000338 	.word	0x20000338
 8003b08:	2000033c 	.word	0x2000033c
 8003b0c:	20000398 	.word	0x20000398
 8003b10:	200003a0 	.word	0x200003a0
 8003b14:	20000388 	.word	0x20000388
 8003b18:	20000284 	.word	0x20000284
 8003b1c:	20000280 	.word	0x20000280
 8003b20:	20000390 	.word	0x20000390
 8003b24:	20000394 	.word	0x20000394

08003b28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b2e:	4b26      	ldr	r3, [pc, #152]	; (8003bc8 <vTaskSwitchContext+0xa0>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b36:	4b25      	ldr	r3, [pc, #148]	; (8003bcc <vTaskSwitchContext+0xa4>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b3c:	e03e      	b.n	8003bbc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003b3e:	4b23      	ldr	r3, [pc, #140]	; (8003bcc <vTaskSwitchContext+0xa4>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003b44:	4b22      	ldr	r3, [pc, #136]	; (8003bd0 <vTaskSwitchContext+0xa8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	fab3 f383 	clz	r3, r3
 8003b50:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003b52:	7afb      	ldrb	r3, [r7, #11]
 8003b54:	f1c3 031f 	rsb	r3, r3, #31
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	491e      	ldr	r1, [pc, #120]	; (8003bd4 <vTaskSwitchContext+0xac>)
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d109      	bne.n	8003b82 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	607b      	str	r3, [r7, #4]
 8003b80:	e7fe      	b.n	8003b80 <vTaskSwitchContext+0x58>
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4a11      	ldr	r2, [pc, #68]	; (8003bd4 <vTaskSwitchContext+0xac>)
 8003b8e:	4413      	add	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	605a      	str	r2, [r3, #4]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d104      	bne.n	8003bb2 <vTaskSwitchContext+0x8a>
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4a07      	ldr	r2, [pc, #28]	; (8003bd8 <vTaskSwitchContext+0xb0>)
 8003bba:	6013      	str	r3, [r2, #0]
}
 8003bbc:	bf00      	nop
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	200003a8 	.word	0x200003a8
 8003bcc:	20000394 	.word	0x20000394
 8003bd0:	20000388 	.word	0x20000388
 8003bd4:	20000284 	.word	0x20000284
 8003bd8:	20000280 	.word	0x20000280

08003bdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003be4:	f000 f852 	bl	8003c8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <prvIdleTask+0x28>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d9f9      	bls.n	8003be4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003bf0:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <prvIdleTask+0x2c>)
 8003bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c00:	e7f0      	b.n	8003be4 <prvIdleTask+0x8>
 8003c02:	bf00      	nop
 8003c04:	20000284 	.word	0x20000284
 8003c08:	e000ed04 	.word	0xe000ed04

08003c0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c12:	2300      	movs	r3, #0
 8003c14:	607b      	str	r3, [r7, #4]
 8003c16:	e00c      	b.n	8003c32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4a12      	ldr	r2, [pc, #72]	; (8003c6c <prvInitialiseTaskLists+0x60>)
 8003c24:	4413      	add	r3, r2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff fb4b 	bl	80032c2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	607b      	str	r3, [r7, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b06      	cmp	r3, #6
 8003c36:	d9ef      	bls.n	8003c18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c38:	480d      	ldr	r0, [pc, #52]	; (8003c70 <prvInitialiseTaskLists+0x64>)
 8003c3a:	f7ff fb42 	bl	80032c2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c3e:	480d      	ldr	r0, [pc, #52]	; (8003c74 <prvInitialiseTaskLists+0x68>)
 8003c40:	f7ff fb3f 	bl	80032c2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c44:	480c      	ldr	r0, [pc, #48]	; (8003c78 <prvInitialiseTaskLists+0x6c>)
 8003c46:	f7ff fb3c 	bl	80032c2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c4a:	480c      	ldr	r0, [pc, #48]	; (8003c7c <prvInitialiseTaskLists+0x70>)
 8003c4c:	f7ff fb39 	bl	80032c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c50:	480b      	ldr	r0, [pc, #44]	; (8003c80 <prvInitialiseTaskLists+0x74>)
 8003c52:	f7ff fb36 	bl	80032c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <prvInitialiseTaskLists+0x78>)
 8003c58:	4a05      	ldr	r2, [pc, #20]	; (8003c70 <prvInitialiseTaskLists+0x64>)
 8003c5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <prvInitialiseTaskLists+0x7c>)
 8003c5e:	4a05      	ldr	r2, [pc, #20]	; (8003c74 <prvInitialiseTaskLists+0x68>)
 8003c60:	601a      	str	r2, [r3, #0]
}
 8003c62:	bf00      	nop
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000284 	.word	0x20000284
 8003c70:	20000310 	.word	0x20000310
 8003c74:	20000324 	.word	0x20000324
 8003c78:	20000340 	.word	0x20000340
 8003c7c:	20000354 	.word	0x20000354
 8003c80:	2000036c 	.word	0x2000036c
 8003c84:	20000338 	.word	0x20000338
 8003c88:	2000033c 	.word	0x2000033c

08003c8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c92:	e019      	b.n	8003cc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c94:	f000 fa0a 	bl	80040ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c98:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <prvCheckTasksWaitingTermination+0x4c>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff fb96 	bl	80033d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003caa:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <prvCheckTasksWaitingTermination+0x50>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	4a0a      	ldr	r2, [pc, #40]	; (8003cdc <prvCheckTasksWaitingTermination+0x50>)
 8003cb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <prvCheckTasksWaitingTermination+0x54>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	4a09      	ldr	r2, [pc, #36]	; (8003ce0 <prvCheckTasksWaitingTermination+0x54>)
 8003cbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003cbe:	f000 fa23 	bl	8004108 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f80e 	bl	8003ce4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cc8:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <prvCheckTasksWaitingTermination+0x54>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e1      	bne.n	8003c94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003cd0:	bf00      	nop
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000354 	.word	0x20000354
 8003cdc:	20000380 	.word	0x20000380
 8003ce0:	20000368 	.word	0x20000368

08003ce4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d108      	bne.n	8003d08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fb74 	bl	80043e8 <vPortFree>
				vPortFree( pxTCB );
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 fb71 	bl	80043e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d06:	e017      	b.n	8003d38 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d103      	bne.n	8003d1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fb68 	bl	80043e8 <vPortFree>
	}
 8003d18:	e00e      	b.n	8003d38 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d009      	beq.n	8003d38 <prvDeleteTCB+0x54>
 8003d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	e7fe      	b.n	8003d36 <prvDeleteTCB+0x52>
	}
 8003d38:	bf00      	nop
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d46:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <prvResetNextTaskUnblockTime+0x44>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <prvResetNextTaskUnblockTime+0x14>
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <prvResetNextTaskUnblockTime+0x16>
 8003d54:	2300      	movs	r3, #0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d004      	beq.n	8003d64 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <prvResetNextTaskUnblockTime+0x48>)
 8003d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d60:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d62:	e008      	b.n	8003d76 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d64:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <prvResetNextTaskUnblockTime+0x44>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4a05      	ldr	r2, [pc, #20]	; (8003d88 <prvResetNextTaskUnblockTime+0x48>)
 8003d74:	6013      	str	r3, [r2, #0]
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	20000338 	.word	0x20000338
 8003d88:	200003a0 	.word	0x200003a0

08003d8c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d96:	4b29      	ldr	r3, [pc, #164]	; (8003e3c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d9c:	4b28      	ldr	r3, [pc, #160]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3304      	adds	r3, #4
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff fb17 	bl	80033d6 <uxListRemove>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10b      	bne.n	8003dc6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003dae:	4b24      	ldr	r3, [pc, #144]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	2201      	movs	r2, #1
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43da      	mvns	r2, r3
 8003dbc:	4b21      	ldr	r3, [pc, #132]	; (8003e44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	4a20      	ldr	r2, [pc, #128]	; (8003e44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003dc4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dcc:	d10a      	bne.n	8003de4 <prvAddCurrentTaskToDelayedList+0x58>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d007      	beq.n	8003de4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	4619      	mov	r1, r3
 8003ddc:	481a      	ldr	r0, [pc, #104]	; (8003e48 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003dde:	f7ff fa9d 	bl	800331c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003de2:	e026      	b.n	8003e32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4413      	add	r3, r2
 8003dea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003dec:	4b14      	ldr	r3, [pc, #80]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d209      	bcs.n	8003e10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dfc:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3304      	adds	r3, #4
 8003e06:	4619      	mov	r1, r3
 8003e08:	4610      	mov	r0, r2
 8003e0a:	f7ff faab 	bl	8003364 <vListInsert>
}
 8003e0e:	e010      	b.n	8003e32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	f7ff faa1 	bl	8003364 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e22:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d202      	bcs.n	8003e32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003e2c:	4a09      	ldr	r2, [pc, #36]	; (8003e54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	6013      	str	r3, [r2, #0]
}
 8003e32:	bf00      	nop
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000384 	.word	0x20000384
 8003e40:	20000280 	.word	0x20000280
 8003e44:	20000388 	.word	0x20000388
 8003e48:	2000036c 	.word	0x2000036c
 8003e4c:	2000033c 	.word	0x2000033c
 8003e50:	20000338 	.word	0x20000338
 8003e54:	200003a0 	.word	0x200003a0

08003e58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	3b04      	subs	r3, #4
 8003e68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3b04      	subs	r3, #4
 8003e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f023 0201 	bic.w	r2, r3, #1
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	3b04      	subs	r3, #4
 8003e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e88:	4a0c      	ldr	r2, [pc, #48]	; (8003ebc <pxPortInitialiseStack+0x64>)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3b14      	subs	r3, #20
 8003e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3b04      	subs	r3, #4
 8003e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f06f 0202 	mvn.w	r2, #2
 8003ea6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	3b20      	subs	r3, #32
 8003eac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003eae:	68fb      	ldr	r3, [r7, #12]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	08003ec1 	.word	0x08003ec1

08003ec0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003eca:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <prvTaskExitError+0x50>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed2:	d009      	beq.n	8003ee8 <prvTaskExitError+0x28>
 8003ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	e7fe      	b.n	8003ee6 <prvTaskExitError+0x26>
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003efa:	bf00      	nop
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0fc      	beq.n	8003efc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f02:	bf00      	nop
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	2000000c 	.word	0x2000000c
	...

08003f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f20:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <pxCurrentTCBConst2>)
 8003f22:	6819      	ldr	r1, [r3, #0]
 8003f24:	6808      	ldr	r0, [r1, #0]
 8003f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f2a:	f380 8809 	msr	PSP, r0
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f04f 0000 	mov.w	r0, #0
 8003f36:	f380 8811 	msr	BASEPRI, r0
 8003f3a:	4770      	bx	lr
 8003f3c:	f3af 8000 	nop.w

08003f40 <pxCurrentTCBConst2>:
 8003f40:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop

08003f48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003f48:	4808      	ldr	r0, [pc, #32]	; (8003f6c <prvPortStartFirstTask+0x24>)
 8003f4a:	6800      	ldr	r0, [r0, #0]
 8003f4c:	6800      	ldr	r0, [r0, #0]
 8003f4e:	f380 8808 	msr	MSP, r0
 8003f52:	f04f 0000 	mov.w	r0, #0
 8003f56:	f380 8814 	msr	CONTROL, r0
 8003f5a:	b662      	cpsie	i
 8003f5c:	b661      	cpsie	f
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	df00      	svc	0
 8003f68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f6a:	bf00      	nop
 8003f6c:	e000ed08 	.word	0xe000ed08

08003f70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f76:	4b44      	ldr	r3, [pc, #272]	; (8004088 <xPortStartScheduler+0x118>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a44      	ldr	r2, [pc, #272]	; (800408c <xPortStartScheduler+0x11c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d109      	bne.n	8003f94 <xPortStartScheduler+0x24>
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	e7fe      	b.n	8003f92 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f94:	4b3c      	ldr	r3, [pc, #240]	; (8004088 <xPortStartScheduler+0x118>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a3d      	ldr	r2, [pc, #244]	; (8004090 <xPortStartScheduler+0x120>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d109      	bne.n	8003fb2 <xPortStartScheduler+0x42>
 8003f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	e7fe      	b.n	8003fb0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fb2:	4b38      	ldr	r3, [pc, #224]	; (8004094 <xPortStartScheduler+0x124>)
 8003fb4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	22ff      	movs	r2, #255	; 0xff
 8003fc2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	4b30      	ldr	r3, [pc, #192]	; (8004098 <xPortStartScheduler+0x128>)
 8003fd8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003fda:	4b30      	ldr	r3, [pc, #192]	; (800409c <xPortStartScheduler+0x12c>)
 8003fdc:	2207      	movs	r2, #7
 8003fde:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fe0:	e009      	b.n	8003ff6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003fe2:	4b2e      	ldr	r3, [pc, #184]	; (800409c <xPortStartScheduler+0x12c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	4a2c      	ldr	r2, [pc, #176]	; (800409c <xPortStartScheduler+0x12c>)
 8003fea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffe:	2b80      	cmp	r3, #128	; 0x80
 8004000:	d0ef      	beq.n	8003fe2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004002:	4b26      	ldr	r3, [pc, #152]	; (800409c <xPortStartScheduler+0x12c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f1c3 0307 	rsb	r3, r3, #7
 800400a:	2b04      	cmp	r3, #4
 800400c:	d009      	beq.n	8004022 <xPortStartScheduler+0xb2>
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	e7fe      	b.n	8004020 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004022:	4b1e      	ldr	r3, [pc, #120]	; (800409c <xPortStartScheduler+0x12c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	4a1c      	ldr	r2, [pc, #112]	; (800409c <xPortStartScheduler+0x12c>)
 800402a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800402c:	4b1b      	ldr	r3, [pc, #108]	; (800409c <xPortStartScheduler+0x12c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004034:	4a19      	ldr	r2, [pc, #100]	; (800409c <xPortStartScheduler+0x12c>)
 8004036:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	b2da      	uxtb	r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004040:	4b17      	ldr	r3, [pc, #92]	; (80040a0 <xPortStartScheduler+0x130>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a16      	ldr	r2, [pc, #88]	; (80040a0 <xPortStartScheduler+0x130>)
 8004046:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800404a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800404c:	4b14      	ldr	r3, [pc, #80]	; (80040a0 <xPortStartScheduler+0x130>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a13      	ldr	r2, [pc, #76]	; (80040a0 <xPortStartScheduler+0x130>)
 8004052:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004056:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004058:	f000 f8d6 	bl	8004208 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800405c:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <xPortStartScheduler+0x134>)
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004062:	f000 f8f5 	bl	8004250 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004066:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <xPortStartScheduler+0x138>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a0f      	ldr	r2, [pc, #60]	; (80040a8 <xPortStartScheduler+0x138>)
 800406c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004070:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004072:	f7ff ff69 	bl	8003f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004076:	f7ff fd57 	bl	8003b28 <vTaskSwitchContext>
	prvTaskExitError();
 800407a:	f7ff ff21 	bl	8003ec0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	e000ed00 	.word	0xe000ed00
 800408c:	410fc271 	.word	0x410fc271
 8004090:	410fc270 	.word	0x410fc270
 8004094:	e000e400 	.word	0xe000e400
 8004098:	200003ac 	.word	0x200003ac
 800409c:	200003b0 	.word	0x200003b0
 80040a0:	e000ed20 	.word	0xe000ed20
 80040a4:	2000000c 	.word	0x2000000c
 80040a8:	e000ef34 	.word	0xe000ef34

080040ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80040c4:	4b0e      	ldr	r3, [pc, #56]	; (8004100 <vPortEnterCritical+0x54>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3301      	adds	r3, #1
 80040ca:	4a0d      	ldr	r2, [pc, #52]	; (8004100 <vPortEnterCritical+0x54>)
 80040cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80040ce:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <vPortEnterCritical+0x54>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d10e      	bne.n	80040f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80040d6:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <vPortEnterCritical+0x58>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d009      	beq.n	80040f4 <vPortEnterCritical+0x48>
 80040e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	e7fe      	b.n	80040f2 <vPortEnterCritical+0x46>
	}
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	2000000c 	.word	0x2000000c
 8004104:	e000ed04 	.word	0xe000ed04

08004108 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800410e:	4b11      	ldr	r3, [pc, #68]	; (8004154 <vPortExitCritical+0x4c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <vPortExitCritical+0x22>
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	607b      	str	r3, [r7, #4]
 8004128:	e7fe      	b.n	8004128 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800412a:	4b0a      	ldr	r3, [pc, #40]	; (8004154 <vPortExitCritical+0x4c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3b01      	subs	r3, #1
 8004130:	4a08      	ldr	r2, [pc, #32]	; (8004154 <vPortExitCritical+0x4c>)
 8004132:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004134:	4b07      	ldr	r3, [pc, #28]	; (8004154 <vPortExitCritical+0x4c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d104      	bne.n	8004146 <vPortExitCritical+0x3e>
 800413c:	2300      	movs	r3, #0
 800413e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	2000000c 	.word	0x2000000c
	...

08004160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004160:	f3ef 8009 	mrs	r0, PSP
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <pxCurrentTCBConst>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	f01e 0f10 	tst.w	lr, #16
 8004170:	bf08      	it	eq
 8004172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417a:	6010      	str	r0, [r2, #0]
 800417c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004184:	f380 8811 	msr	BASEPRI, r0
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f7ff fcca 	bl	8003b28 <vTaskSwitchContext>
 8004194:	f04f 0000 	mov.w	r0, #0
 8004198:	f380 8811 	msr	BASEPRI, r0
 800419c:	bc09      	pop	{r0, r3}
 800419e:	6819      	ldr	r1, [r3, #0]
 80041a0:	6808      	ldr	r0, [r1, #0]
 80041a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a6:	f01e 0f10 	tst.w	lr, #16
 80041aa:	bf08      	it	eq
 80041ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041b0:	f380 8809 	msr	PSP, r0
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	f3af 8000 	nop.w

080041c0 <pxCurrentTCBConst>:
 80041c0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop

080041c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
	__asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80041e0:	f7ff fbe6 	bl	80039b0 <xTaskIncrementTick>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041ea:	4b06      	ldr	r3, [pc, #24]	; (8004204 <SysTick_Handler+0x3c>)
 80041ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	2300      	movs	r3, #0
 80041f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80041fc:	bf00      	nop
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	e000ed04 	.word	0xe000ed04

08004208 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <vPortSetupTimerInterrupt+0x34>)
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004212:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <vPortSetupTimerInterrupt+0x38>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004218:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <vPortSetupTimerInterrupt+0x3c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <vPortSetupTimerInterrupt+0x40>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	099b      	lsrs	r3, r3, #6
 8004224:	4a09      	ldr	r2, [pc, #36]	; (800424c <vPortSetupTimerInterrupt+0x44>)
 8004226:	3b01      	subs	r3, #1
 8004228:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800422a:	4b04      	ldr	r3, [pc, #16]	; (800423c <vPortSetupTimerInterrupt+0x34>)
 800422c:	2207      	movs	r2, #7
 800422e:	601a      	str	r2, [r3, #0]
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	e000e010 	.word	0xe000e010
 8004240:	e000e018 	.word	0xe000e018
 8004244:	20000000 	.word	0x20000000
 8004248:	10624dd3 	.word	0x10624dd3
 800424c:	e000e014 	.word	0xe000e014

08004250 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004250:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004260 <vPortEnableVFP+0x10>
 8004254:	6801      	ldr	r1, [r0, #0]
 8004256:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800425a:	6001      	str	r1, [r0, #0]
 800425c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800425e:	bf00      	nop
 8004260:	e000ed88 	.word	0xe000ed88

08004264 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	; 0x28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800426c:	2300      	movs	r3, #0
 800426e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004270:	f7ff faf4 	bl	800385c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004274:	4b57      	ldr	r3, [pc, #348]	; (80043d4 <pvPortMalloc+0x170>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800427c:	f000 f90c 	bl	8004498 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004280:	4b55      	ldr	r3, [pc, #340]	; (80043d8 <pvPortMalloc+0x174>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4013      	ands	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	f040 808c 	bne.w	80043a6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01c      	beq.n	80042ce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004294:	2208      	movs	r2, #8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4413      	add	r3, r2
 800429a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d013      	beq.n	80042ce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f023 0307 	bic.w	r3, r3, #7
 80042ac:	3308      	adds	r3, #8
 80042ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d009      	beq.n	80042ce <pvPortMalloc+0x6a>
	__asm volatile
 80042ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	e7fe      	b.n	80042cc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d068      	beq.n	80043a6 <pvPortMalloc+0x142>
 80042d4:	4b41      	ldr	r3, [pc, #260]	; (80043dc <pvPortMalloc+0x178>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d863      	bhi.n	80043a6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80042de:	4b40      	ldr	r3, [pc, #256]	; (80043e0 <pvPortMalloc+0x17c>)
 80042e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80042e2:	4b3f      	ldr	r3, [pc, #252]	; (80043e0 <pvPortMalloc+0x17c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042e8:	e004      	b.n	80042f4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d903      	bls.n	8004306 <pvPortMalloc+0xa2>
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f1      	bne.n	80042ea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004306:	4b33      	ldr	r3, [pc, #204]	; (80043d4 <pvPortMalloc+0x170>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430c:	429a      	cmp	r2, r3
 800430e:	d04a      	beq.n	80043a6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2208      	movs	r2, #8
 8004316:	4413      	add	r3, r2
 8004318:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	1ad2      	subs	r2, r2, r3
 800432a:	2308      	movs	r3, #8
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	429a      	cmp	r2, r3
 8004330:	d91e      	bls.n	8004370 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4413      	add	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	2b00      	cmp	r3, #0
 8004342:	d009      	beq.n	8004358 <pvPortMalloc+0xf4>
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	e7fe      	b.n	8004356 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	1ad2      	subs	r2, r2, r3
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800436a:	69b8      	ldr	r0, [r7, #24]
 800436c:	f000 f8f6 	bl	800455c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004370:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <pvPortMalloc+0x178>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	4a18      	ldr	r2, [pc, #96]	; (80043dc <pvPortMalloc+0x178>)
 800437c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800437e:	4b17      	ldr	r3, [pc, #92]	; (80043dc <pvPortMalloc+0x178>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b18      	ldr	r3, [pc, #96]	; (80043e4 <pvPortMalloc+0x180>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d203      	bcs.n	8004392 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800438a:	4b14      	ldr	r3, [pc, #80]	; (80043dc <pvPortMalloc+0x178>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <pvPortMalloc+0x180>)
 8004390:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <pvPortMalloc+0x174>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	431a      	orrs	r2, r3
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80043a6:	f7ff fa67 	bl	8003878 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d009      	beq.n	80043c8 <pvPortMalloc+0x164>
 80043b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	e7fe      	b.n	80043c6 <pvPortMalloc+0x162>
	return pvReturn;
 80043c8:	69fb      	ldr	r3, [r7, #28]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3728      	adds	r7, #40	; 0x28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20003fbc 	.word	0x20003fbc
 80043d8:	20003fc8 	.word	0x20003fc8
 80043dc:	20003fc0 	.word	0x20003fc0
 80043e0:	20003fb4 	.word	0x20003fb4
 80043e4:	20003fc4 	.word	0x20003fc4

080043e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d046      	beq.n	8004488 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80043fa:	2308      	movs	r3, #8
 80043fc:	425b      	negs	r3, r3
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4413      	add	r3, r2
 8004402:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	4b20      	ldr	r3, [pc, #128]	; (8004490 <vPortFree+0xa8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4013      	ands	r3, r2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <vPortFree+0x42>
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	e7fe      	b.n	8004428 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <vPortFree+0x5e>
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	60bb      	str	r3, [r7, #8]
 8004444:	e7fe      	b.n	8004444 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	4b11      	ldr	r3, [pc, #68]	; (8004490 <vPortFree+0xa8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4013      	ands	r3, r2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d019      	beq.n	8004488 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d115      	bne.n	8004488 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <vPortFree+0xa8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	43db      	mvns	r3, r3
 8004466:	401a      	ands	r2, r3
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800446c:	f7ff f9f6 	bl	800385c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	4b07      	ldr	r3, [pc, #28]	; (8004494 <vPortFree+0xac>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4413      	add	r3, r2
 800447a:	4a06      	ldr	r2, [pc, #24]	; (8004494 <vPortFree+0xac>)
 800447c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800447e:	6938      	ldr	r0, [r7, #16]
 8004480:	f000 f86c 	bl	800455c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004484:	f7ff f9f8 	bl	8003878 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004488:	bf00      	nop
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20003fc8 	.word	0x20003fc8
 8004494:	20003fc0 	.word	0x20003fc0

08004498 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800449e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80044a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80044a4:	4b27      	ldr	r3, [pc, #156]	; (8004544 <prvHeapInit+0xac>)
 80044a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00c      	beq.n	80044cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3307      	adds	r3, #7
 80044b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0307 	bic.w	r3, r3, #7
 80044be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	4a1f      	ldr	r2, [pc, #124]	; (8004544 <prvHeapInit+0xac>)
 80044c8:	4413      	add	r3, r2
 80044ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044d0:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <prvHeapInit+0xb0>)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80044d6:	4b1c      	ldr	r3, [pc, #112]	; (8004548 <prvHeapInit+0xb0>)
 80044d8:	2200      	movs	r2, #0
 80044da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	4413      	add	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80044e4:	2208      	movs	r2, #8
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0307 	bic.w	r3, r3, #7
 80044f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4a15      	ldr	r2, [pc, #84]	; (800454c <prvHeapInit+0xb4>)
 80044f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80044fa:	4b14      	ldr	r3, [pc, #80]	; (800454c <prvHeapInit+0xb4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2200      	movs	r2, #0
 8004500:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004502:	4b12      	ldr	r3, [pc, #72]	; (800454c <prvHeapInit+0xb4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	1ad2      	subs	r2, r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004518:	4b0c      	ldr	r3, [pc, #48]	; (800454c <prvHeapInit+0xb4>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	4a0a      	ldr	r2, [pc, #40]	; (8004550 <prvHeapInit+0xb8>)
 8004526:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	4a09      	ldr	r2, [pc, #36]	; (8004554 <prvHeapInit+0xbc>)
 800452e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004530:	4b09      	ldr	r3, [pc, #36]	; (8004558 <prvHeapInit+0xc0>)
 8004532:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004536:	601a      	str	r2, [r3, #0]
}
 8004538:	bf00      	nop
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	200003b4 	.word	0x200003b4
 8004548:	20003fb4 	.word	0x20003fb4
 800454c:	20003fbc 	.word	0x20003fbc
 8004550:	20003fc4 	.word	0x20003fc4
 8004554:	20003fc0 	.word	0x20003fc0
 8004558:	20003fc8 	.word	0x20003fc8

0800455c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004564:	4b28      	ldr	r3, [pc, #160]	; (8004608 <prvInsertBlockIntoFreeList+0xac>)
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	e002      	b.n	8004570 <prvInsertBlockIntoFreeList+0x14>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	429a      	cmp	r2, r3
 8004578:	d8f7      	bhi.n	800456a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	4413      	add	r3, r2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	429a      	cmp	r2, r3
 800458a:	d108      	bne.n	800459e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	441a      	add	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	441a      	add	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d118      	bne.n	80045e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	4b15      	ldr	r3, [pc, #84]	; (800460c <prvInsertBlockIntoFreeList+0xb0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d00d      	beq.n	80045da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	441a      	add	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	e008      	b.n	80045ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80045da:	4b0c      	ldr	r3, [pc, #48]	; (800460c <prvInsertBlockIntoFreeList+0xb0>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	e003      	b.n	80045ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d002      	beq.n	80045fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045fa:	bf00      	nop
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	20003fb4 	.word	0x20003fb4
 800460c:	20003fbc 	.word	0x20003fbc

08004610 <__libc_init_array>:
 8004610:	b570      	push	{r4, r5, r6, lr}
 8004612:	4e0d      	ldr	r6, [pc, #52]	; (8004648 <__libc_init_array+0x38>)
 8004614:	4c0d      	ldr	r4, [pc, #52]	; (800464c <__libc_init_array+0x3c>)
 8004616:	1ba4      	subs	r4, r4, r6
 8004618:	10a4      	asrs	r4, r4, #2
 800461a:	2500      	movs	r5, #0
 800461c:	42a5      	cmp	r5, r4
 800461e:	d109      	bne.n	8004634 <__libc_init_array+0x24>
 8004620:	4e0b      	ldr	r6, [pc, #44]	; (8004650 <__libc_init_array+0x40>)
 8004622:	4c0c      	ldr	r4, [pc, #48]	; (8004654 <__libc_init_array+0x44>)
 8004624:	f000 f820 	bl	8004668 <_init>
 8004628:	1ba4      	subs	r4, r4, r6
 800462a:	10a4      	asrs	r4, r4, #2
 800462c:	2500      	movs	r5, #0
 800462e:	42a5      	cmp	r5, r4
 8004630:	d105      	bne.n	800463e <__libc_init_array+0x2e>
 8004632:	bd70      	pop	{r4, r5, r6, pc}
 8004634:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004638:	4798      	blx	r3
 800463a:	3501      	adds	r5, #1
 800463c:	e7ee      	b.n	800461c <__libc_init_array+0xc>
 800463e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004642:	4798      	blx	r3
 8004644:	3501      	adds	r5, #1
 8004646:	e7f2      	b.n	800462e <__libc_init_array+0x1e>
 8004648:	08004700 	.word	0x08004700
 800464c:	08004700 	.word	0x08004700
 8004650:	08004700 	.word	0x08004700
 8004654:	08004704 	.word	0x08004704

08004658 <memset>:
 8004658:	4402      	add	r2, r0
 800465a:	4603      	mov	r3, r0
 800465c:	4293      	cmp	r3, r2
 800465e:	d100      	bne.n	8004662 <memset+0xa>
 8004660:	4770      	bx	lr
 8004662:	f803 1b01 	strb.w	r1, [r3], #1
 8004666:	e7f9      	b.n	800465c <memset+0x4>

08004668 <_init>:
 8004668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466a:	bf00      	nop
 800466c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466e:	bc08      	pop	{r3}
 8004670:	469e      	mov	lr, r3
 8004672:	4770      	bx	lr

08004674 <_fini>:
 8004674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004676:	bf00      	nop
 8004678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800467a:	bc08      	pop	{r3}
 800467c:	469e      	mov	lr, r3
 800467e:	4770      	bx	lr
