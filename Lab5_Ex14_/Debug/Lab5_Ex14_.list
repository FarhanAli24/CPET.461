
Lab5_Ex14_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800685c  0800685c  0001685c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006918  08006918  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006918  08006918  00016918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006920  08006920  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006920  08006920  00016920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006924  08006924  00016924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004410  20000010  08006938  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004420  08006938  00024420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019082  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000352b  00000000  00000000  000390c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001748  00000000  00000000  0003c5f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015d0  00000000  00000000  0003dd38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018b3a  00000000  00000000  0003f308  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012280  00000000  00000000  00057e42  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099583  00000000  00000000  0006a0c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00103645  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006290  00000000  00000000  001036c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006844 	.word	0x08006844

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006844 	.word	0x08006844

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <flashLed>:
#include "blink_leds.h"
#include "cmsis_os.h"
#include "main.h"

void flashLed(uint16_t GPIO_Pin, int delay, int cycles)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
 80004ec:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < cycles; i++)
 80004ee:	2300      	movs	r3, #0
 80004f0:	617b      	str	r3, [r7, #20]
 80004f2:	e016      	b.n	8000522 <flashLed+0x42>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_Pin, GPIO_PIN_SET);
 80004f4:	89fb      	ldrh	r3, [r7, #14]
 80004f6:	2201      	movs	r2, #1
 80004f8:	4619      	mov	r1, r3
 80004fa:	480e      	ldr	r0, [pc, #56]	; (8000534 <flashLed+0x54>)
 80004fc:	f001 f8ce 	bl	800169c <HAL_GPIO_WritePin>
		osDelay(delay);
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	4618      	mov	r0, r3
 8000504:	f004 fd2e 	bl	8004f64 <osDelay>
		HAL_GPIO_WritePin(GPIOD, GPIO_Pin, GPIO_PIN_RESET);
 8000508:	89fb      	ldrh	r3, [r7, #14]
 800050a:	2200      	movs	r2, #0
 800050c:	4619      	mov	r1, r3
 800050e:	4809      	ldr	r0, [pc, #36]	; (8000534 <flashLed+0x54>)
 8000510:	f001 f8c4 	bl	800169c <HAL_GPIO_WritePin>
		osDelay(delay);
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	4618      	mov	r0, r3
 8000518:	f004 fd24 	bl	8004f64 <osDelay>
	for(int i = 0; i < cycles; i++)
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	3301      	adds	r3, #1
 8000520:	617b      	str	r3, [r7, #20]
 8000522:	697a      	ldr	r2, [r7, #20]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	429a      	cmp	r2, r3
 8000528:	dbe4      	blt.n	80004f4 <flashLed+0x14>
	}
}
 800052a:	bf00      	nop
 800052c:	3718      	adds	r7, #24
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40020c00 	.word	0x40020c00

08000538 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	4a07      	ldr	r2, [pc, #28]	; (8000564 <vApplicationGetIdleTaskMemory+0x2c>)
 8000548:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <vApplicationGetIdleTaskMemory+0x30>)
 800054e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2280      	movs	r2, #128	; 0x80
 8000554:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	2000002c 	.word	0x2000002c
 8000568:	20000080 	.word	0x20000080

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b5b0      	push	{r4, r5, r7, lr}
 800056e:	b09c      	sub	sp, #112	; 0x70
 8000570:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fdcb 	bl	800110c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f869 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f9cf 	bl	800091c <MX_GPIO_Init>
  MX_I2C1_Init();
 800057e:	f000 f8e9 	bl	8000754 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000582:	f000 f915 	bl	80007b0 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000586:	f000 f941 	bl	800080c <MX_I2S3_Init>
  MX_SPI1_Init();
 800058a:	f000 f96f 	bl	800086c <MX_SPI1_Init>
  MX_USB_OTG_FS_HCD_Init();
 800058e:	f000 f9a3 	bl	80008d8 <MX_USB_OTG_FS_HCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000592:	4b26      	ldr	r3, [pc, #152]	; (800062c <main+0xc0>)
 8000594:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000598:	461d      	mov	r5, r3
 800059a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f004 fc8d 	bl	8004ecc <osThreadCreate>
 80005b2:	4602      	mov	r2, r0
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <main+0xc4>)
 80005b6:	601a      	str	r2, [r3, #0]

  /* definition and creation of GreenTask */
  osThreadDef(GreenTask, StartGreenTask, osPriorityNormal, 0, 128);
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <main+0xc8>)
 80005ba:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005be:	461d      	mov	r5, r3
 80005c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GreenTaskHandle = osThreadCreate(osThread(GreenTask), NULL);
 80005cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 fc7a 	bl	8004ecc <osThreadCreate>
 80005d8:	4602      	mov	r2, r0
 80005da:	4b17      	ldr	r3, [pc, #92]	; (8000638 <main+0xcc>)
 80005dc:	601a      	str	r2, [r3, #0]

  /* definition and creation of BlueTask */
  osThreadDef(BlueTask, StartBlueTask, osPriorityNormal, 0, 128);
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <main+0xd0>)
 80005e0:	f107 041c 	add.w	r4, r7, #28
 80005e4:	461d      	mov	r5, r3
 80005e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlueTaskHandle = osThreadCreate(osThread(BlueTask), NULL);
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f004 fc67 	bl	8004ecc <osThreadCreate>
 80005fe:	4602      	mov	r2, r0
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <main+0xd4>)
 8000602:	601a      	str	r2, [r3, #0]

  /* definition and creation of RedTask */
  osThreadDef(RedTask, StartRedTask, osPriorityNormal, 0, 128);
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <main+0xd8>)
 8000606:	463c      	mov	r4, r7
 8000608:	461d      	mov	r5, r3
 800060a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RedTaskHandle = osThreadCreate(osThread(RedTask), NULL);
 8000616:	463b      	mov	r3, r7
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f004 fc56 	bl	8004ecc <osThreadCreate>
 8000620:	4602      	mov	r2, r0
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <main+0xdc>)
 8000624:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000626:	f004 fc4a 	bl	8004ebe <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062a:	e7fe      	b.n	800062a <main+0xbe>
 800062c:	08006868 	.word	0x08006868
 8000630:	20003fcc 	.word	0x20003fcc
 8000634:	08006890 	.word	0x08006890
 8000638:	2000402c 	.word	0x2000402c
 800063c:	080068b8 	.word	0x080068b8
 8000640:	20004028 	.word	0x20004028
 8000644:	080068dc 	.word	0x080068dc
 8000648:	20004024 	.word	0x20004024

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b09a      	sub	sp, #104	; 0x68
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f006 f8ea 	bl	8006834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
 8000680:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	4b31      	ldr	r3, [pc, #196]	; (800074c <SystemClock_Config+0x100>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	4a30      	ldr	r2, [pc, #192]	; (800074c <SystemClock_Config+0x100>)
 800068c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000690:	6413      	str	r3, [r2, #64]	; 0x40
 8000692:	4b2e      	ldr	r3, [pc, #184]	; (800074c <SystemClock_Config+0x100>)
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <SystemClock_Config+0x104>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a2a      	ldr	r2, [pc, #168]	; (8000750 <SystemClock_Config+0x104>)
 80006a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ac:	6013      	str	r3, [r2, #0]
 80006ae:	4b28      	ldr	r3, [pc, #160]	; (8000750 <SystemClock_Config+0x104>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ba:	2301      	movs	r3, #1
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006cc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006d2:	23c0      	movs	r3, #192	; 0xc0
 80006d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006da:	2308      	movs	r3, #8
 80006dc:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 ffbc 	bl	8003660 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ee:	f000 fa53 	bl	8000b98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070c:	2103      	movs	r1, #3
 800070e:	4618      	mov	r0, r3
 8000710:	f003 fa16 	bl	8003b40 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800071a:	f000 fa3d 	bl	8000b98 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800071e:	2301      	movs	r3, #1
 8000720:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000722:	23c8      	movs	r3, #200	; 0xc8
 8000724:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000726:	2305      	movs	r3, #5
 8000728:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800072a:	2302      	movs	r3, #2
 800072c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	4618      	mov	r0, r3
 8000734:	f003 fc28 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800073e:	f000 fa2b 	bl	8000b98 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3768      	adds	r7, #104	; 0x68
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_I2C1_Init+0x50>)
 800075a:	4a13      	ldr	r2, [pc, #76]	; (80007a8 <MX_I2C1_Init+0x54>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000760:	4a12      	ldr	r2, [pc, #72]	; (80007ac <MX_I2C1_Init+0x58>)
 8000762:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_I2C1_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000772:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000776:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_I2C1_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000792:	f002 f98d 	bl	8002ab0 <HAL_I2C_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800079c:	f000 f9fc 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20003fd0 	.word	0x20003fd0
 80007a8:	40005400 	.word	0x40005400
 80007ac:	000186a0 	.word	0x000186a0

080007b0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_I2S2_Init+0x50>)
 80007b6:	4a13      	ldr	r2, [pc, #76]	; (8000804 <MX_I2S2_Init+0x54>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_I2S2_Init+0x50>)
 80007bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_I2S2_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_I2S2_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_I2S2_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_I2S2_Init+0x50>)
 80007d6:	4a0c      	ldr	r2, [pc, #48]	; (8000808 <MX_I2S2_Init+0x58>)
 80007d8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_I2S2_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_I2S2_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_I2S2_Init+0x50>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_I2S2_Init+0x50>)
 80007ee:	f002 fa97 	bl	8002d20 <HAL_I2S_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007f8:	f000 f9ce 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	2000434c 	.word	0x2000434c
 8000804:	40003800 	.word	0x40003800
 8000808:	00017700 	.word	0x00017700

0800080c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_I2S3_Init+0x54>)
 8000812:	4a14      	ldr	r2, [pc, #80]	; (8000864 <MX_I2S3_Init+0x58>)
 8000814:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_I2S3_Init+0x54>)
 8000818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800081c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_I2S3_Init+0x54>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_I2S3_Init+0x54>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <MX_I2S3_Init+0x54>)
 800082c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000830:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_I2S3_Init+0x54>)
 8000834:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <MX_I2S3_Init+0x5c>)
 8000836:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_I2S3_Init+0x54>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_I2S3_Init+0x54>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_I2S3_Init+0x54>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_I2S3_Init+0x54>)
 800084c:	f002 fa68 	bl	8002d20 <HAL_I2S_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000856:	f000 f99f 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20004394 	.word	0x20004394
 8000864:	40003c00 	.word	0x40003c00
 8000868:	00017700 	.word	0x00017700

0800086c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000872:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <MX_SPI1_Init+0x68>)
 8000874:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800087c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_SPI1_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008b8:	220a      	movs	r2, #10
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008be:	f003 fcb1 	bl	8004224 <HAL_SPI_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008c8:	f000 f966 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20004030 	.word	0x20004030
 80008d4:	40013000 	.word	0x40013000

080008d8 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80008de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008e2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80008e6:	2208      	movs	r2, #8
 80008e8:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80008f8:	2202      	movs	r2, #2
 80008fa:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000904:	f000 fee3 	bl	80016ce <HAL_HCD_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 800090e:	f000 f943 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20004088 	.word	0x20004088

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	; 0x30
 8000920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
 8000936:	4b60      	ldr	r3, [pc, #384]	; (8000ab8 <MX_GPIO_Init+0x19c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a5f      	ldr	r2, [pc, #380]	; (8000ab8 <MX_GPIO_Init+0x19c>)
 800093c:	f043 0310 	orr.w	r3, r3, #16
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b5d      	ldr	r3, [pc, #372]	; (8000ab8 <MX_GPIO_Init+0x19c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0310 	and.w	r3, r3, #16
 800094a:	61bb      	str	r3, [r7, #24]
 800094c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	4b59      	ldr	r3, [pc, #356]	; (8000ab8 <MX_GPIO_Init+0x19c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a58      	ldr	r2, [pc, #352]	; (8000ab8 <MX_GPIO_Init+0x19c>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b56      	ldr	r3, [pc, #344]	; (8000ab8 <MX_GPIO_Init+0x19c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b52      	ldr	r3, [pc, #328]	; (8000ab8 <MX_GPIO_Init+0x19c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a51      	ldr	r2, [pc, #324]	; (8000ab8 <MX_GPIO_Init+0x19c>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b4f      	ldr	r3, [pc, #316]	; (8000ab8 <MX_GPIO_Init+0x19c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b4b      	ldr	r3, [pc, #300]	; (8000ab8 <MX_GPIO_Init+0x19c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a4a      	ldr	r2, [pc, #296]	; (8000ab8 <MX_GPIO_Init+0x19c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b48      	ldr	r3, [pc, #288]	; (8000ab8 <MX_GPIO_Init+0x19c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	4b44      	ldr	r3, [pc, #272]	; (8000ab8 <MX_GPIO_Init+0x19c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a43      	ldr	r2, [pc, #268]	; (8000ab8 <MX_GPIO_Init+0x19c>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b41      	ldr	r3, [pc, #260]	; (8000ab8 <MX_GPIO_Init+0x19c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b3d      	ldr	r3, [pc, #244]	; (8000ab8 <MX_GPIO_Init+0x19c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a3c      	ldr	r2, [pc, #240]	; (8000ab8 <MX_GPIO_Init+0x19c>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b3a      	ldr	r3, [pc, #232]	; (8000ab8 <MX_GPIO_Init+0x19c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2108      	movs	r1, #8
 80009de:	4837      	ldr	r0, [pc, #220]	; (8000abc <MX_GPIO_Init+0x1a0>)
 80009e0:	f000 fe5c 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2101      	movs	r1, #1
 80009e8:	4835      	ldr	r0, [pc, #212]	; (8000ac0 <MX_GPIO_Init+0x1a4>)
 80009ea:	f000 fe57 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ee:	2200      	movs	r2, #0
 80009f0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009f4:	4833      	ldr	r0, [pc, #204]	; (8000ac4 <MX_GPIO_Init+0x1a8>)
 80009f6:	f000 fe51 	bl	800169c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80009fa:	2304      	movs	r3, #4
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	482b      	ldr	r0, [pc, #172]	; (8000abc <MX_GPIO_Init+0x1a0>)
 8000a0e:	f000 fcc3 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a12:	2308      	movs	r3, #8
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4824      	ldr	r0, [pc, #144]	; (8000abc <MX_GPIO_Init+0x1a0>)
 8000a2a:	f000 fcb5 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000a2e:	2332      	movs	r3, #50	; 0x32
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a32:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <MX_GPIO_Init+0x1ac>)
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	481e      	ldr	r0, [pc, #120]	; (8000abc <MX_GPIO_Init+0x1a0>)
 8000a42:	f000 fca9 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4818      	ldr	r0, [pc, #96]	; (8000ac0 <MX_GPIO_Init+0x1a4>)
 8000a5e:	f000 fc9b 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_GPIO_Init+0x1ac>)
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4815      	ldr	r0, [pc, #84]	; (8000acc <MX_GPIO_Init+0x1b0>)
 8000a76:	f000 fc8f 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a7a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a7e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <MX_GPIO_Init+0x1a8>)
 8000a94:	f000 fc80 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a98:	2320      	movs	r3, #32
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <MX_GPIO_Init+0x1a8>)
 8000aac:	f000 fc74 	bl	8001398 <HAL_GPIO_Init>

}
 8000ab0:	bf00      	nop
 8000ab2:	3730      	adds	r7, #48	; 0x30
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	40020c00 	.word	0x40020c00
 8000ac8:	10120000 	.word	0x10120000
 8000acc:	40020000 	.word	0x40020000

08000ad0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f004 fa43 	bl	8004f64 <osDelay>
 8000ade:	e7fb      	b.n	8000ad8 <StartDefaultTask+0x8>

08000ae0 <StartGreenTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGreenTask */
void StartGreenTask(void const * argument)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartGreenTask */
  /* Infinite loop */
  for(;;)
  {
		osSignalWait(GreenFlag, osWaitForever);//wait for signal
 8000ae8:	2305      	movs	r3, #5
 8000aea:	4619      	mov	r1, r3
 8000aec:	463b      	mov	r3, r7
 8000aee:	f04f 32ff 	mov.w	r2, #4294967295
 8000af2:	4618      	mov	r0, r3
 8000af4:	f004 fa8a 	bl	800500c <osSignalWait>

		flashLed(LD4_Pin, 50, 50);//10Hz, 5 cycles
 8000af8:	2232      	movs	r2, #50	; 0x32
 8000afa:	2132      	movs	r1, #50	; 0x32
 8000afc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b00:	f7ff fcee 	bl	80004e0 <flashLed>
		osSignalWait(GreenFlag, osWaitForever);//wait for signal
 8000b04:	e7f0      	b.n	8000ae8 <StartGreenTask+0x8>
	...

08000b08 <StartBlueTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlueTask */
void StartBlueTask(void const * argument)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlueTask */
  /* Infinite loop */
  for(;;)
  {
		flashLed(LD6_Pin, 500, 10);//1Hz, 10 cycles
 8000b10:	220a      	movs	r2, #10
 8000b12:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b16:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b1a:	f7ff fce1 	bl	80004e0 <flashLed>

		osSignalSet(GreenTaskHandle, GreenFlag);//sends signal to GreenTask
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <StartBlueTask+0x3c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2205      	movs	r2, #5
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f004 fa30 	bl	8004f8c <osSignalSet>

	    osDelay(6000);//delay 6 seconds
 8000b2c:	f241 7070 	movw	r0, #6000	; 0x1770
 8000b30:	f004 fa18 	bl	8004f64 <osDelay>


	    osSignalSet(RedTaskHandle, RedFlag);//sends signal to redTask
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <StartBlueTask+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2204      	movs	r2, #4
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f004 fa25 	bl	8004f8c <osSignalSet>
		flashLed(LD6_Pin, 500, 10);//1Hz, 10 cycles
 8000b42:	e7e5      	b.n	8000b10 <StartBlueTask+0x8>
 8000b44:	2000402c 	.word	0x2000402c
 8000b48:	20004024 	.word	0x20004024

08000b4c <StartRedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRedTask */
void StartRedTask(void const * argument)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartRedTask */
  /* Infinite loop */
  for(;;)
  {
	  osSignalWait(RedFlag, osWaitForever);//wait for signal
 8000b54:	2304      	movs	r3, #4
 8000b56:	4619      	mov	r1, r3
 8000b58:	463b      	mov	r3, r7
 8000b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f004 fa54 	bl	800500c <osSignalWait>

	  flashLed(LD5_Pin, 50, 50);//10Hz, 5 cycles
 8000b64:	2232      	movs	r2, #50	; 0x32
 8000b66:	2132      	movs	r1, #50	; 0x32
 8000b68:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b6c:	f7ff fcb8 	bl	80004e0 <flashLed>
	  osSignalWait(RedFlag, osWaitForever);//wait for signal
 8000b70:	e7f0      	b.n	8000b54 <StartRedTask+0x8>
	...

08000b74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d101      	bne.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b86:	f000 fae3 	bl	8001150 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40010000 	.word	0x40010000

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_MspInit+0x54>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <HAL_MspInit+0x54>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <HAL_MspInit+0x54>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <HAL_MspInit+0x54>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_MspInit+0x54>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_MspInit+0x54>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	210f      	movs	r1, #15
 8000bea:	f06f 0001 	mvn.w	r0, #1
 8000bee:	f000 fba9 	bl	8001344 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800

08000c00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a19      	ldr	r2, [pc, #100]	; (8000c84 <HAL_I2C_MspInit+0x84>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d12c      	bne.n	8000c7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c44:	2312      	movs	r3, #18
 8000c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c50:	2304      	movs	r3, #4
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480c      	ldr	r0, [pc, #48]	; (8000c8c <HAL_I2C_MspInit+0x8c>)
 8000c5c:	f000 fb9c 	bl	8001398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c7c:	bf00      	nop
 8000c7e:	3728      	adds	r7, #40	; 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40005400 	.word	0x40005400
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020400 	.word	0x40020400

08000c90 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	; 0x38
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a59      	ldr	r2, [pc, #356]	; (8000e14 <HAL_I2S_MspInit+0x184>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d15b      	bne.n	8000d6a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
 8000cb6:	4b58      	ldr	r3, [pc, #352]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a57      	ldr	r2, [pc, #348]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b55      	ldr	r3, [pc, #340]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cca:	623b      	str	r3, [r7, #32]
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	4b51      	ldr	r3, [pc, #324]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a50      	ldr	r2, [pc, #320]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b4e      	ldr	r3, [pc, #312]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	61fb      	str	r3, [r7, #28]
 8000ce8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
 8000cee:	4b4a      	ldr	r3, [pc, #296]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a49      	ldr	r2, [pc, #292]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b47      	ldr	r3, [pc, #284]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	61bb      	str	r3, [r7, #24]
 8000d04:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d06:	2304      	movs	r3, #4
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000d16:	2306      	movs	r3, #6
 8000d18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	483e      	ldr	r0, [pc, #248]	; (8000e1c <HAL_I2S_MspInit+0x18c>)
 8000d22:	f000 fb39 	bl	8001398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d26:	2308      	movs	r3, #8
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d36:	2305      	movs	r3, #5
 8000d38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4836      	ldr	r0, [pc, #216]	; (8000e1c <HAL_I2S_MspInit+0x18c>)
 8000d42:	f000 fb29 	bl	8001398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d58:	2305      	movs	r3, #5
 8000d5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d60:	4619      	mov	r1, r3
 8000d62:	482f      	ldr	r0, [pc, #188]	; (8000e20 <HAL_I2S_MspInit+0x190>)
 8000d64:	f000 fb18 	bl	8001398 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d68:	e04f      	b.n	8000e0a <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a2d      	ldr	r2, [pc, #180]	; (8000e24 <HAL_I2S_MspInit+0x194>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d14a      	bne.n	8000e0a <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	4a26      	ldr	r2, [pc, #152]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d82:	6413      	str	r3, [r2, #64]	; 0x40
 8000d84:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	4a1f      	ldr	r2, [pc, #124]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000da0:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	4a18      	ldr	r2, [pc, #96]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000db6:	f043 0304 	orr.w	r3, r3, #4
 8000dba:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dc8:	2310      	movs	r3, #16
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dd8:	2306      	movs	r3, #6
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	4811      	ldr	r0, [pc, #68]	; (8000e28 <HAL_I2S_MspInit+0x198>)
 8000de4:	f000 fad8 	bl	8001398 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000de8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dfa:	2306      	movs	r3, #6
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <HAL_I2S_MspInit+0x18c>)
 8000e06:	f000 fac7 	bl	8001398 <HAL_GPIO_Init>
}
 8000e0a:	bf00      	nop
 8000e0c:	3738      	adds	r7, #56	; 0x38
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40003800 	.word	0x40003800
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020800 	.word	0x40020800
 8000e20:	40020400 	.word	0x40020400
 8000e24:	40003c00 	.word	0x40003c00
 8000e28:	40020000 	.word	0x40020000

08000e2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a19      	ldr	r2, [pc, #100]	; (8000eb0 <HAL_SPI_MspInit+0x84>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d12b      	bne.n	8000ea6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_SPI_MspInit+0x88>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a17      	ldr	r2, [pc, #92]	; (8000eb4 <HAL_SPI_MspInit+0x88>)
 8000e58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_SPI_MspInit+0x88>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_SPI_MspInit+0x88>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <HAL_SPI_MspInit+0x88>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_SPI_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e86:	23e0      	movs	r3, #224	; 0xe0
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e96:	2305      	movs	r3, #5
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <HAL_SPI_MspInit+0x8c>)
 8000ea2:	f000 fa79 	bl	8001398 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	; 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40013000 	.word	0x40013000
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020000 	.word	0x40020000

08000ebc <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000edc:	d147      	bne.n	8000f6e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <HAL_HCD_MspInit+0xbc>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a24      	ldr	r2, [pc, #144]	; (8000f78 <HAL_HCD_MspInit+0xbc>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <HAL_HCD_MspInit+0xbc>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	481b      	ldr	r0, [pc, #108]	; (8000f7c <HAL_HCD_MspInit+0xc0>)
 8000f10:	f000 fa42 	bl	8001398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000f14:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f26:	230a      	movs	r3, #10
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4812      	ldr	r0, [pc, #72]	; (8000f7c <HAL_HCD_MspInit+0xc0>)
 8000f32:	f000 fa31 	bl	8001398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <HAL_HCD_MspInit+0xbc>)
 8000f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3a:	4a0f      	ldr	r2, [pc, #60]	; (8000f78 <HAL_HCD_MspInit+0xbc>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	6353      	str	r3, [r2, #52]	; 0x34
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <HAL_HCD_MspInit+0xbc>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <HAL_HCD_MspInit+0xbc>)
 8000f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f50:	6453      	str	r3, [r2, #68]	; 0x44
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_HCD_MspInit+0xbc>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2105      	movs	r1, #5
 8000f62:	2043      	movs	r0, #67	; 0x43
 8000f64:	f000 f9ee 	bl	8001344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000f68:	2043      	movs	r0, #67	; 0x43
 8000f6a:	f000 fa07 	bl	800137c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020000 	.word	0x40020000

08000f80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08c      	sub	sp, #48	; 0x30
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	2019      	movs	r0, #25
 8000f96:	f000 f9d5 	bl	8001344 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000f9a:	2019      	movs	r0, #25
 8000f9c:	f000 f9ee 	bl	800137c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <HAL_InitTick+0xa0>)
 8000fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa8:	4a1d      	ldr	r2, [pc, #116]	; (8001020 <HAL_InitTick+0xa0>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_InitTick+0xa0>)
 8000fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fbc:	f107 0210 	add.w	r2, r7, #16
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f002 ffac 	bl	8003f24 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fcc:	f002 ff96 	bl	8003efc <HAL_RCC_GetPCLK2Freq>
 8000fd0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd4:	4a13      	ldr	r2, [pc, #76]	; (8001024 <HAL_InitTick+0xa4>)
 8000fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fda:	0c9b      	lsrs	r3, r3, #18
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_InitTick+0xa8>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <HAL_InitTick+0xac>)
 8000fe4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <HAL_InitTick+0xa8>)
 8000fe8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <HAL_InitTick+0xa8>)
 8000ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_InitTick+0xa8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_InitTick+0xa8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001000:	4809      	ldr	r0, [pc, #36]	; (8001028 <HAL_InitTick+0xa8>)
 8001002:	f003 f973 	bl	80042ec <HAL_TIM_Base_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d104      	bne.n	8001016 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800100c:	4806      	ldr	r0, [pc, #24]	; (8001028 <HAL_InitTick+0xa8>)
 800100e:	f003 f9a2 	bl	8004356 <HAL_TIM_Base_Start_IT>
 8001012:	4603      	mov	r3, r0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3730      	adds	r7, #48	; 0x30
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40023800 	.word	0x40023800
 8001024:	431bde83 	.word	0x431bde83
 8001028:	200043dc 	.word	0x200043dc
 800102c:	40010000 	.word	0x40010000

08001030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <MemManage_Handler+0x4>

0800104a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <BusFault_Handler+0x4>

08001050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <UsageFault_Handler+0x4>

08001056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800106a:	f003 f998 	bl	800439e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200043dc 	.word	0x200043dc

08001078 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <OTG_FS_IRQHandler+0x10>)
 800107e:	f000 fb88 	bl	8001792 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20004088 	.word	0x20004088

0800108c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <SystemInit+0x28>)
 8001092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001096:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <SystemInit+0x28>)
 8001098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800109c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SystemInit+0x28>)
 80010a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010a6:	609a      	str	r2, [r3, #8]
#endif
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010be:	e003      	b.n	80010c8 <LoopCopyDataInit>

080010c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010c6:	3104      	adds	r1, #4

080010c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010c8:	480b      	ldr	r0, [pc, #44]	; (80010f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010d0:	d3f6      	bcc.n	80010c0 <CopyDataInit>
  ldr  r2, =_sbss
 80010d2:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010d4:	e002      	b.n	80010dc <LoopFillZerobss>

080010d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010d8:	f842 3b04 	str.w	r3, [r2], #4

080010dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010e0:	d3f9      	bcc.n	80010d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010e2:	f7ff ffd3 	bl	800108c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010e6:	f005 fb81 	bl	80067ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ea:	f7ff fa3f 	bl	800056c <main>
  bx  lr    
 80010ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010f4:	08006928 	.word	0x08006928
  ldr  r0, =_sdata
 80010f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010fc:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001100:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001104:	20004420 	.word	0x20004420

08001108 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC_IRQHandler>
	...

0800110c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <HAL_Init+0x40>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0d      	ldr	r2, [pc, #52]	; (800114c <HAL_Init+0x40>)
 8001116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_Init+0x40>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0a      	ldr	r2, [pc, #40]	; (800114c <HAL_Init+0x40>)
 8001122:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001126:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a07      	ldr	r2, [pc, #28]	; (800114c <HAL_Init+0x40>)
 800112e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001132:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001134:	2003      	movs	r0, #3
 8001136:	f000 f8fa 	bl	800132e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff ff20 	bl	8000f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001140:	f7ff fd32 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023c00 	.word	0x40023c00

08001150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x20>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x24>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_IncTick+0x24>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008
 8001174:	2000441c 	.word	0x2000441c

08001178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_GetTick+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	2000441c 	.word	0x2000441c

08001190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001198:	f7ff ffee 	bl	8001178 <HAL_GetTick>
 800119c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a8:	d005      	beq.n	80011b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_Delay+0x40>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011b6:	bf00      	nop
 80011b8:	f7ff ffde 	bl	8001178 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d8f7      	bhi.n	80011b8 <HAL_Delay+0x28>
  {
  }
}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000008 	.word	0x20000008

080011d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001206:	4a04      	ldr	r2, [pc, #16]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60d3      	str	r3, [r2, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <__NVIC_GetPriorityGrouping+0x18>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0307 	and.w	r3, r3, #7
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	2b00      	cmp	r3, #0
 8001248:	db0b      	blt.n	8001262 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f003 021f 	and.w	r2, r3, #31
 8001250:	4907      	ldr	r1, [pc, #28]	; (8001270 <__NVIC_EnableIRQ+0x38>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	095b      	lsrs	r3, r3, #5
 8001258:	2001      	movs	r0, #1
 800125a:	fa00 f202 	lsl.w	r2, r0, r2
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	; (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
         );
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ff4c 	bl	80011d4 <__NVIC_SetPriorityGrouping>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001356:	f7ff ff61 	bl	800121c <__NVIC_GetPriorityGrouping>
 800135a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ffb1 	bl	80012c8 <NVIC_EncodePriority>
 8001366:	4602      	mov	r2, r0
 8001368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff80 	bl	8001274 <__NVIC_SetPriority>
}
 8001374:	bf00      	nop
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff54 	bl	8001238 <__NVIC_EnableIRQ>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	e159      	b.n	8001668 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b4:	2201      	movs	r2, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	f040 8148 	bne.w	8001662 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d00b      	beq.n	80013f2 <HAL_GPIO_Init+0x5a>
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d007      	beq.n	80013f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013e6:	2b11      	cmp	r3, #17
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b12      	cmp	r3, #18
 80013f0:	d130      	bne.n	8001454 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001428:	2201      	movs	r2, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f003 0201 	and.w	r2, r3, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0xfc>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b12      	cmp	r3, #18
 8001492:	d123      	bne.n	80014dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	220f      	movs	r2, #15
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3208      	adds	r2, #8
 80014d6:	69b9      	ldr	r1, [r7, #24]
 80014d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0203 	and.w	r2, r3, #3
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80a2 	beq.w	8001662 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b56      	ldr	r3, [pc, #344]	; (800167c <HAL_GPIO_Init+0x2e4>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a55      	ldr	r2, [pc, #340]	; (800167c <HAL_GPIO_Init+0x2e4>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b53      	ldr	r3, [pc, #332]	; (800167c <HAL_GPIO_Init+0x2e4>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800153a:	4a51      	ldr	r2, [pc, #324]	; (8001680 <HAL_GPIO_Init+0x2e8>)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3302      	adds	r3, #2
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a48      	ldr	r2, [pc, #288]	; (8001684 <HAL_GPIO_Init+0x2ec>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d019      	beq.n	800159a <HAL_GPIO_Init+0x202>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a47      	ldr	r2, [pc, #284]	; (8001688 <HAL_GPIO_Init+0x2f0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d013      	beq.n	8001596 <HAL_GPIO_Init+0x1fe>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a46      	ldr	r2, [pc, #280]	; (800168c <HAL_GPIO_Init+0x2f4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d00d      	beq.n	8001592 <HAL_GPIO_Init+0x1fa>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a45      	ldr	r2, [pc, #276]	; (8001690 <HAL_GPIO_Init+0x2f8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d007      	beq.n	800158e <HAL_GPIO_Init+0x1f6>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a44      	ldr	r2, [pc, #272]	; (8001694 <HAL_GPIO_Init+0x2fc>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d101      	bne.n	800158a <HAL_GPIO_Init+0x1f2>
 8001586:	2304      	movs	r3, #4
 8001588:	e008      	b.n	800159c <HAL_GPIO_Init+0x204>
 800158a:	2307      	movs	r3, #7
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x204>
 800158e:	2303      	movs	r3, #3
 8001590:	e004      	b.n	800159c <HAL_GPIO_Init+0x204>
 8001592:	2302      	movs	r3, #2
 8001594:	e002      	b.n	800159c <HAL_GPIO_Init+0x204>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <HAL_GPIO_Init+0x204>
 800159a:	2300      	movs	r3, #0
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	f002 0203 	and.w	r2, r2, #3
 80015a2:	0092      	lsls	r2, r2, #2
 80015a4:	4093      	lsls	r3, r2
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ac:	4934      	ldr	r1, [pc, #208]	; (8001680 <HAL_GPIO_Init+0x2e8>)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	3302      	adds	r3, #2
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ba:	4b37      	ldr	r3, [pc, #220]	; (8001698 <HAL_GPIO_Init+0x300>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015de:	4a2e      	ldr	r2, [pc, #184]	; (8001698 <HAL_GPIO_Init+0x300>)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015e4:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <HAL_GPIO_Init+0x300>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001608:	4a23      	ldr	r2, [pc, #140]	; (8001698 <HAL_GPIO_Init+0x300>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800160e:	4b22      	ldr	r3, [pc, #136]	; (8001698 <HAL_GPIO_Init+0x300>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001632:	4a19      	ldr	r2, [pc, #100]	; (8001698 <HAL_GPIO_Init+0x300>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_GPIO_Init+0x300>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <HAL_GPIO_Init+0x300>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3301      	adds	r3, #1
 8001666:	61fb      	str	r3, [r7, #28]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	2b0f      	cmp	r3, #15
 800166c:	f67f aea2 	bls.w	80013b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001670:	bf00      	nop
 8001672:	3724      	adds	r7, #36	; 0x24
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	40023800 	.word	0x40023800
 8001680:	40013800 	.word	0x40013800
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400
 800168c:	40020800 	.word	0x40020800
 8001690:	40020c00 	.word	0x40020c00
 8001694:	40021000 	.word	0x40021000
 8001698:	40013c00 	.word	0x40013c00

0800169c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ac:	787b      	ldrb	r3, [r7, #1]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016b8:	e003      	b.n	80016c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	041a      	lsls	r2, r3, #16
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	619a      	str	r2, [r3, #24]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80016ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d0:	b08f      	sub	sp, #60	; 0x3c
 80016d2:	af0a      	add	r7, sp, #40	; 0x28
 80016d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e054      	b.n	800178a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d106      	bne.n	8001700 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fbde 	bl	8000ebc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2203      	movs	r2, #3
 8001704:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001710:	2b00      	cmp	r3, #0
 8001712:	d102      	bne.n	800171a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f003 f863 	bl	80047ea <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	687e      	ldr	r6, [r7, #4]
 800172c:	466d      	mov	r5, sp
 800172e:	f106 0410 	add.w	r4, r6, #16
 8001732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800173a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800173e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001742:	1d33      	adds	r3, r6, #4
 8001744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001746:	6838      	ldr	r0, [r7, #0]
 8001748:	f002 ffee 	bl	8004728 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2101      	movs	r1, #1
 8001752:	4618      	mov	r0, r3
 8001754:	f003 f85a 	bl	800480c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	687e      	ldr	r6, [r7, #4]
 8001760:	466d      	mov	r5, sp
 8001762:	f106 0410 	add.w	r4, r6, #16
 8001766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001772:	e885 0003 	stmia.w	r5, {r0, r1}
 8001776:	1d33      	adds	r3, r6, #4
 8001778:	cb0e      	ldmia	r3, {r1, r2, r3}
 800177a:	6838      	ldr	r0, [r7, #0]
 800177c:	f003 f936 	bl	80049ec <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001792 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f003 f8dd 	bl	8004968 <USB_GetMode>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	f040 80f1 	bne.w	8001998 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 f8c1 	bl	8004942 <USB_ReadInterrupts>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 80e7 	beq.w	8001996 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f003 f8b8 	bl	8004942 <USB_ReadInterrupts>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017dc:	d104      	bne.n	80017e8 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017e6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 f8a8 	bl	8004942 <USB_ReadInterrupts>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017fc:	d104      	bne.n	8001808 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001806:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f003 f898 	bl	8004942 <USB_ReadInterrupts>
 8001812:	4603      	mov	r3, r0
 8001814:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001818:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800181c:	d104      	bne.n	8001828 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001826:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f003 f888 	bl	8004942 <USB_ReadInterrupts>
 8001832:	4603      	mov	r3, r0
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b02      	cmp	r3, #2
 800183a:	d103      	bne.n	8001844 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2202      	movs	r2, #2
 8001842:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f003 f87a 	bl	8004942 <USB_ReadInterrupts>
 800184e:	4603      	mov	r3, r0
 8001850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001858:	d117      	bne.n	800188a <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001868:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800186c:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f8a9 	bl	80019c6 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2101      	movs	r1, #1
 800187a:	4618      	mov	r0, r3
 800187c:	f003 f972 	bl	8004b64 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001888:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f003 f857 	bl	8004942 <USB_ReadInterrupts>
 8001894:	4603      	mov	r3, r0
 8001896:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800189a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800189e:	d102      	bne.n	80018a6 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f001 f875 	bl	8002990 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f003 f849 	bl	8004942 <USB_ReadInterrupts>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d106      	bne.n	80018c8 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f86f 	bl	800199e <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2208      	movs	r2, #8
 80018c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f003 f838 	bl	8004942 <USB_ReadInterrupts>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018dc:	d138      	bne.n	8001950 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 f9b1 	bl	8004c4a <USB_HC_ReadInterrupt>
 80018e8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e025      	b.n	800193c <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	fa22 f303 	lsr.w	r3, r2, r3
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d018      	beq.n	8001936 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	015a      	lsls	r2, r3, #5
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001916:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800191a:	d106      	bne.n	800192a <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	4619      	mov	r1, r3
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f87b 	bl	8001a1e <HCD_HC_IN_IRQHandler>
 8001928:	e005      	b.n	8001936 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	4619      	mov	r1, r3
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 fc0b 	bl	800214c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	429a      	cmp	r2, r3
 8001944:	d3d4      	bcc.n	80018f0 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800194e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f002 fff4 	bl	8004942 <USB_ReadInterrupts>
 800195a:	4603      	mov	r3, r0
 800195c:	f003 0310 	and.w	r3, r3, #16
 8001960:	2b10      	cmp	r3, #16
 8001962:	d101      	bne.n	8001968 <HAL_HCD_IRQHandler+0x1d6>
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <HAL_HCD_IRQHandler+0x1d8>
 8001968:	2300      	movs	r3, #0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d014      	beq.n	8001998 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	699a      	ldr	r2, [r3, #24]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0210 	bic.w	r2, r2, #16
 800197c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 ff5a 	bl	8002838 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699a      	ldr	r2, [r3, #24]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0210 	orr.w	r2, r2, #16
 8001992:	619a      	str	r2, [r3, #24]
 8001994:	e000      	b.n	8001998 <HAL_HCD_IRQHandler+0x206>
      return;
 8001996:	bf00      	nop
    }
  }
}
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	70fb      	strb	r3, [r7, #3]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	460b      	mov	r3, r1
 8001a28:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	015a      	lsls	r2, r3, #5
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d119      	bne.n	8001a82 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	015a      	lsls	r2, r3, #5
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	015a      	lsls	r2, r3, #5
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	0151      	lsls	r1, r2, #5
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	440a      	add	r2, r1
 8001a76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	60d3      	str	r3, [r2, #12]
 8001a80:	e095      	b.n	8001bae <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	015a      	lsls	r2, r3, #5
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0320 	and.w	r3, r3, #32
 8001a94:	2b20      	cmp	r3, #32
 8001a96:	d109      	bne.n	8001aac <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	015a      	lsls	r2, r3, #5
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	6093      	str	r3, [r2, #8]
 8001aaa:	e080      	b.n	8001bae <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	015a      	lsls	r2, r3, #5
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d134      	bne.n	8001b2c <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	015a      	lsls	r2, r3, #5
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4413      	add	r3, r2
 8001aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	0151      	lsls	r1, r2, #5
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	440a      	add	r2, r1
 8001ad8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	440b      	add	r3, r1
 8001af0:	335d      	adds	r3, #93	; 0x5d
 8001af2:	2205      	movs	r2, #5
 8001af4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	015a      	lsls	r2, r3, #5
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4413      	add	r3, r2
 8001afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b02:	461a      	mov	r2, r3
 8001b04:	2310      	movs	r3, #16
 8001b06:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	015a      	lsls	r2, r3, #5
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4413      	add	r3, r2
 8001b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b14:	461a      	mov	r2, r3
 8001b16:	2308      	movs	r3, #8
 8001b18:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 f8a1 	bl	8004c6c <USB_HC_Halt>
 8001b2a:	e040      	b.n	8001bae <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	015a      	lsls	r2, r3, #5
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4413      	add	r3, r2
 8001b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b42:	d134      	bne.n	8001bae <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	015a      	lsls	r2, r3, #5
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	0151      	lsls	r1, r2, #5
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	440a      	add	r2, r1
 8001b5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b5e:	f043 0302 	orr.w	r3, r3, #2
 8001b62:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 f87c 	bl	8004c6c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	015a      	lsls	r2, r3, #5
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b80:	461a      	mov	r2, r3
 8001b82:	2310      	movs	r3, #16
 8001b84:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	440b      	add	r3, r1
 8001b94:	335d      	adds	r3, #93	; 0x5d
 8001b96:	2208      	movs	r2, #8
 8001b98:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	015a      	lsls	r2, r3, #5
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bac:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	015a      	lsls	r2, r3, #5
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bc4:	d122      	bne.n	8001c0c <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	015a      	lsls	r2, r3, #5
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4413      	add	r3, r2
 8001bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	0151      	lsls	r1, r2, #5
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	440a      	add	r2, r1
 8001bdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f003 f83b 	bl	8004c6c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	015a      	lsls	r2, r3, #5
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c02:	461a      	mov	r2, r3
 8001c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c08:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001c0a:	e29b      	b.n	8002144 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	015a      	lsls	r2, r3, #5
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	f040 80c1 	bne.w	8001da6 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d01b      	beq.n	8001c64 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	440b      	add	r3, r1
 8001c3a:	3348      	adds	r3, #72	; 0x48
 8001c3c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	0159      	lsls	r1, r3, #5
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	440b      	add	r3, r1
 8001c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001c50:	1ad1      	subs	r1, r2, r3
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4403      	add	r3, r0
 8001c60:	334c      	adds	r3, #76	; 0x4c
 8001c62:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	440b      	add	r3, r1
 8001c72:	335d      	adds	r3, #93	; 0x5d
 8001c74:	2201      	movs	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	440b      	add	r3, r1
 8001c86:	3358      	adds	r3, #88	; 0x58
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	015a      	lsls	r2, r3, #5
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4413      	add	r3, r2
 8001c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c98:	461a      	mov	r2, r3
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	440b      	add	r3, r1
 8001cac:	333f      	adds	r3, #63	; 0x3f
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00a      	beq.n	8001cca <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	333f      	adds	r3, #63	; 0x3f
 8001cc4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d121      	bne.n	8001d0e <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	015a      	lsls	r2, r3, #5
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	0151      	lsls	r1, r2, #5
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	440a      	add	r2, r1
 8001ce0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f002 ffb9 	bl	8004c6c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d06:	461a      	mov	r2, r3
 8001d08:	2310      	movs	r3, #16
 8001d0a:	6093      	str	r3, [r2, #8]
 8001d0c:	e034      	b.n	8001d78 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	440b      	add	r3, r1
 8001d1c:	333f      	adds	r3, #63	; 0x3f
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d129      	bne.n	8001d78 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	015a      	lsls	r2, r3, #5
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	0151      	lsls	r1, r2, #5
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	440a      	add	r2, r1
 8001d3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d42:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	335c      	adds	r3, #92	; 0x5c
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	b2d8      	uxtb	r0, r3
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	440b      	add	r3, r1
 8001d6a:	335c      	adds	r3, #92	; 0x5c
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4601      	mov	r1, r0
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff fe45 	bl	8001a02 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	3350      	adds	r3, #80	; 0x50
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	f083 0301 	eor.w	r3, r3, #1
 8001d8e:	b2d8      	uxtb	r0, r3
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	440b      	add	r3, r1
 8001d9e:	3350      	adds	r3, #80	; 0x50
 8001da0:	4602      	mov	r2, r0
 8001da2:	701a      	strb	r2, [r3, #0]
}
 8001da4:	e1ce      	b.n	8002144 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	f040 80f1 	bne.w	8001fa0 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	015a      	lsls	r2, r3, #5
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	0151      	lsls	r1, r2, #5
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	440a      	add	r2, r1
 8001dd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dd8:	f023 0302 	bic.w	r3, r3, #2
 8001ddc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	440b      	add	r3, r1
 8001dec:	335d      	adds	r3, #93	; 0x5d
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d10a      	bne.n	8001e0a <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	440b      	add	r3, r1
 8001e02:	335c      	adds	r3, #92	; 0x5c
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	e0b0      	b.n	8001f6c <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	440b      	add	r3, r1
 8001e18:	335d      	adds	r3, #93	; 0x5d
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b05      	cmp	r3, #5
 8001e1e:	d10a      	bne.n	8001e36 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	440b      	add	r3, r1
 8001e2e:	335c      	adds	r3, #92	; 0x5c
 8001e30:	2205      	movs	r2, #5
 8001e32:	701a      	strb	r2, [r3, #0]
 8001e34:	e09a      	b.n	8001f6c <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	440b      	add	r3, r1
 8001e44:	335d      	adds	r3, #93	; 0x5d
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b06      	cmp	r3, #6
 8001e4a:	d00a      	beq.n	8001e62 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	440b      	add	r3, r1
 8001e5a:	335d      	adds	r3, #93	; 0x5d
 8001e5c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d156      	bne.n	8001f10 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	440b      	add	r3, r1
 8001e70:	3358      	adds	r3, #88	; 0x58
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	1c59      	adds	r1, r3, #1
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4403      	add	r3, r0
 8001e84:	3358      	adds	r3, #88	; 0x58
 8001e86:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	440b      	add	r3, r1
 8001e96:	3358      	adds	r3, #88	; 0x58
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d914      	bls.n	8001ec8 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	440b      	add	r3, r1
 8001eac:	3358      	adds	r3, #88	; 0x58
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	440b      	add	r3, r1
 8001ec0:	335c      	adds	r3, #92	; 0x5c
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	701a      	strb	r2, [r3, #0]
 8001ec6:	e009      	b.n	8001edc <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	440b      	add	r3, r1
 8001ed6:	335c      	adds	r3, #92	; 0x5c
 8001ed8:	2202      	movs	r2, #2
 8001eda:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001ef2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001efa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e02d      	b.n	8001f6c <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	440b      	add	r3, r1
 8001f1e:	335d      	adds	r3, #93	; 0x5d
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d122      	bne.n	8001f6c <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	440b      	add	r3, r1
 8001f34:	335c      	adds	r3, #92	; 0x5c
 8001f36:	2202      	movs	r2, #2
 8001f38:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f50:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f58:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f66:	461a      	mov	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	b2d8      	uxtb	r0, r3
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	335c      	adds	r3, #92	; 0x5c
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4601      	mov	r1, r0
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff fd32 	bl	8001a02 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001f9e:	e0d1      	b.n	8002144 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb2:	2b80      	cmp	r3, #128	; 0x80
 8001fb4:	d13e      	bne.n	8002034 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	0151      	lsls	r1, r2, #5
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	440a      	add	r2, r1
 8001fcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	440b      	add	r3, r1
 8001fe4:	3358      	adds	r3, #88	; 0x58
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	1c59      	adds	r1, r3, #1
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4403      	add	r3, r0
 8001ff8:	3358      	adds	r3, #88	; 0x58
 8001ffa:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	335d      	adds	r3, #93	; 0x5d
 800200c:	2206      	movs	r2, #6
 800200e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f002 fe26 	bl	8004c6c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202c:	461a      	mov	r2, r3
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	6093      	str	r3, [r2, #8]
}
 8002032:	e087      	b.n	8002144 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4413      	add	r3, r2
 800203c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b10      	cmp	r3, #16
 8002048:	d17c      	bne.n	8002144 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	440b      	add	r3, r1
 8002058:	333f      	adds	r3, #63	; 0x3f
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b03      	cmp	r3, #3
 800205e:	d122      	bne.n	80020a6 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	440b      	add	r3, r1
 800206e:	3358      	adds	r3, #88	; 0x58
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	0151      	lsls	r1, r2, #5
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	440a      	add	r2, r1
 800208a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800208e:	f043 0302 	orr.w	r3, r3, #2
 8002092:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	4611      	mov	r1, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 fde4 	bl	8004c6c <USB_HC_Halt>
 80020a4:	e045      	b.n	8002132 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	440b      	add	r3, r1
 80020b4:	333f      	adds	r3, #63	; 0x3f
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	440b      	add	r3, r1
 80020ca:	333f      	adds	r3, #63	; 0x3f
 80020cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d12f      	bne.n	8002132 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	440b      	add	r3, r1
 80020e0:	3358      	adds	r3, #88	; 0x58
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d121      	bne.n	8002132 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	335d      	adds	r3, #93	; 0x5d
 80020fe:	2203      	movs	r2, #3
 8002100:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4413      	add	r3, r2
 800210a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	0151      	lsls	r1, r2, #5
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	440a      	add	r2, r1
 8002118:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f002 fd9d 	bl	8004c6c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4413      	add	r3, r2
 800213a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213e:	461a      	mov	r2, r3
 8002140:	2310      	movs	r3, #16
 8002142:	6093      	str	r3, [r2, #8]
}
 8002144:	bf00      	nop
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4413      	add	r3, r2
 800216e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b04      	cmp	r3, #4
 800217a:	d119      	bne.n	80021b0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4413      	add	r3, r2
 8002184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002188:	461a      	mov	r2, r3
 800218a:	2304      	movs	r3, #4
 800218c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4413      	add	r3, r2
 8002196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	0151      	lsls	r1, r2, #5
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	440a      	add	r2, r1
 80021a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021a8:	f043 0302 	orr.w	r3, r3, #2
 80021ac:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80021ae:	e33e      	b.n	800282e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d141      	bne.n	800224a <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d2:	461a      	mov	r2, r3
 80021d4:	2320      	movs	r3, #32
 80021d6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	440b      	add	r3, r1
 80021e6:	333d      	adds	r3, #61	; 0x3d
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	f040 831f 	bne.w	800282e <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	333d      	adds	r3, #61	; 0x3d
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	440b      	add	r3, r1
 8002212:	335c      	adds	r3, #92	; 0x5c
 8002214:	2202      	movs	r2, #2
 8002216:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	0151      	lsls	r1, r2, #5
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	440a      	add	r2, r1
 800222e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002232:	f043 0302 	orr.w	r3, r3, #2
 8002236:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f002 fd12 	bl	8004c6c <USB_HC_Halt>
}
 8002248:	e2f1      	b.n	800282e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4413      	add	r3, r2
 8002252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225c:	2b40      	cmp	r3, #64	; 0x40
 800225e:	d13f      	bne.n	80022e0 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	440b      	add	r3, r1
 800226e:	335d      	adds	r3, #93	; 0x5d
 8002270:	2204      	movs	r2, #4
 8002272:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	440b      	add	r3, r1
 8002282:	333d      	adds	r3, #61	; 0x3d
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	440b      	add	r3, r1
 8002296:	3358      	adds	r3, #88	; 0x58
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	0151      	lsls	r1, r2, #5
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	440a      	add	r2, r1
 80022b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022b6:	f043 0302 	orr.w	r3, r3, #2
 80022ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	4611      	mov	r1, r2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f002 fcd0 	bl	8004c6c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d8:	461a      	mov	r2, r3
 80022da:	2340      	movs	r3, #64	; 0x40
 80022dc:	6093      	str	r3, [r2, #8]
}
 80022de:	e2a6      	b.n	800282e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022f6:	d122      	bne.n	800233e <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	0151      	lsls	r1, r2, #5
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	440a      	add	r2, r1
 800230e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002312:	f043 0302 	orr.w	r3, r3, #2
 8002316:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f002 fca2 	bl	8004c6c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4413      	add	r3, r2
 8002330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002334:	461a      	mov	r2, r3
 8002336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800233a:	6093      	str	r3, [r2, #8]
}
 800233c:	e277      	b.n	800282e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b01      	cmp	r3, #1
 8002352:	d135      	bne.n	80023c0 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	440b      	add	r3, r1
 8002362:	3358      	adds	r3, #88	; 0x58
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	0151      	lsls	r1, r2, #5
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	440a      	add	r2, r1
 800237e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002382:	f043 0302 	orr.w	r3, r3, #2
 8002386:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f002 fc6a 	bl	8004c6c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a4:	461a      	mov	r2, r3
 80023a6:	2301      	movs	r3, #1
 80023a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	440b      	add	r3, r1
 80023b8:	335d      	adds	r3, #93	; 0x5d
 80023ba:	2201      	movs	r2, #1
 80023bc:	701a      	strb	r2, [r3, #0]
}
 80023be:	e236      	b.n	800282e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d12b      	bne.n	800242e <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e2:	461a      	mov	r2, r3
 80023e4:	2308      	movs	r3, #8
 80023e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	0151      	lsls	r1, r2, #5
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	440a      	add	r2, r1
 80023fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002402:	f043 0302 	orr.w	r3, r3, #2
 8002406:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f002 fc2a 	bl	8004c6c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	440b      	add	r3, r1
 8002426:	335d      	adds	r3, #93	; 0x5d
 8002428:	2205      	movs	r2, #5
 800242a:	701a      	strb	r2, [r3, #0]
}
 800242c:	e1ff      	b.n	800282e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4413      	add	r3, r2
 8002436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b10      	cmp	r3, #16
 8002442:	d155      	bne.n	80024f0 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	440b      	add	r3, r1
 8002452:	3358      	adds	r3, #88	; 0x58
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	335d      	adds	r3, #93	; 0x5d
 8002468:	2203      	movs	r2, #3
 800246a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	440b      	add	r3, r1
 800247a:	333d      	adds	r3, #61	; 0x3d
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d114      	bne.n	80024ac <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	440b      	add	r3, r1
 8002490:	333c      	adds	r3, #60	; 0x3c
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d109      	bne.n	80024ac <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	440b      	add	r3, r1
 80024a6:	333d      	adds	r3, #61	; 0x3d
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	0151      	lsls	r1, r2, #5
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	440a      	add	r2, r1
 80024c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024c6:	f043 0302 	orr.w	r3, r3, #2
 80024ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	4611      	mov	r1, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f002 fbc8 	bl	8004c6c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e8:	461a      	mov	r2, r3
 80024ea:	2310      	movs	r3, #16
 80024ec:	6093      	str	r3, [r2, #8]
}
 80024ee:	e19e      	b.n	800282e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002502:	2b80      	cmp	r3, #128	; 0x80
 8002504:	d12b      	bne.n	800255e <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	0151      	lsls	r1, r2, #5
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	440a      	add	r2, r1
 800251c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f002 fb9b 	bl	8004c6c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	440b      	add	r3, r1
 8002544:	335d      	adds	r3, #93	; 0x5d
 8002546:	2206      	movs	r2, #6
 8002548:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	015a      	lsls	r2, r3, #5
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4413      	add	r3, r2
 8002552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002556:	461a      	mov	r2, r3
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	6093      	str	r3, [r2, #8]
}
 800255c:	e167      	b.n	800282e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4413      	add	r3, r2
 8002566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002574:	d135      	bne.n	80025e2 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4413      	add	r3, r2
 800257e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	0151      	lsls	r1, r2, #5
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	440a      	add	r2, r1
 800258c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002590:	f043 0302 	orr.w	r3, r3, #2
 8002594:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f002 fb63 	bl	8004c6c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b2:	461a      	mov	r2, r3
 80025b4:	2310      	movs	r3, #16
 80025b6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c4:	461a      	mov	r2, r3
 80025c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	440b      	add	r3, r1
 80025da:	335d      	adds	r3, #93	; 0x5d
 80025dc:	2208      	movs	r2, #8
 80025de:	701a      	strb	r2, [r3, #0]
}
 80025e0:	e125      	b.n	800282e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	f040 811a 	bne.w	800282e <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4413      	add	r3, r2
 8002602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	0151      	lsls	r1, r2, #5
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	440a      	add	r2, r1
 8002610:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002614:	f023 0302 	bic.w	r3, r3, #2
 8002618:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	335d      	adds	r3, #93	; 0x5d
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d137      	bne.n	80026a0 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	440b      	add	r3, r1
 800263e:	335c      	adds	r3, #92	; 0x5c
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	440b      	add	r3, r1
 8002652:	333f      	adds	r3, #63	; 0x3f
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d00b      	beq.n	8002672 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	440b      	add	r3, r1
 8002668:	333f      	adds	r3, #63	; 0x3f
 800266a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800266c:	2b03      	cmp	r3, #3
 800266e:	f040 80c5 	bne.w	80027fc <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	440b      	add	r3, r1
 8002680:	3351      	adds	r3, #81	; 0x51
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	f083 0301 	eor.w	r3, r3, #1
 8002688:	b2d8      	uxtb	r0, r3
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	440b      	add	r3, r1
 8002698:	3351      	adds	r3, #81	; 0x51
 800269a:	4602      	mov	r2, r0
 800269c:	701a      	strb	r2, [r3, #0]
 800269e:	e0ad      	b.n	80027fc <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	335d      	adds	r3, #93	; 0x5d
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d10a      	bne.n	80026cc <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	440b      	add	r3, r1
 80026c4:	335c      	adds	r3, #92	; 0x5c
 80026c6:	2202      	movs	r2, #2
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	e097      	b.n	80027fc <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	440b      	add	r3, r1
 80026da:	335d      	adds	r3, #93	; 0x5d
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d10a      	bne.n	80026f8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	440b      	add	r3, r1
 80026f0:	335c      	adds	r3, #92	; 0x5c
 80026f2:	2202      	movs	r2, #2
 80026f4:	701a      	strb	r2, [r3, #0]
 80026f6:	e081      	b.n	80027fc <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	440b      	add	r3, r1
 8002706:	335d      	adds	r3, #93	; 0x5d
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b05      	cmp	r3, #5
 800270c:	d10a      	bne.n	8002724 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	440b      	add	r3, r1
 800271c:	335c      	adds	r3, #92	; 0x5c
 800271e:	2205      	movs	r2, #5
 8002720:	701a      	strb	r2, [r3, #0]
 8002722:	e06b      	b.n	80027fc <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	440b      	add	r3, r1
 8002732:	335d      	adds	r3, #93	; 0x5d
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b06      	cmp	r3, #6
 8002738:	d00a      	beq.n	8002750 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	440b      	add	r3, r1
 8002748:	335d      	adds	r3, #93	; 0x5d
 800274a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800274c:	2b08      	cmp	r3, #8
 800274e:	d155      	bne.n	80027fc <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	440b      	add	r3, r1
 800275e:	3358      	adds	r3, #88	; 0x58
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	1c59      	adds	r1, r3, #1
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4403      	add	r3, r0
 8002772:	3358      	adds	r3, #88	; 0x58
 8002774:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	440b      	add	r3, r1
 8002784:	3358      	adds	r3, #88	; 0x58
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b03      	cmp	r3, #3
 800278a:	d914      	bls.n	80027b6 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	440b      	add	r3, r1
 800279a:	3358      	adds	r3, #88	; 0x58
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	440b      	add	r3, r1
 80027ae:	335c      	adds	r3, #92	; 0x5c
 80027b0:	2204      	movs	r2, #4
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	e009      	b.n	80027ca <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	335c      	adds	r3, #92	; 0x5c
 80027c6:	2202      	movs	r2, #2
 80027c8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027e0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027e8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f6:	461a      	mov	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4413      	add	r3, r2
 8002804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002808:	461a      	mov	r2, r3
 800280a:	2302      	movs	r3, #2
 800280c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	b2d8      	uxtb	r0, r3
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	440b      	add	r3, r1
 8002820:	335c      	adds	r3, #92	; 0x5c
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	4601      	mov	r1, r0
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff f8ea 	bl	8001a02 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800282e:	bf00      	nop
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	0c5b      	lsrs	r3, r3, #17
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800286c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d003      	beq.n	800287c <HCD_RXQLVL_IRQHandler+0x44>
 8002874:	2b05      	cmp	r3, #5
 8002876:	f000 8082 	beq.w	800297e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800287a:	e083      	b.n	8002984 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d07f      	beq.n	8002982 <HCD_RXQLVL_IRQHandler+0x14a>
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	440b      	add	r3, r1
 8002890:	3344      	adds	r3, #68	; 0x44
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d074      	beq.n	8002982 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	440b      	add	r3, r1
 80028aa:	3344      	adds	r3, #68	; 0x44
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	b292      	uxth	r2, r2
 80028b2:	4619      	mov	r1, r3
 80028b4:	f002 f81c 	bl	80048f0 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	440b      	add	r3, r1
 80028c6:	3344      	adds	r3, #68	; 0x44
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	18d1      	adds	r1, r2, r3
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4403      	add	r3, r0
 80028dc:	3344      	adds	r3, #68	; 0x44
 80028de:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	440b      	add	r3, r1
 80028ee:	334c      	adds	r3, #76	; 0x4c
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	18d1      	adds	r1, r2, r3
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4403      	add	r3, r0
 8002904:	334c      	adds	r3, #76	; 0x4c
 8002906:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	015a      	lsls	r2, r3, #5
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	4413      	add	r3, r2
 8002910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	4b1d      	ldr	r3, [pc, #116]	; (800298c <HCD_RXQLVL_IRQHandler+0x154>)
 8002918:	4013      	ands	r3, r2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d031      	beq.n	8002982 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	015a      	lsls	r2, r3, #5
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	4413      	add	r3, r2
 8002926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002934:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800293c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	4413      	add	r3, r2
 8002946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294a:	461a      	mov	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	440b      	add	r3, r1
 800295e:	3350      	adds	r3, #80	; 0x50
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	f083 0301 	eor.w	r3, r3, #1
 8002966:	b2d8      	uxtb	r0, r3
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	440b      	add	r3, r1
 8002976:	3350      	adds	r3, #80	; 0x50
 8002978:	4602      	mov	r2, r0
 800297a:	701a      	strb	r2, [r3, #0]
      break;
 800297c:	e001      	b.n	8002982 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800297e:	bf00      	nop
 8002980:	e000      	b.n	8002984 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002982:	bf00      	nop
  }
}
 8002984:	bf00      	nop
 8002986:	3728      	adds	r7, #40	; 0x28
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	1ff80000 	.word	0x1ff80000

08002990 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80029bc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d113      	bne.n	80029f0 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d10a      	bne.n	80029e8 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699a      	ldr	r2, [r3, #24]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80029e0:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe ffe5 	bl	80019b2 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f043 0302 	orr.w	r3, r3, #2
 80029ee:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d147      	bne.n	8002a8a <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f043 0308 	orr.w	r3, r3, #8
 8002a00:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d129      	bne.n	8002a60 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d113      	bne.n	8002a3c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002a1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a1e:	d106      	bne.n	8002a2e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2102      	movs	r1, #2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f002 f89c 	bl	8004b64 <USB_InitFSLSPClkSel>
 8002a2c:	e011      	b.n	8002a52 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2101      	movs	r1, #1
 8002a34:	4618      	mov	r0, r3
 8002a36:	f002 f895 	bl	8004b64 <USB_InitFSLSPClkSel>
 8002a3a:	e00a      	b.n	8002a52 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d106      	bne.n	8002a52 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002a50:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe ffc1 	bl	80019da <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7fe ffaa 	bl	80019b2 <HAL_HCD_Connect_Callback>
 8002a5e:	e014      	b.n	8002a8a <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7fe ffc4 	bl	80019ee <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002a74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002a78:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699a      	ldr	r2, [r3, #24]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002a88:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d103      	bne.n	8002a9c <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f043 0320 	orr.w	r3, r3, #32
 8002a9a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	6013      	str	r3, [r2, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e11f      	b.n	8002d02 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7fe f892 	bl	8000c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2224      	movs	r2, #36	; 0x24
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0201 	bic.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b14:	f001 f9de 	bl	8003ed4 <HAL_RCC_GetPCLK1Freq>
 8002b18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	4a7b      	ldr	r2, [pc, #492]	; (8002d0c <HAL_I2C_Init+0x25c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d807      	bhi.n	8002b34 <HAL_I2C_Init+0x84>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4a7a      	ldr	r2, [pc, #488]	; (8002d10 <HAL_I2C_Init+0x260>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	bf94      	ite	ls
 8002b2c:	2301      	movls	r3, #1
 8002b2e:	2300      	movhi	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	e006      	b.n	8002b42 <HAL_I2C_Init+0x92>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4a77      	ldr	r2, [pc, #476]	; (8002d14 <HAL_I2C_Init+0x264>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	bf94      	ite	ls
 8002b3c:	2301      	movls	r3, #1
 8002b3e:	2300      	movhi	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e0db      	b.n	8002d02 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4a72      	ldr	r2, [pc, #456]	; (8002d18 <HAL_I2C_Init+0x268>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	0c9b      	lsrs	r3, r3, #18
 8002b54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4a64      	ldr	r2, [pc, #400]	; (8002d0c <HAL_I2C_Init+0x25c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d802      	bhi.n	8002b84 <HAL_I2C_Init+0xd4>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	3301      	adds	r3, #1
 8002b82:	e009      	b.n	8002b98 <HAL_I2C_Init+0xe8>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b8a:	fb02 f303 	mul.w	r3, r2, r3
 8002b8e:	4a63      	ldr	r2, [pc, #396]	; (8002d1c <HAL_I2C_Init+0x26c>)
 8002b90:	fba2 2303 	umull	r2, r3, r2, r3
 8002b94:	099b      	lsrs	r3, r3, #6
 8002b96:	3301      	adds	r3, #1
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002baa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4956      	ldr	r1, [pc, #344]	; (8002d0c <HAL_I2C_Init+0x25c>)
 8002bb4:	428b      	cmp	r3, r1
 8002bb6:	d80d      	bhi.n	8002bd4 <HAL_I2C_Init+0x124>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1e59      	subs	r1, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	bf38      	it	cc
 8002bd0:	2304      	movcc	r3, #4
 8002bd2:	e04f      	b.n	8002c74 <HAL_I2C_Init+0x1c4>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d111      	bne.n	8002c00 <HAL_I2C_Init+0x150>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1e58      	subs	r0, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	440b      	add	r3, r1
 8002bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e012      	b.n	8002c26 <HAL_I2C_Init+0x176>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1e58      	subs	r0, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	0099      	lsls	r1, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c16:	3301      	adds	r3, #1
 8002c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_Init+0x17e>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e022      	b.n	8002c74 <HAL_I2C_Init+0x1c4>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10e      	bne.n	8002c54 <HAL_I2C_Init+0x1a4>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1e58      	subs	r0, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6859      	ldr	r1, [r3, #4]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	440b      	add	r3, r1
 8002c44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c48:	3301      	adds	r3, #1
 8002c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c52:	e00f      	b.n	8002c74 <HAL_I2C_Init+0x1c4>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1e58      	subs	r0, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6859      	ldr	r1, [r3, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	0099      	lsls	r1, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	6809      	ldr	r1, [r1, #0]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69da      	ldr	r2, [r3, #28]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ca2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6911      	ldr	r1, [r2, #16]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68d2      	ldr	r2, [r2, #12]
 8002cae:	4311      	orrs	r1, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	000186a0 	.word	0x000186a0
 8002d10:	001e847f 	.word	0x001e847f
 8002d14:	003d08ff 	.word	0x003d08ff
 8002d18:	431bde83 	.word	0x431bde83
 8002d1c:	10624dd3 	.word	0x10624dd3

08002d20 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e128      	b.n	8002f84 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a90      	ldr	r2, [pc, #576]	; (8002f8c <HAL_I2S_Init+0x26c>)
 8002d4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7fd ff9f 	bl	8000c90 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2202      	movs	r2, #2
 8002d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002d68:	f023 030f 	bic.w	r3, r3, #15
 8002d6c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2202      	movs	r2, #2
 8002d74:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d060      	beq.n	8002e40 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d102      	bne.n	8002d8c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002d86:	2310      	movs	r3, #16
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	e001      	b.n	8002d90 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002d8c:	2320      	movs	r3, #32
 8002d8e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d802      	bhi.n	8002d9e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002d9e:	2001      	movs	r0, #1
 8002da0:	f001 f9e2 	bl	8004168 <HAL_RCCEx_GetPeriphCLKFreq>
 8002da4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dae:	d125      	bne.n	8002dfc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d010      	beq.n	8002dda <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	461a      	mov	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd4:	3305      	adds	r3, #5
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	e01f      	b.n	8002e1a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	461a      	mov	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df6:	3305      	adds	r3, #5
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	e00e      	b.n	8002e1a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	3305      	adds	r3, #5
 8002e18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4a5c      	ldr	r2, [pc, #368]	; (8002f90 <HAL_I2S_Init+0x270>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	08db      	lsrs	r3, r3, #3
 8002e24:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	085b      	lsrs	r3, r3, #1
 8002e36:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	e003      	b.n	8002e48 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002e40:	2302      	movs	r3, #2
 8002e42:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d902      	bls.n	8002e54 <HAL_I2S_Init+0x134>
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	2bff      	cmp	r3, #255	; 0xff
 8002e52:	d907      	bls.n	8002e64 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e58:	f043 0210 	orr.w	r2, r3, #16
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e08f      	b.n	8002f84 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	ea42 0103 	orr.w	r1, r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e82:	f023 030f 	bic.w	r3, r3, #15
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6851      	ldr	r1, [r2, #4]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6892      	ldr	r2, [r2, #8]
 8002e8e:	4311      	orrs	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	68d2      	ldr	r2, [r2, #12]
 8002e94:	4311      	orrs	r1, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6992      	ldr	r2, [r2, #24]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ea6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d161      	bne.n	8002f74 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a38      	ldr	r2, [pc, #224]	; (8002f94 <HAL_I2S_Init+0x274>)
 8002eb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a37      	ldr	r2, [pc, #220]	; (8002f98 <HAL_I2S_Init+0x278>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d101      	bne.n	8002ec4 <HAL_I2S_Init+0x1a4>
 8002ec0:	4b36      	ldr	r3, [pc, #216]	; (8002f9c <HAL_I2S_Init+0x27c>)
 8002ec2:	e001      	b.n	8002ec8 <HAL_I2S_Init+0x1a8>
 8002ec4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	4932      	ldr	r1, [pc, #200]	; (8002f98 <HAL_I2S_Init+0x278>)
 8002ed0:	428a      	cmp	r2, r1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_I2S_Init+0x1b8>
 8002ed4:	4a31      	ldr	r2, [pc, #196]	; (8002f9c <HAL_I2S_Init+0x27c>)
 8002ed6:	e001      	b.n	8002edc <HAL_I2S_Init+0x1bc>
 8002ed8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002edc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ee0:	f023 030f 	bic.w	r3, r3, #15
 8002ee4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a2b      	ldr	r2, [pc, #172]	; (8002f98 <HAL_I2S_Init+0x278>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <HAL_I2S_Init+0x1d4>
 8002ef0:	4b2a      	ldr	r3, [pc, #168]	; (8002f9c <HAL_I2S_Init+0x27c>)
 8002ef2:	e001      	b.n	8002ef8 <HAL_I2S_Init+0x1d8>
 8002ef4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ef8:	2202      	movs	r2, #2
 8002efa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a25      	ldr	r2, [pc, #148]	; (8002f98 <HAL_I2S_Init+0x278>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d101      	bne.n	8002f0a <HAL_I2S_Init+0x1ea>
 8002f06:	4b25      	ldr	r3, [pc, #148]	; (8002f9c <HAL_I2S_Init+0x27c>)
 8002f08:	e001      	b.n	8002f0e <HAL_I2S_Init+0x1ee>
 8002f0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f1a:	d003      	beq.n	8002f24 <HAL_I2S_Init+0x204>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d103      	bne.n	8002f2c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	e001      	b.n	8002f30 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	b299      	uxth	r1, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002f46:	4303      	orrs	r3, r0
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	430b      	orrs	r3, r1
 8002f4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	897b      	ldrh	r3, [r7, #10]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f5c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a0d      	ldr	r2, [pc, #52]	; (8002f98 <HAL_I2S_Init+0x278>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d101      	bne.n	8002f6c <HAL_I2S_Init+0x24c>
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <HAL_I2S_Init+0x27c>)
 8002f6a:	e001      	b.n	8002f70 <HAL_I2S_Init+0x250>
 8002f6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f70:	897a      	ldrh	r2, [r7, #10]
 8002f72:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3720      	adds	r7, #32
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	08003097 	.word	0x08003097
 8002f90:	cccccccd 	.word	0xcccccccd
 8002f94:	080031ad 	.word	0x080031ad
 8002f98:	40003800 	.word	0x40003800
 8002f9c:	40003400 	.word	0x40003400

08002fa0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	881a      	ldrh	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	1c9a      	adds	r2, r3, #2
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10e      	bne.n	8003030 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003020:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff ffb8 	bl	8002fa0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	b292      	uxth	r2, r2
 800304c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	1c9a      	adds	r2, r3, #2
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10e      	bne.n	800308e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800307e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff ff93 	bl	8002fb4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b086      	sub	sp, #24
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d13a      	bne.n	8003128 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d109      	bne.n	80030d0 <I2S_IRQHandler+0x3a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c6:	2b40      	cmp	r3, #64	; 0x40
 80030c8:	d102      	bne.n	80030d0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff ffb4 	bl	8003038 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d6:	2b40      	cmp	r3, #64	; 0x40
 80030d8:	d126      	bne.n	8003128 <I2S_IRQHandler+0x92>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 0320 	and.w	r3, r3, #32
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d11f      	bne.n	8003128 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80030f8:	2300      	movs	r3, #0
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	f043 0202 	orr.w	r2, r3, #2
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff ff50 	bl	8002fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b03      	cmp	r3, #3
 8003132:	d136      	bne.n	80031a2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b02      	cmp	r3, #2
 800313c:	d109      	bne.n	8003152 <I2S_IRQHandler+0xbc>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003148:	2b80      	cmp	r3, #128	; 0x80
 800314a:	d102      	bne.n	8003152 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff ff45 	bl	8002fdc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b08      	cmp	r3, #8
 800315a:	d122      	bne.n	80031a2 <I2S_IRQHandler+0x10c>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b20      	cmp	r3, #32
 8003168:	d11b      	bne.n	80031a2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003178:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003194:	f043 0204 	orr.w	r2, r3, #4
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ff13 	bl	8002fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031a2:	bf00      	nop
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4aa2      	ldr	r2, [pc, #648]	; (800344c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d101      	bne.n	80031ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80031c6:	4ba2      	ldr	r3, [pc, #648]	; (8003450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031c8:	e001      	b.n	80031ce <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80031ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a9b      	ldr	r2, [pc, #620]	; (800344c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d101      	bne.n	80031e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80031e4:	4b9a      	ldr	r3, [pc, #616]	; (8003450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031e6:	e001      	b.n	80031ec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80031e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031f8:	d004      	beq.n	8003204 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f040 8099 	bne.w	8003336 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b02      	cmp	r3, #2
 800320c:	d107      	bne.n	800321e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f925 	bl	8003468 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b01      	cmp	r3, #1
 8003226:	d107      	bne.n	8003238 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f9c8 	bl	80035c8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323e:	2b40      	cmp	r3, #64	; 0x40
 8003240:	d13a      	bne.n	80032b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b00      	cmp	r3, #0
 800324a:	d035      	beq.n	80032b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a7e      	ldr	r2, [pc, #504]	; (800344c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d101      	bne.n	800325a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003256:	4b7e      	ldr	r3, [pc, #504]	; (8003450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003258:	e001      	b.n	800325e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800325a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4979      	ldr	r1, [pc, #484]	; (800344c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003266:	428b      	cmp	r3, r1
 8003268:	d101      	bne.n	800326e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800326a:	4b79      	ldr	r3, [pc, #484]	; (8003450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800326c:	e001      	b.n	8003272 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800326e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003272:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003276:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003286:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032aa:	f043 0202 	orr.w	r2, r3, #2
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff fe88 	bl	8002fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b08      	cmp	r3, #8
 80032c0:	f040 80be 	bne.w	8003440 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 80b8 	beq.w	8003440 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a59      	ldr	r2, [pc, #356]	; (800344c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d101      	bne.n	80032ee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80032ea:	4b59      	ldr	r3, [pc, #356]	; (8003450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80032ec:	e001      	b.n	80032f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80032ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4954      	ldr	r1, [pc, #336]	; (800344c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80032fa:	428b      	cmp	r3, r1
 80032fc:	d101      	bne.n	8003302 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80032fe:	4b54      	ldr	r3, [pc, #336]	; (8003450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003300:	e001      	b.n	8003306 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003302:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003306:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800330a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800330c:	2300      	movs	r3, #0
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	f043 0204 	orr.w	r2, r3, #4
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff fe4a 	bl	8002fc8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003334:	e084      	b.n	8003440 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b02      	cmp	r3, #2
 800333e:	d107      	bne.n	8003350 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f8be 	bl	80034cc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b01      	cmp	r3, #1
 8003358:	d107      	bne.n	800336a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f8fd 	bl	8003564 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003370:	2b40      	cmp	r3, #64	; 0x40
 8003372:	d12f      	bne.n	80033d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b00      	cmp	r3, #0
 800337c:	d02a      	beq.n	80033d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800338c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a2e      	ldr	r2, [pc, #184]	; (800344c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d101      	bne.n	800339c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003398:	4b2d      	ldr	r3, [pc, #180]	; (8003450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800339a:	e001      	b.n	80033a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800339c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4929      	ldr	r1, [pc, #164]	; (800344c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033a8:	428b      	cmp	r3, r1
 80033aa:	d101      	bne.n	80033b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80033ac:	4b28      	ldr	r3, [pc, #160]	; (8003450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033ae:	e001      	b.n	80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80033b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c6:	f043 0202 	orr.w	r2, r3, #2
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff fdfa 	bl	8002fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d131      	bne.n	8003442 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d02c      	beq.n	8003442 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a17      	ldr	r2, [pc, #92]	; (800344c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80033f2:	4b17      	ldr	r3, [pc, #92]	; (8003450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033f4:	e001      	b.n	80033fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80033f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4912      	ldr	r1, [pc, #72]	; (800344c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003402:	428b      	cmp	r3, r1
 8003404:	d101      	bne.n	800340a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003406:	4b12      	ldr	r3, [pc, #72]	; (8003450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003408:	e001      	b.n	800340e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800340a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800340e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003412:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003422:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	f043 0204 	orr.w	r2, r3, #4
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff fdc5 	bl	8002fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800343e:	e000      	b.n	8003442 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003440:	bf00      	nop
}
 8003442:	bf00      	nop
 8003444:	3720      	adds	r7, #32
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40003800 	.word	0x40003800
 8003450:	40003400 	.word	0x40003400

08003454 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	1c99      	adds	r1, r3, #2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6251      	str	r1, [r2, #36]	; 0x24
 800347a:	881a      	ldrh	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d113      	bne.n	80034c2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d106      	bne.n	80034c2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff ffc9 	bl	8003454 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	1c99      	adds	r1, r3, #2
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6251      	str	r1, [r2, #36]	; 0x24
 80034de:	8819      	ldrh	r1, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a1d      	ldr	r2, [pc, #116]	; (800355c <I2SEx_TxISR_I2SExt+0x90>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d101      	bne.n	80034ee <I2SEx_TxISR_I2SExt+0x22>
 80034ea:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <I2SEx_TxISR_I2SExt+0x94>)
 80034ec:	e001      	b.n	80034f2 <I2SEx_TxISR_I2SExt+0x26>
 80034ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034f2:	460a      	mov	r2, r1
 80034f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d121      	bne.n	8003552 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a12      	ldr	r2, [pc, #72]	; (800355c <I2SEx_TxISR_I2SExt+0x90>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <I2SEx_TxISR_I2SExt+0x50>
 8003518:	4b11      	ldr	r3, [pc, #68]	; (8003560 <I2SEx_TxISR_I2SExt+0x94>)
 800351a:	e001      	b.n	8003520 <I2SEx_TxISR_I2SExt+0x54>
 800351c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	490d      	ldr	r1, [pc, #52]	; (800355c <I2SEx_TxISR_I2SExt+0x90>)
 8003528:	428b      	cmp	r3, r1
 800352a:	d101      	bne.n	8003530 <I2SEx_TxISR_I2SExt+0x64>
 800352c:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <I2SEx_TxISR_I2SExt+0x94>)
 800352e:	e001      	b.n	8003534 <I2SEx_TxISR_I2SExt+0x68>
 8003530:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003534:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003538:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d106      	bne.n	8003552 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff ff81 	bl	8003454 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40003800 	.word	0x40003800
 8003560:	40003400 	.word	0x40003400

08003564 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68d8      	ldr	r0, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	1c99      	adds	r1, r3, #2
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800357c:	b282      	uxth	r2, r0
 800357e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003584:	b29b      	uxth	r3, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	b29a      	uxth	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d113      	bne.n	80035c0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035a6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff ff4a 	bl	8003454 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035c0:	bf00      	nop
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a20      	ldr	r2, [pc, #128]	; (8003658 <I2SEx_RxISR_I2SExt+0x90>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d101      	bne.n	80035de <I2SEx_RxISR_I2SExt+0x16>
 80035da:	4b20      	ldr	r3, [pc, #128]	; (800365c <I2SEx_RxISR_I2SExt+0x94>)
 80035dc:	e001      	b.n	80035e2 <I2SEx_RxISR_I2SExt+0x1a>
 80035de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e2:	68d8      	ldr	r0, [r3, #12]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	1c99      	adds	r1, r3, #2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	62d1      	str	r1, [r2, #44]	; 0x2c
 80035ee:	b282      	uxth	r2, r0
 80035f0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d121      	bne.n	800364e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a12      	ldr	r2, [pc, #72]	; (8003658 <I2SEx_RxISR_I2SExt+0x90>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d101      	bne.n	8003618 <I2SEx_RxISR_I2SExt+0x50>
 8003614:	4b11      	ldr	r3, [pc, #68]	; (800365c <I2SEx_RxISR_I2SExt+0x94>)
 8003616:	e001      	b.n	800361c <I2SEx_RxISR_I2SExt+0x54>
 8003618:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	490d      	ldr	r1, [pc, #52]	; (8003658 <I2SEx_RxISR_I2SExt+0x90>)
 8003624:	428b      	cmp	r3, r1
 8003626:	d101      	bne.n	800362c <I2SEx_RxISR_I2SExt+0x64>
 8003628:	4b0c      	ldr	r3, [pc, #48]	; (800365c <I2SEx_RxISR_I2SExt+0x94>)
 800362a:	e001      	b.n	8003630 <I2SEx_RxISR_I2SExt+0x68>
 800362c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003630:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003634:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d106      	bne.n	800364e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7ff ff03 	bl	8003454 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40003800 	.word	0x40003800
 800365c:	40003400 	.word	0x40003400

08003660 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e25b      	b.n	8003b2a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d075      	beq.n	800376a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800367e:	4ba3      	ldr	r3, [pc, #652]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
 8003686:	2b04      	cmp	r3, #4
 8003688:	d00c      	beq.n	80036a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800368a:	4ba0      	ldr	r3, [pc, #640]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003692:	2b08      	cmp	r3, #8
 8003694:	d112      	bne.n	80036bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003696:	4b9d      	ldr	r3, [pc, #628]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a2:	d10b      	bne.n	80036bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a4:	4b99      	ldr	r3, [pc, #612]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d05b      	beq.n	8003768 <HAL_RCC_OscConfig+0x108>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d157      	bne.n	8003768 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e236      	b.n	8003b2a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c4:	d106      	bne.n	80036d4 <HAL_RCC_OscConfig+0x74>
 80036c6:	4b91      	ldr	r3, [pc, #580]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a90      	ldr	r2, [pc, #576]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 80036cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	e01d      	b.n	8003710 <HAL_RCC_OscConfig+0xb0>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036dc:	d10c      	bne.n	80036f8 <HAL_RCC_OscConfig+0x98>
 80036de:	4b8b      	ldr	r3, [pc, #556]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a8a      	ldr	r2, [pc, #552]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	4b88      	ldr	r3, [pc, #544]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a87      	ldr	r2, [pc, #540]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	e00b      	b.n	8003710 <HAL_RCC_OscConfig+0xb0>
 80036f8:	4b84      	ldr	r3, [pc, #528]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a83      	ldr	r2, [pc, #524]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 80036fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	4b81      	ldr	r3, [pc, #516]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a80      	ldr	r2, [pc, #512]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 800370a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800370e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d013      	beq.n	8003740 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003718:	f7fd fd2e 	bl	8001178 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003720:	f7fd fd2a 	bl	8001178 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	; 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e1fb      	b.n	8003b2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003732:	4b76      	ldr	r3, [pc, #472]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0xc0>
 800373e:	e014      	b.n	800376a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003740:	f7fd fd1a 	bl	8001178 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003748:	f7fd fd16 	bl	8001178 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	; 0x64
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e1e7      	b.n	8003b2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375a:	4b6c      	ldr	r3, [pc, #432]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0xe8>
 8003766:	e000      	b.n	800376a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d063      	beq.n	800383e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003776:	4b65      	ldr	r3, [pc, #404]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00b      	beq.n	800379a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003782:	4b62      	ldr	r3, [pc, #392]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800378a:	2b08      	cmp	r3, #8
 800378c:	d11c      	bne.n	80037c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800378e:	4b5f      	ldr	r3, [pc, #380]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d116      	bne.n	80037c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379a:	4b5c      	ldr	r3, [pc, #368]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <HAL_RCC_OscConfig+0x152>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d001      	beq.n	80037b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e1bb      	b.n	8003b2a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b2:	4b56      	ldr	r3, [pc, #344]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4952      	ldr	r1, [pc, #328]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037c6:	e03a      	b.n	800383e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d020      	beq.n	8003812 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037d0:	4b4f      	ldr	r3, [pc, #316]	; (8003910 <HAL_RCC_OscConfig+0x2b0>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d6:	f7fd fccf 	bl	8001178 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037de:	f7fd fccb 	bl	8001178 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e19c      	b.n	8003b2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f0:	4b46      	ldr	r3, [pc, #280]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0f0      	beq.n	80037de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fc:	4b43      	ldr	r3, [pc, #268]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4940      	ldr	r1, [pc, #256]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 800380c:	4313      	orrs	r3, r2
 800380e:	600b      	str	r3, [r1, #0]
 8003810:	e015      	b.n	800383e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003812:	4b3f      	ldr	r3, [pc, #252]	; (8003910 <HAL_RCC_OscConfig+0x2b0>)
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003818:	f7fd fcae 	bl	8001178 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003820:	f7fd fcaa 	bl	8001178 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e17b      	b.n	8003b2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003832:	4b36      	ldr	r3, [pc, #216]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d030      	beq.n	80038ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d016      	beq.n	8003880 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003852:	4b30      	ldr	r3, [pc, #192]	; (8003914 <HAL_RCC_OscConfig+0x2b4>)
 8003854:	2201      	movs	r2, #1
 8003856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003858:	f7fd fc8e 	bl	8001178 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003860:	f7fd fc8a 	bl	8001178 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e15b      	b.n	8003b2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003872:	4b26      	ldr	r3, [pc, #152]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 8003874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0x200>
 800387e:	e015      	b.n	80038ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003880:	4b24      	ldr	r3, [pc, #144]	; (8003914 <HAL_RCC_OscConfig+0x2b4>)
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003886:	f7fd fc77 	bl	8001178 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800388e:	f7fd fc73 	bl	8001178 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e144      	b.n	8003b2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a0:	4b1a      	ldr	r3, [pc, #104]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 80038a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1f0      	bne.n	800388e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80a0 	beq.w	80039fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ba:	2300      	movs	r3, #0
 80038bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038be:	4b13      	ldr	r3, [pc, #76]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10f      	bne.n	80038ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	4b0f      	ldr	r3, [pc, #60]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	4a0e      	ldr	r2, [pc, #56]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d8:	6413      	str	r3, [r2, #64]	; 0x40
 80038da:	4b0c      	ldr	r3, [pc, #48]	; (800390c <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e2:	60bb      	str	r3, [r7, #8]
 80038e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e6:	2301      	movs	r3, #1
 80038e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ea:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <HAL_RCC_OscConfig+0x2b8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d121      	bne.n	800393a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038f6:	4b08      	ldr	r3, [pc, #32]	; (8003918 <HAL_RCC_OscConfig+0x2b8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a07      	ldr	r2, [pc, #28]	; (8003918 <HAL_RCC_OscConfig+0x2b8>)
 80038fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003902:	f7fd fc39 	bl	8001178 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003908:	e011      	b.n	800392e <HAL_RCC_OscConfig+0x2ce>
 800390a:	bf00      	nop
 800390c:	40023800 	.word	0x40023800
 8003910:	42470000 	.word	0x42470000
 8003914:	42470e80 	.word	0x42470e80
 8003918:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391c:	f7fd fc2c 	bl	8001178 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e0fd      	b.n	8003b2a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392e:	4b81      	ldr	r3, [pc, #516]	; (8003b34 <HAL_RCC_OscConfig+0x4d4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d106      	bne.n	8003950 <HAL_RCC_OscConfig+0x2f0>
 8003942:	4b7d      	ldr	r3, [pc, #500]	; (8003b38 <HAL_RCC_OscConfig+0x4d8>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003946:	4a7c      	ldr	r2, [pc, #496]	; (8003b38 <HAL_RCC_OscConfig+0x4d8>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	6713      	str	r3, [r2, #112]	; 0x70
 800394e:	e01c      	b.n	800398a <HAL_RCC_OscConfig+0x32a>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b05      	cmp	r3, #5
 8003956:	d10c      	bne.n	8003972 <HAL_RCC_OscConfig+0x312>
 8003958:	4b77      	ldr	r3, [pc, #476]	; (8003b38 <HAL_RCC_OscConfig+0x4d8>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395c:	4a76      	ldr	r2, [pc, #472]	; (8003b38 <HAL_RCC_OscConfig+0x4d8>)
 800395e:	f043 0304 	orr.w	r3, r3, #4
 8003962:	6713      	str	r3, [r2, #112]	; 0x70
 8003964:	4b74      	ldr	r3, [pc, #464]	; (8003b38 <HAL_RCC_OscConfig+0x4d8>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	4a73      	ldr	r2, [pc, #460]	; (8003b38 <HAL_RCC_OscConfig+0x4d8>)
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	6713      	str	r3, [r2, #112]	; 0x70
 8003970:	e00b      	b.n	800398a <HAL_RCC_OscConfig+0x32a>
 8003972:	4b71      	ldr	r3, [pc, #452]	; (8003b38 <HAL_RCC_OscConfig+0x4d8>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	4a70      	ldr	r2, [pc, #448]	; (8003b38 <HAL_RCC_OscConfig+0x4d8>)
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	6713      	str	r3, [r2, #112]	; 0x70
 800397e:	4b6e      	ldr	r3, [pc, #440]	; (8003b38 <HAL_RCC_OscConfig+0x4d8>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003982:	4a6d      	ldr	r2, [pc, #436]	; (8003b38 <HAL_RCC_OscConfig+0x4d8>)
 8003984:	f023 0304 	bic.w	r3, r3, #4
 8003988:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d015      	beq.n	80039be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003992:	f7fd fbf1 	bl	8001178 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003998:	e00a      	b.n	80039b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800399a:	f7fd fbed 	bl	8001178 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e0bc      	b.n	8003b2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b0:	4b61      	ldr	r3, [pc, #388]	; (8003b38 <HAL_RCC_OscConfig+0x4d8>)
 80039b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0ee      	beq.n	800399a <HAL_RCC_OscConfig+0x33a>
 80039bc:	e014      	b.n	80039e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039be:	f7fd fbdb 	bl	8001178 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c4:	e00a      	b.n	80039dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c6:	f7fd fbd7 	bl	8001178 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e0a6      	b.n	8003b2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039dc:	4b56      	ldr	r3, [pc, #344]	; (8003b38 <HAL_RCC_OscConfig+0x4d8>)
 80039de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1ee      	bne.n	80039c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d105      	bne.n	80039fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ee:	4b52      	ldr	r3, [pc, #328]	; (8003b38 <HAL_RCC_OscConfig+0x4d8>)
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	4a51      	ldr	r2, [pc, #324]	; (8003b38 <HAL_RCC_OscConfig+0x4d8>)
 80039f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 8092 	beq.w	8003b28 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a04:	4b4c      	ldr	r3, [pc, #304]	; (8003b38 <HAL_RCC_OscConfig+0x4d8>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 030c 	and.w	r3, r3, #12
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d05c      	beq.n	8003aca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d141      	bne.n	8003a9c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a18:	4b48      	ldr	r3, [pc, #288]	; (8003b3c <HAL_RCC_OscConfig+0x4dc>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1e:	f7fd fbab 	bl	8001178 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a26:	f7fd fba7 	bl	8001178 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e078      	b.n	8003b2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a38:	4b3f      	ldr	r3, [pc, #252]	; (8003b38 <HAL_RCC_OscConfig+0x4d8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1f0      	bne.n	8003a26 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	69da      	ldr	r2, [r3, #28]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	019b      	lsls	r3, r3, #6
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	085b      	lsrs	r3, r3, #1
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	041b      	lsls	r3, r3, #16
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	061b      	lsls	r3, r3, #24
 8003a68:	4933      	ldr	r1, [pc, #204]	; (8003b38 <HAL_RCC_OscConfig+0x4d8>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a6e:	4b33      	ldr	r3, [pc, #204]	; (8003b3c <HAL_RCC_OscConfig+0x4dc>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a74:	f7fd fb80 	bl	8001178 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a7c:	f7fd fb7c 	bl	8001178 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e04d      	b.n	8003b2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8e:	4b2a      	ldr	r3, [pc, #168]	; (8003b38 <HAL_RCC_OscConfig+0x4d8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0x41c>
 8003a9a:	e045      	b.n	8003b28 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9c:	4b27      	ldr	r3, [pc, #156]	; (8003b3c <HAL_RCC_OscConfig+0x4dc>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa2:	f7fd fb69 	bl	8001178 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aaa:	f7fd fb65 	bl	8001178 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e036      	b.n	8003b2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abc:	4b1e      	ldr	r3, [pc, #120]	; (8003b38 <HAL_RCC_OscConfig+0x4d8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f0      	bne.n	8003aaa <HAL_RCC_OscConfig+0x44a>
 8003ac8:	e02e      	b.n	8003b28 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e029      	b.n	8003b2a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ad6:	4b18      	ldr	r3, [pc, #96]	; (8003b38 <HAL_RCC_OscConfig+0x4d8>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d11c      	bne.n	8003b24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d115      	bne.n	8003b24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003afe:	4013      	ands	r3, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d10d      	bne.n	8003b24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d106      	bne.n	8003b24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40007000 	.word	0x40007000
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	42470060 	.word	0x42470060

08003b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0cc      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b54:	4b68      	ldr	r3, [pc, #416]	; (8003cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d90c      	bls.n	8003b7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b62:	4b65      	ldr	r3, [pc, #404]	; (8003cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6a:	4b63      	ldr	r3, [pc, #396]	; (8003cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d001      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0b8      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d020      	beq.n	8003bca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b94:	4b59      	ldr	r3, [pc, #356]	; (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	4a58      	ldr	r2, [pc, #352]	; (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bac:	4b53      	ldr	r3, [pc, #332]	; (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	4a52      	ldr	r2, [pc, #328]	; (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb8:	4b50      	ldr	r3, [pc, #320]	; (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	494d      	ldr	r1, [pc, #308]	; (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d044      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d107      	bne.n	8003bee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bde:	4b47      	ldr	r3, [pc, #284]	; (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d119      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e07f      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d003      	beq.n	8003bfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d107      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bfe:	4b3f      	ldr	r3, [pc, #252]	; (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e06f      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0e:	4b3b      	ldr	r3, [pc, #236]	; (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e067      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c1e:	4b37      	ldr	r3, [pc, #220]	; (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f023 0203 	bic.w	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4934      	ldr	r1, [pc, #208]	; (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c30:	f7fd faa2 	bl	8001178 <HAL_GetTick>
 8003c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c36:	e00a      	b.n	8003c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c38:	f7fd fa9e 	bl	8001178 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e04f      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4e:	4b2b      	ldr	r3, [pc, #172]	; (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 020c 	and.w	r2, r3, #12
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d1eb      	bne.n	8003c38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c60:	4b25      	ldr	r3, [pc, #148]	; (8003cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 030f 	and.w	r3, r3, #15
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d20c      	bcs.n	8003c88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6e:	4b22      	ldr	r3, [pc, #136]	; (8003cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c76:	4b20      	ldr	r3, [pc, #128]	; (8003cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e032      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c94:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	4916      	ldr	r1, [pc, #88]	; (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cb2:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	490e      	ldr	r1, [pc, #56]	; (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cc6:	f000 f821 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 8003cca:	4601      	mov	r1, r0
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	091b      	lsrs	r3, r3, #4
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	4a0a      	ldr	r2, [pc, #40]	; (8003d00 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd8:	5cd3      	ldrb	r3, [r2, r3]
 8003cda:	fa21 f303 	lsr.w	r3, r1, r3
 8003cde:	4a09      	ldr	r2, [pc, #36]	; (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ce2:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fd f94a 	bl	8000f80 <HAL_InitTick>

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40023c00 	.word	0x40023c00
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	08006900 	.word	0x08006900
 8003d04:	20000000 	.word	0x20000000
 8003d08:	20000004 	.word	0x20000004

08003d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	607b      	str	r3, [r7, #4]
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d22:	4b63      	ldr	r3, [pc, #396]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d007      	beq.n	8003d3e <HAL_RCC_GetSysClockFreq+0x32>
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d008      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0x38>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f040 80b4 	bne.w	8003ea0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d38:	4b5e      	ldr	r3, [pc, #376]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d3a:	60bb      	str	r3, [r7, #8]
       break;
 8003d3c:	e0b3      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d3e:	4b5e      	ldr	r3, [pc, #376]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003d40:	60bb      	str	r3, [r7, #8]
      break;
 8003d42:	e0b0      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d44:	4b5a      	ldr	r3, [pc, #360]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d4e:	4b58      	ldr	r3, [pc, #352]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d04a      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d5a:	4b55      	ldr	r3, [pc, #340]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	099b      	lsrs	r3, r3, #6
 8003d60:	f04f 0400 	mov.w	r4, #0
 8003d64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	ea03 0501 	and.w	r5, r3, r1
 8003d70:	ea04 0602 	and.w	r6, r4, r2
 8003d74:	4629      	mov	r1, r5
 8003d76:	4632      	mov	r2, r6
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	f04f 0400 	mov.w	r4, #0
 8003d80:	0154      	lsls	r4, r2, #5
 8003d82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d86:	014b      	lsls	r3, r1, #5
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	1b49      	subs	r1, r1, r5
 8003d8e:	eb62 0206 	sbc.w	r2, r2, r6
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	f04f 0400 	mov.w	r4, #0
 8003d9a:	0194      	lsls	r4, r2, #6
 8003d9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003da0:	018b      	lsls	r3, r1, #6
 8003da2:	1a5b      	subs	r3, r3, r1
 8003da4:	eb64 0402 	sbc.w	r4, r4, r2
 8003da8:	f04f 0100 	mov.w	r1, #0
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	00e2      	lsls	r2, r4, #3
 8003db2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003db6:	00d9      	lsls	r1, r3, #3
 8003db8:	460b      	mov	r3, r1
 8003dba:	4614      	mov	r4, r2
 8003dbc:	195b      	adds	r3, r3, r5
 8003dbe:	eb44 0406 	adc.w	r4, r4, r6
 8003dc2:	f04f 0100 	mov.w	r1, #0
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	0262      	lsls	r2, r4, #9
 8003dcc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003dd0:	0259      	lsls	r1, r3, #9
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4614      	mov	r4, r2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	4621      	mov	r1, r4
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f04f 0400 	mov.w	r4, #0
 8003de0:	461a      	mov	r2, r3
 8003de2:	4623      	mov	r3, r4
 8003de4:	f7fc f9fc 	bl	80001e0 <__aeabi_uldivmod>
 8003de8:	4603      	mov	r3, r0
 8003dea:	460c      	mov	r4, r1
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	e049      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df0:	4b2f      	ldr	r3, [pc, #188]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	099b      	lsrs	r3, r3, #6
 8003df6:	f04f 0400 	mov.w	r4, #0
 8003dfa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	ea03 0501 	and.w	r5, r3, r1
 8003e06:	ea04 0602 	and.w	r6, r4, r2
 8003e0a:	4629      	mov	r1, r5
 8003e0c:	4632      	mov	r2, r6
 8003e0e:	f04f 0300 	mov.w	r3, #0
 8003e12:	f04f 0400 	mov.w	r4, #0
 8003e16:	0154      	lsls	r4, r2, #5
 8003e18:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e1c:	014b      	lsls	r3, r1, #5
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4622      	mov	r2, r4
 8003e22:	1b49      	subs	r1, r1, r5
 8003e24:	eb62 0206 	sbc.w	r2, r2, r6
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	f04f 0400 	mov.w	r4, #0
 8003e30:	0194      	lsls	r4, r2, #6
 8003e32:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e36:	018b      	lsls	r3, r1, #6
 8003e38:	1a5b      	subs	r3, r3, r1
 8003e3a:	eb64 0402 	sbc.w	r4, r4, r2
 8003e3e:	f04f 0100 	mov.w	r1, #0
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	00e2      	lsls	r2, r4, #3
 8003e48:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e4c:	00d9      	lsls	r1, r3, #3
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4614      	mov	r4, r2
 8003e52:	195b      	adds	r3, r3, r5
 8003e54:	eb44 0406 	adc.w	r4, r4, r6
 8003e58:	f04f 0100 	mov.w	r1, #0
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	02a2      	lsls	r2, r4, #10
 8003e62:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e66:	0299      	lsls	r1, r3, #10
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4614      	mov	r4, r2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	4621      	mov	r1, r4
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f04f 0400 	mov.w	r4, #0
 8003e76:	461a      	mov	r2, r3
 8003e78:	4623      	mov	r3, r4
 8003e7a:	f7fc f9b1 	bl	80001e0 <__aeabi_uldivmod>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	460c      	mov	r4, r1
 8003e82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e84:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	0c1b      	lsrs	r3, r3, #16
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	3301      	adds	r3, #1
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	60bb      	str	r3, [r7, #8]
      break;
 8003e9e:	e002      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ea0:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003ea2:	60bb      	str	r3, [r7, #8]
      break;
 8003ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	00f42400 	.word	0x00f42400
 8003eb8:	007a1200 	.word	0x007a1200

08003ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec0:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	20000000 	.word	0x20000000

08003ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ed8:	f7ff fff0 	bl	8003ebc <HAL_RCC_GetHCLKFreq>
 8003edc:	4601      	mov	r1, r0
 8003ede:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	0a9b      	lsrs	r3, r3, #10
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	4a03      	ldr	r2, [pc, #12]	; (8003ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eea:	5cd3      	ldrb	r3, [r2, r3]
 8003eec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	08006910 	.word	0x08006910

08003efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f00:	f7ff ffdc 	bl	8003ebc <HAL_RCC_GetHCLKFreq>
 8003f04:	4601      	mov	r1, r0
 8003f06:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	0b5b      	lsrs	r3, r3, #13
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	4a03      	ldr	r2, [pc, #12]	; (8003f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f12:	5cd3      	ldrb	r3, [r2, r3]
 8003f14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	08006910 	.word	0x08006910

08003f24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	220f      	movs	r2, #15
 8003f32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f34:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <HAL_RCC_GetClockConfig+0x5c>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 0203 	and.w	r2, r3, #3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f40:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <HAL_RCC_GetClockConfig+0x5c>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <HAL_RCC_GetClockConfig+0x5c>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <HAL_RCC_GetClockConfig+0x5c>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	08db      	lsrs	r3, r3, #3
 8003f5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f66:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <HAL_RCC_GetClockConfig+0x60>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 020f 	and.w	r2, r3, #15
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	601a      	str	r2, [r3, #0]
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40023800 	.word	0x40023800
 8003f84:	40023c00 	.word	0x40023c00

08003f88 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d105      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d038      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fb0:	4b68      	ldr	r3, [pc, #416]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fb6:	f7fd f8df 	bl	8001178 <HAL_GetTick>
 8003fba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fbe:	f7fd f8db 	bl	8001178 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e0bd      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fd0:	4b61      	ldr	r3, [pc, #388]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1f0      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	019b      	lsls	r3, r3, #6
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	071b      	lsls	r3, r3, #28
 8003fee:	495a      	ldr	r1, [pc, #360]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ff6:	4b57      	ldr	r3, [pc, #348]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ffc:	f7fd f8bc 	bl	8001178 <HAL_GetTick>
 8004000:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004004:	f7fd f8b8 	bl	8001178 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e09a      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004016:	4b50      	ldr	r3, [pc, #320]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 8083 	beq.w	8004136 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	4b48      	ldr	r3, [pc, #288]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	4a47      	ldr	r2, [pc, #284]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403e:	6413      	str	r3, [r2, #64]	; 0x40
 8004040:	4b45      	ldr	r3, [pc, #276]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800404c:	4b43      	ldr	r3, [pc, #268]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a42      	ldr	r2, [pc, #264]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004056:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004058:	f7fd f88e 	bl	8001178 <HAL_GetTick>
 800405c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004060:	f7fd f88a 	bl	8001178 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e06c      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004072:	4b3a      	ldr	r3, [pc, #232]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800407e:	4b36      	ldr	r3, [pc, #216]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004086:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d02f      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x166>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	429a      	cmp	r2, r3
 800409a:	d028      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800409c:	4b2e      	ldr	r3, [pc, #184]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800409e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040a6:	4b2e      	ldr	r3, [pc, #184]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040a8:	2201      	movs	r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040ac:	4b2c      	ldr	r3, [pc, #176]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040b2:	4a29      	ldr	r2, [pc, #164]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040b8:	4b27      	ldr	r3, [pc, #156]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d114      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80040c4:	f7fd f858 	bl	8001178 <HAL_GetTick>
 80040c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ca:	e00a      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040cc:	f7fd f854 	bl	8001178 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040da:	4293      	cmp	r3, r2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e034      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e2:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0ee      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040fa:	d10d      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80040fc:	4b16      	ldr	r3, [pc, #88]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800410c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004110:	4911      	ldr	r1, [pc, #68]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004112:	4313      	orrs	r3, r2
 8004114:	608b      	str	r3, [r1, #8]
 8004116:	e005      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004118:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	4a0e      	ldr	r2, [pc, #56]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004122:	6093      	str	r3, [r2, #8]
 8004124:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004126:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004130:	4909      	ldr	r1, [pc, #36]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004132:	4313      	orrs	r3, r2
 8004134:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	7d1a      	ldrb	r2, [r3, #20]
 8004146:	4b07      	ldr	r3, [pc, #28]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004148:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	42470068 	.word	0x42470068
 8004158:	40023800 	.word	0x40023800
 800415c:	40007000 	.word	0x40007000
 8004160:	42470e40 	.word	0x42470e40
 8004164:	424711e0 	.word	0x424711e0

08004168 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d13f      	bne.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004186:	4b23      	ldr	r3, [pc, #140]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800418e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d004      	beq.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004196:	2b01      	cmp	r3, #1
 8004198:	d131      	bne.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800419a:	4b1f      	ldr	r3, [pc, #124]	; (8004218 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800419c:	617b      	str	r3, [r7, #20]
          break;
 800419e:	e031      	b.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041a0:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ac:	d109      	bne.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80041ae:	4b19      	ldr	r3, [pc, #100]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041b8:	4a18      	ldr	r2, [pc, #96]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80041ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	e008      	b.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80041c2:	4b14      	ldr	r3, [pc, #80]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041cc:	4a14      	ldr	r2, [pc, #80]	; (8004220 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80041ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d2:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80041d4:	4b0f      	ldr	r3, [pc, #60]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041da:	099b      	lsrs	r3, r3, #6
 80041dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	fb02 f303 	mul.w	r3, r2, r3
 80041e6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80041e8:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ee:	0f1b      	lsrs	r3, r3, #28
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fa:	617b      	str	r3, [r7, #20]
          break;
 80041fc:	e002      	b.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	617b      	str	r3, [r7, #20]
          break;
 8004202:	bf00      	nop
        }
      }
      break;
 8004204:	bf00      	nop
    }
  }
  return frequency;
 8004206:	697b      	ldr	r3, [r7, #20]
}
 8004208:	4618      	mov	r0, r3
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	40023800 	.word	0x40023800
 8004218:	00bb8000 	.word	0x00bb8000
 800421c:	007a1200 	.word	0x007a1200
 8004220:	00f42400 	.word	0x00f42400

08004224 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e056      	b.n	80042e4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d106      	bne.n	8004256 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7fc fdeb 	bl	8000e2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2202      	movs	r2, #2
 800425a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800426c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	431a      	orrs	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	ea42 0103 	orr.w	r1, r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	0c1b      	lsrs	r3, r3, #16
 80042b4:	f003 0104 	and.w	r1, r3, #4
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	69da      	ldr	r2, [r3, #28]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e01d      	b.n	800433a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f815 	bl	8004342 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f000 f968 	bl	8004600 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004356:	b480      	push	{r7}
 8004358:	b085      	sub	sp, #20
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0201 	orr.w	r2, r2, #1
 800436c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b06      	cmp	r3, #6
 800437e:	d007      	beq.n	8004390 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0201 	orr.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d122      	bne.n	80043fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d11b      	bne.n	80043fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f06f 0202 	mvn.w	r2, #2
 80043ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f8ee 	bl	80045c2 <HAL_TIM_IC_CaptureCallback>
 80043e6:	e005      	b.n	80043f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f8e0 	bl	80045ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f8f1 	bl	80045d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b04      	cmp	r3, #4
 8004406:	d122      	bne.n	800444e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b04      	cmp	r3, #4
 8004414:	d11b      	bne.n	800444e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f06f 0204 	mvn.w	r2, #4
 800441e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f8c4 	bl	80045c2 <HAL_TIM_IC_CaptureCallback>
 800443a:	e005      	b.n	8004448 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f8b6 	bl	80045ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f8c7 	bl	80045d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b08      	cmp	r3, #8
 800445a:	d122      	bne.n	80044a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b08      	cmp	r3, #8
 8004468:	d11b      	bne.n	80044a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f06f 0208 	mvn.w	r2, #8
 8004472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2204      	movs	r2, #4
 8004478:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f89a 	bl	80045c2 <HAL_TIM_IC_CaptureCallback>
 800448e:	e005      	b.n	800449c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f88c 	bl	80045ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f89d 	bl	80045d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	d122      	bne.n	80044f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b10      	cmp	r3, #16
 80044bc:	d11b      	bne.n	80044f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f06f 0210 	mvn.w	r2, #16
 80044c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2208      	movs	r2, #8
 80044cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f870 	bl	80045c2 <HAL_TIM_IC_CaptureCallback>
 80044e2:	e005      	b.n	80044f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f862 	bl	80045ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f873 	bl	80045d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b01      	cmp	r3, #1
 8004502:	d10e      	bne.n	8004522 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b01      	cmp	r3, #1
 8004510:	d107      	bne.n	8004522 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f06f 0201 	mvn.w	r2, #1
 800451a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7fc fb29 	bl	8000b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452c:	2b80      	cmp	r3, #128	; 0x80
 800452e:	d10e      	bne.n	800454e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	2b80      	cmp	r3, #128	; 0x80
 800453c:	d107      	bne.n	800454e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f8e3 	bl	8004714 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004558:	2b40      	cmp	r3, #64	; 0x40
 800455a:	d10e      	bne.n	800457a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d107      	bne.n	800457a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f838 	bl	80045ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	f003 0320 	and.w	r3, r3, #32
 8004584:	2b20      	cmp	r3, #32
 8004586:	d10e      	bne.n	80045a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b20      	cmp	r3, #32
 8004594:	d107      	bne.n	80045a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f06f 0220 	mvn.w	r2, #32
 800459e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f8ad 	bl	8004700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045a6:	bf00      	nop
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a34      	ldr	r2, [pc, #208]	; (80046e4 <TIM_Base_SetConfig+0xe4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00f      	beq.n	8004638 <TIM_Base_SetConfig+0x38>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461e:	d00b      	beq.n	8004638 <TIM_Base_SetConfig+0x38>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a31      	ldr	r2, [pc, #196]	; (80046e8 <TIM_Base_SetConfig+0xe8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d007      	beq.n	8004638 <TIM_Base_SetConfig+0x38>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a30      	ldr	r2, [pc, #192]	; (80046ec <TIM_Base_SetConfig+0xec>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_Base_SetConfig+0x38>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a2f      	ldr	r2, [pc, #188]	; (80046f0 <TIM_Base_SetConfig+0xf0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d108      	bne.n	800464a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a25      	ldr	r2, [pc, #148]	; (80046e4 <TIM_Base_SetConfig+0xe4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d01b      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004658:	d017      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a22      	ldr	r2, [pc, #136]	; (80046e8 <TIM_Base_SetConfig+0xe8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d013      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a21      	ldr	r2, [pc, #132]	; (80046ec <TIM_Base_SetConfig+0xec>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00f      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a20      	ldr	r2, [pc, #128]	; (80046f0 <TIM_Base_SetConfig+0xf0>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00b      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <TIM_Base_SetConfig+0xf4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d007      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a1e      	ldr	r2, [pc, #120]	; (80046f8 <TIM_Base_SetConfig+0xf8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d003      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a1d      	ldr	r2, [pc, #116]	; (80046fc <TIM_Base_SetConfig+0xfc>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d108      	bne.n	800469c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a08      	ldr	r2, [pc, #32]	; (80046e4 <TIM_Base_SetConfig+0xe4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d103      	bne.n	80046d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	615a      	str	r2, [r3, #20]
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40010000 	.word	0x40010000
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800
 80046f0:	40000c00 	.word	0x40000c00
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40014400 	.word	0x40014400
 80046fc:	40014800 	.word	0x40014800

08004700 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004728:	b084      	sub	sp, #16
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	f107 001c 	add.w	r0, r7, #28
 8004736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	2b01      	cmp	r3, #1
 800473e:	d122      	bne.n	8004786 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800476a:	2b01      	cmp	r3, #1
 800476c:	d105      	bne.n	800477a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f902 	bl	8004984 <USB_CoreReset>
 8004780:	4603      	mov	r3, r0
 8004782:	73fb      	strb	r3, [r7, #15]
 8004784:	e01a      	b.n	80047bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f8f6 	bl	8004984 <USB_CoreReset>
 8004798:	4603      	mov	r3, r0
 800479a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800479c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	639a      	str	r2, [r3, #56]	; 0x38
 80047ae:	e005      	b.n	80047bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d10b      	bne.n	80047da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f043 0206 	orr.w	r2, r3, #6
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f043 0220 	orr.w	r2, r3, #32
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047da:	7bfb      	ldrb	r3, [r7, #15]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047e6:	b004      	add	sp, #16
 80047e8:	4770      	bx	lr

080047ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f023 0201 	bic.w	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d106      	bne.n	8004838 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	60da      	str	r2, [r3, #12]
 8004836:	e00b      	b.n	8004850 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	60da      	str	r2, [r3, #12]
 800484a:	e001      	b.n	8004850 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e003      	b.n	8004858 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004850:	2032      	movs	r0, #50	; 0x32
 8004852:	f7fc fc9d 	bl	8001190 <HAL_Delay>

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	019b      	lsls	r3, r3, #6
 8004872:	f043 0220 	orr.w	r2, r3, #32
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3301      	adds	r3, #1
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4a09      	ldr	r2, [pc, #36]	; (80048a8 <USB_FlushTxFifo+0x48>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d901      	bls.n	800488c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e006      	b.n	800489a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	2b20      	cmp	r3, #32
 8004896:	d0f0      	beq.n	800487a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	00030d40 	.word	0x00030d40

080048ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2210      	movs	r2, #16
 80048bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3301      	adds	r3, #1
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4a09      	ldr	r2, [pc, #36]	; (80048ec <USB_FlushRxFifo+0x40>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d901      	bls.n	80048d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e006      	b.n	80048de <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f003 0310 	and.w	r3, r3, #16
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d0f0      	beq.n	80048be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	00030d40 	.word	0x00030d40

080048f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b089      	sub	sp, #36	; 0x24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	4613      	mov	r3, r2
 80048fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004906:	88fb      	ldrh	r3, [r7, #6]
 8004908:	3303      	adds	r3, #3
 800490a:	089b      	lsrs	r3, r3, #2
 800490c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800490e:	2300      	movs	r3, #0
 8004910:	61bb      	str	r3, [r7, #24]
 8004912:	e00b      	b.n	800492c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	3304      	adds	r3, #4
 8004924:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	3301      	adds	r3, #1
 800492a:	61bb      	str	r3, [r7, #24]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	429a      	cmp	r2, r3
 8004932:	d3ef      	bcc.n	8004914 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004934:	69fb      	ldr	r3, [r7, #28]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3724      	adds	r7, #36	; 0x24
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004942:	b480      	push	{r7}
 8004944:	b085      	sub	sp, #20
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4013      	ands	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800495a:	68fb      	ldr	r3, [r7, #12]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	f003 0301 	and.w	r3, r3, #1
}
 8004978:	4618      	mov	r0, r3
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3301      	adds	r3, #1
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a13      	ldr	r2, [pc, #76]	; (80049e8 <USB_CoreReset+0x64>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e01b      	b.n	80049da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	daf2      	bge.n	8004990 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f043 0201 	orr.w	r2, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	3301      	adds	r3, #1
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <USB_CoreReset+0x64>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d901      	bls.n	80049cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e006      	b.n	80049da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d0f0      	beq.n	80049ba <USB_CoreReset+0x36>

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	00030d40 	.word	0x00030d40

080049ec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049ec:	b084      	sub	sp, #16
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	f107 001c 	add.w	r0, r7, #28
 80049fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a08:	461a      	mov	r2, r3
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d018      	beq.n	8004a70 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d10a      	bne.n	8004a5a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a52:	f043 0304 	orr.w	r3, r3, #4
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	e014      	b.n	8004a84 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a68:	f023 0304 	bic.w	r3, r3, #4
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	e009      	b.n	8004a84 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a7e:	f023 0304 	bic.w	r3, r3, #4
 8004a82:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004a84:	2110      	movs	r1, #16
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff feea 	bl	8004860 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7ff ff0d 	bl	80048ac <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	e015      	b.n	8004ac4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aaa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab8:	461a      	mov	r2, r3
 8004aba:	2300      	movs	r3, #0
 8004abc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d3e5      	bcc.n	8004a98 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004acc:	2101      	movs	r1, #1
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f882 	bl	8004bd8 <USB_DriveVbus>

  HAL_Delay(200U);
 8004ad4:	20c8      	movs	r0, #200	; 0xc8
 8004ad6:	f7fc fb5b 	bl	8001190 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00b      	beq.n	8004b0c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004afa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a14      	ldr	r2, [pc, #80]	; (8004b50 <USB_HostInit+0x164>)
 8004b00:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a13      	ldr	r2, [pc, #76]	; (8004b54 <USB_HostInit+0x168>)
 8004b06:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004b0a:	e009      	b.n	8004b20 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2280      	movs	r2, #128	; 0x80
 8004b10:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a10      	ldr	r2, [pc, #64]	; (8004b58 <USB_HostInit+0x16c>)
 8004b16:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a10      	ldr	r2, [pc, #64]	; (8004b5c <USB_HostInit+0x170>)
 8004b1c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d105      	bne.n	8004b32 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f043 0210 	orr.w	r2, r3, #16
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <USB_HostInit+0x174>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b4a:	b004      	add	sp, #16
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	01000200 	.word	0x01000200
 8004b54:	00e00300 	.word	0x00e00300
 8004b58:	00600080 	.word	0x00600080
 8004b5c:	004000e0 	.word	0x004000e0
 8004b60:	a3200008 	.word	0xa3200008

08004b64 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b82:	f023 0303 	bic.w	r3, r3, #3
 8004b86:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	68f9      	ldr	r1, [r7, #12]
 8004b98:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d107      	bne.n	8004bb6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bac:	461a      	mov	r2, r3
 8004bae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004bb2:	6053      	str	r3, [r2, #4]
 8004bb4:	e009      	b.n	8004bca <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004bb6:	78fb      	ldrb	r3, [r7, #3]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d106      	bne.n	8004bca <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f241 7370 	movw	r3, #6000	; 0x1770
 8004bc8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004bfc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d109      	bne.n	8004c1c <USB_DriveVbus+0x44>
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d106      	bne.n	8004c1c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c1a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c26:	d109      	bne.n	8004c3c <USB_DriveVbus+0x64>
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c3a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b085      	sub	sp, #20
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	b29b      	uxth	r3, r3
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	460b      	mov	r3, r1
 8004c76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	0c9b      	lsrs	r3, r3, #18
 8004c94:	f003 0303 	and.w	r3, r3, #3
 8004c98:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <USB_HC_Halt+0x3a>
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d16c      	bne.n	8004d80 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	0151      	lsls	r1, r2, #5
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	440a      	add	r2, r1
 8004cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cc4:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d143      	bne.n	8004d5a <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cf0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	0151      	lsls	r1, r2, #5
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	440a      	add	r2, r1
 8004d08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d10:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	0151      	lsls	r1, r2, #5
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	440a      	add	r2, r1
 8004d28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d30:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	3301      	adds	r3, #1
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d3e:	d81d      	bhi.n	8004d7c <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d56:	d0ec      	beq.n	8004d32 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004d58:	e080      	b.n	8004e5c <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	0151      	lsls	r1, r2, #5
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	440a      	add	r2, r1
 8004d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d78:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004d7a:	e06f      	b.n	8004e5c <USB_HC_Halt+0x1f0>
          break;
 8004d7c:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004d7e:	e06d      	b.n	8004e5c <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	0151      	lsls	r1, r2, #5
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	440a      	add	r2, r1
 8004d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d9e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d143      	bne.n	8004e38 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	0151      	lsls	r1, r2, #5
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	440a      	add	r2, r1
 8004dc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004dce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	0151      	lsls	r1, r2, #5
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	440a      	add	r2, r1
 8004de6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	0151      	lsls	r1, r2, #5
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	440a      	add	r2, r1
 8004e06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e0e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	3301      	adds	r3, #1
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e1c:	d81d      	bhi.n	8004e5a <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e34:	d0ec      	beq.n	8004e10 <USB_HC_Halt+0x1a4>
 8004e36:	e011      	b.n	8004e5c <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	e000      	b.n	8004e5c <USB_HC_Halt+0x1f0>
          break;
 8004e5a:	bf00      	nop
    }
  }

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	371c      	adds	r7, #28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	4603      	mov	r3, r0
 8004e72:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004e78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e7c:	2b84      	cmp	r3, #132	; 0x84
 8004e7e:	d005      	beq.n	8004e8c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004e80:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4413      	add	r3, r2
 8004e88:	3303      	adds	r3, #3
 8004e8a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ea0:	f3ef 8305 	mrs	r3, IPSR
 8004ea4:	607b      	str	r3, [r7, #4]
  return(result);
 8004ea6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bf14      	ite	ne
 8004eac:	2301      	movne	r3, #1
 8004eae:	2300      	moveq	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004ec2:	f000 fb5d 	bl	8005580 <vTaskStartScheduler>
  
  return osOK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ece:	b089      	sub	sp, #36	; 0x24
 8004ed0:	af04      	add	r7, sp, #16
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d020      	beq.n	8004f20 <osThreadCreate+0x54>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d01c      	beq.n	8004f20 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685c      	ldr	r4, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681d      	ldr	r5, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691e      	ldr	r6, [r3, #16]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff ffb6 	bl	8004e6a <makeFreeRtosPriority>
 8004efe:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f08:	9202      	str	r2, [sp, #8]
 8004f0a:	9301      	str	r3, [sp, #4]
 8004f0c:	9100      	str	r1, [sp, #0]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	4632      	mov	r2, r6
 8004f12:	4629      	mov	r1, r5
 8004f14:	4620      	mov	r0, r4
 8004f16:	f000 f979 	bl	800520c <xTaskCreateStatic>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	e01c      	b.n	8004f5a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685c      	ldr	r4, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f2c:	b29e      	uxth	r6, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff ff98 	bl	8004e6a <makeFreeRtosPriority>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	f107 030c 	add.w	r3, r7, #12
 8004f40:	9301      	str	r3, [sp, #4]
 8004f42:	9200      	str	r2, [sp, #0]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	4632      	mov	r2, r6
 8004f48:	4629      	mov	r1, r5
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f000 f9b7 	bl	80052be <xTaskCreate>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d001      	beq.n	8004f5a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004f56:	2300      	movs	r3, #0
 8004f58:	e000      	b.n	8004f5c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f64 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <osDelay+0x16>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	e000      	b.n	8004f7c <osDelay+0x18>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 facb 	bl	8005518 <vTaskDelay>
  
  return osOK;
 8004f82:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8004f9e:	f7ff ff7c 	bl	8004e9a <inHandlerMode>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01c      	beq.n	8004fe2 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8004fa8:	6839      	ldr	r1, [r7, #0]
 8004faa:	f107 0208 	add.w	r2, r7, #8
 8004fae:	f107 030c 	add.w	r3, r7, #12
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 fed1 	bl	8005d60 <xTaskGenericNotifyFromISR>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d002      	beq.n	8004fca <osSignalSet+0x3e>
      return 0x80000000;
 8004fc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004fc8:	e019      	b.n	8004ffe <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d015      	beq.n	8004ffc <osSignalSet+0x70>
 8004fd0:	4b0d      	ldr	r3, [pc, #52]	; (8005008 <osSignalSet+0x7c>)
 8004fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	e00c      	b.n	8004ffc <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8004fe2:	6839      	ldr	r1, [r7, #0]
 8004fe4:	f107 0308 	add.w	r3, r7, #8
 8004fe8:	2201      	movs	r2, #1
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fe18 	bl	8005c20 <xTaskGenericNotify>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d002      	beq.n	8004ffc <osSignalSet+0x70>
    return 0x80000000;
 8004ff6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ffa:	e000      	b.n	8004ffe <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8004ffc:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	e000ed04 	.word	0xe000ed04

0800500c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800500c:	b590      	push	{r4, r7, lr}
 800500e:	b089      	sub	sp, #36	; 0x24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800501c:	2300      	movs	r3, #0
 800501e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005026:	d103      	bne.n	8005030 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8005028:	f04f 33ff 	mov.w	r3, #4294967295
 800502c:	61fb      	str	r3, [r7, #28]
 800502e:	e009      	b.n	8005044 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d006      	beq.n	8005044 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <osSignalWait+0x38>
      ticks = 1;
 8005040:	2301      	movs	r3, #1
 8005042:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8005044:	f7ff ff29 	bl	8004e9a <inHandlerMode>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800504e:	2382      	movs	r3, #130	; 0x82
 8005050:	613b      	str	r3, [r7, #16]
 8005052:	e01b      	b.n	800508c <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	f107 0310 	add.w	r3, r7, #16
 800505a:	1d1a      	adds	r2, r3, #4
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	2000      	movs	r0, #0
 8005060:	f000 fd84 	bl	8005b6c <xTaskNotifyWait>
 8005064:	4603      	mov	r3, r0
 8005066:	2b01      	cmp	r3, #1
 8005068:	d008      	beq.n	800507c <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d102      	bne.n	8005076 <osSignalWait+0x6a>
 8005070:	2300      	movs	r3, #0
 8005072:	613b      	str	r3, [r7, #16]
 8005074:	e00a      	b.n	800508c <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8005076:	2340      	movs	r3, #64	; 0x40
 8005078:	613b      	str	r3, [r7, #16]
 800507a:	e007      	b.n	800508c <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2b00      	cmp	r3, #0
 8005080:	da02      	bge.n	8005088 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8005082:	2386      	movs	r3, #134	; 0x86
 8005084:	613b      	str	r3, [r7, #16]
 8005086:	e001      	b.n	800508c <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8005088:	2308      	movs	r3, #8
 800508a:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	461c      	mov	r4, r3
 8005090:	f107 0310 	add.w	r3, r7, #16
 8005094:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005098:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	3724      	adds	r7, #36	; 0x24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd90      	pop	{r4, r7, pc}

080050a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f103 0208 	add.w	r2, r3, #8
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f04f 32ff 	mov.w	r2, #4294967295
 80050bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f103 0208 	add.w	r2, r3, #8
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f103 0208 	add.w	r2, r3, #8
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	601a      	str	r2, [r3, #0]
}
 800513a:	bf00      	nop
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005146:	b480      	push	{r7}
 8005148:	b085      	sub	sp, #20
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515c:	d103      	bne.n	8005166 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	e00c      	b.n	8005180 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3308      	adds	r3, #8
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	e002      	b.n	8005174 <vListInsert+0x2e>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	429a      	cmp	r2, r3
 800517e:	d2f6      	bcs.n	800516e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	601a      	str	r2, [r3, #0]
}
 80051ac:	bf00      	nop
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6892      	ldr	r2, [r2, #8]
 80051ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6852      	ldr	r2, [r2, #4]
 80051d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d103      	bne.n	80051ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	1e5a      	subs	r2, r3, #1
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08e      	sub	sp, #56	; 0x38
 8005210:	af04      	add	r7, sp, #16
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800521a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521c:	2b00      	cmp	r3, #0
 800521e:	d109      	bne.n	8005234 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	623b      	str	r3, [r7, #32]
 8005232:	e7fe      	b.n	8005232 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <xTaskCreateStatic+0x42>
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	61fb      	str	r3, [r7, #28]
 800524c:	e7fe      	b.n	800524c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800524e:	2354      	movs	r3, #84	; 0x54
 8005250:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2b54      	cmp	r3, #84	; 0x54
 8005256:	d009      	beq.n	800526c <xTaskCreateStatic+0x60>
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	61bb      	str	r3, [r7, #24]
 800526a:	e7fe      	b.n	800526a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800526c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526e:	2b00      	cmp	r3, #0
 8005270:	d01e      	beq.n	80052b0 <xTaskCreateStatic+0xa4>
 8005272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01b      	beq.n	80052b0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005280:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	2202      	movs	r2, #2
 8005286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800528a:	2300      	movs	r3, #0
 800528c:	9303      	str	r3, [sp, #12]
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	9302      	str	r3, [sp, #8]
 8005292:	f107 0314 	add.w	r3, r7, #20
 8005296:	9301      	str	r3, [sp, #4]
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	68b9      	ldr	r1, [r7, #8]
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f850 	bl	8005348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052aa:	f000 f8cb 	bl	8005444 <prvAddNewTaskToReadyList>
 80052ae:	e001      	b.n	80052b4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052b4:	697b      	ldr	r3, [r7, #20]
	}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3728      	adds	r7, #40	; 0x28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b08c      	sub	sp, #48	; 0x30
 80052c2:	af04      	add	r7, sp, #16
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	603b      	str	r3, [r7, #0]
 80052ca:	4613      	mov	r3, r2
 80052cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4618      	mov	r0, r3
 80052d4:	f001 f8b4 	bl	8006440 <pvPortMalloc>
 80052d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00e      	beq.n	80052fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80052e0:	2054      	movs	r0, #84	; 0x54
 80052e2:	f001 f8ad 	bl	8006440 <pvPortMalloc>
 80052e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	631a      	str	r2, [r3, #48]	; 0x30
 80052f4:	e005      	b.n	8005302 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052f6:	6978      	ldr	r0, [r7, #20]
 80052f8:	f001 f964 	bl	80065c4 <vPortFree>
 80052fc:	e001      	b.n	8005302 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052fe:	2300      	movs	r3, #0
 8005300:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d017      	beq.n	8005338 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005310:	88fa      	ldrh	r2, [r7, #6]
 8005312:	2300      	movs	r3, #0
 8005314:	9303      	str	r3, [sp, #12]
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	9302      	str	r3, [sp, #8]
 800531a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531c:	9301      	str	r3, [sp, #4]
 800531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 f80e 	bl	8005348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800532c:	69f8      	ldr	r0, [r7, #28]
 800532e:	f000 f889 	bl	8005444 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005332:	2301      	movs	r3, #1
 8005334:	61bb      	str	r3, [r7, #24]
 8005336:	e002      	b.n	800533e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005338:	f04f 33ff 	mov.w	r3, #4294967295
 800533c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800533e:	69bb      	ldr	r3, [r7, #24]
	}
 8005340:	4618      	mov	r0, r3
 8005342:	3720      	adds	r7, #32
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005360:	3b01      	subs	r3, #1
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	f023 0307 	bic.w	r3, r3, #7
 800536e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	2b00      	cmp	r3, #0
 8005378:	d009      	beq.n	800538e <prvInitialiseNewTask+0x46>
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	e7fe      	b.n	800538c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800538e:	2300      	movs	r3, #0
 8005390:	61fb      	str	r3, [r7, #28]
 8005392:	e012      	b.n	80053ba <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	4413      	add	r3, r2
 800539a:	7819      	ldrb	r1, [r3, #0]
 800539c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	4413      	add	r3, r2
 80053a2:	3334      	adds	r3, #52	; 0x34
 80053a4:	460a      	mov	r2, r1
 80053a6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	4413      	add	r3, r2
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d006      	beq.n	80053c2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	3301      	adds	r3, #1
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	2b0f      	cmp	r3, #15
 80053be:	d9e9      	bls.n	8005394 <prvInitialiseNewTask+0x4c>
 80053c0:	e000      	b.n	80053c4 <prvInitialiseNewTask+0x7c>
		{
			break;
 80053c2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ce:	2b06      	cmp	r3, #6
 80053d0:	d901      	bls.n	80053d6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053d2:	2306      	movs	r3, #6
 80053d4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053da:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053e0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	2200      	movs	r2, #0
 80053e6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	3304      	adds	r3, #4
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff fe79 	bl	80050e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	3318      	adds	r3, #24
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7ff fe74 	bl	80050e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005400:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	f1c3 0207 	rsb	r2, r3, #7
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005410:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	2200      	movs	r2, #0
 8005416:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	68f9      	ldr	r1, [r7, #12]
 8005424:	69b8      	ldr	r0, [r7, #24]
 8005426:	f000 fdc7 	bl	8005fb8 <pxPortInitialiseStack>
 800542a:	4602      	mov	r2, r0
 800542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800543c:	bf00      	nop
 800543e:	3720      	adds	r7, #32
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800544c:	f000 fede 	bl	800620c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005450:	4b2a      	ldr	r3, [pc, #168]	; (80054fc <prvAddNewTaskToReadyList+0xb8>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3301      	adds	r3, #1
 8005456:	4a29      	ldr	r2, [pc, #164]	; (80054fc <prvAddNewTaskToReadyList+0xb8>)
 8005458:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800545a:	4b29      	ldr	r3, [pc, #164]	; (8005500 <prvAddNewTaskToReadyList+0xbc>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d109      	bne.n	8005476 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005462:	4a27      	ldr	r2, [pc, #156]	; (8005500 <prvAddNewTaskToReadyList+0xbc>)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005468:	4b24      	ldr	r3, [pc, #144]	; (80054fc <prvAddNewTaskToReadyList+0xb8>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d110      	bne.n	8005492 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005470:	f000 fabc 	bl	80059ec <prvInitialiseTaskLists>
 8005474:	e00d      	b.n	8005492 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005476:	4b23      	ldr	r3, [pc, #140]	; (8005504 <prvAddNewTaskToReadyList+0xc0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d109      	bne.n	8005492 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800547e:	4b20      	ldr	r3, [pc, #128]	; (8005500 <prvAddNewTaskToReadyList+0xbc>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005488:	429a      	cmp	r2, r3
 800548a:	d802      	bhi.n	8005492 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800548c:	4a1c      	ldr	r2, [pc, #112]	; (8005500 <prvAddNewTaskToReadyList+0xbc>)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005492:	4b1d      	ldr	r3, [pc, #116]	; (8005508 <prvAddNewTaskToReadyList+0xc4>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3301      	adds	r3, #1
 8005498:	4a1b      	ldr	r2, [pc, #108]	; (8005508 <prvAddNewTaskToReadyList+0xc4>)
 800549a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a0:	2201      	movs	r2, #1
 80054a2:	409a      	lsls	r2, r3
 80054a4:	4b19      	ldr	r3, [pc, #100]	; (800550c <prvAddNewTaskToReadyList+0xc8>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	4a18      	ldr	r2, [pc, #96]	; (800550c <prvAddNewTaskToReadyList+0xc8>)
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4a15      	ldr	r2, [pc, #84]	; (8005510 <prvAddNewTaskToReadyList+0xcc>)
 80054bc:	441a      	add	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3304      	adds	r3, #4
 80054c2:	4619      	mov	r1, r3
 80054c4:	4610      	mov	r0, r2
 80054c6:	f7ff fe1a 	bl	80050fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054ca:	f000 fecd 	bl	8006268 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054ce:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <prvAddNewTaskToReadyList+0xc0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00e      	beq.n	80054f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054d6:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <prvAddNewTaskToReadyList+0xbc>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d207      	bcs.n	80054f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054e4:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <prvAddNewTaskToReadyList+0xd0>)
 80054e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054f4:	bf00      	nop
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	20000380 	.word	0x20000380
 8005500:	20000280 	.word	0x20000280
 8005504:	2000038c 	.word	0x2000038c
 8005508:	2000039c 	.word	0x2000039c
 800550c:	20000388 	.word	0x20000388
 8005510:	20000284 	.word	0x20000284
 8005514:	e000ed04 	.word	0xe000ed04

08005518 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005520:	2300      	movs	r3, #0
 8005522:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d016      	beq.n	8005558 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800552a:	4b13      	ldr	r3, [pc, #76]	; (8005578 <vTaskDelay+0x60>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d009      	beq.n	8005546 <vTaskDelay+0x2e>
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	60bb      	str	r3, [r7, #8]
 8005544:	e7fe      	b.n	8005544 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005546:	f000 f879 	bl	800563c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800554a:	2100      	movs	r1, #0
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fccd 	bl	8005eec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005552:	f000 f881 	bl	8005658 <xTaskResumeAll>
 8005556:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d107      	bne.n	800556e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800555e:	4b07      	ldr	r3, [pc, #28]	; (800557c <vTaskDelay+0x64>)
 8005560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800556e:	bf00      	nop
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	200003a8 	.word	0x200003a8
 800557c:	e000ed04 	.word	0xe000ed04

08005580 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08a      	sub	sp, #40	; 0x28
 8005584:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005586:	2300      	movs	r3, #0
 8005588:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800558a:	2300      	movs	r3, #0
 800558c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800558e:	463a      	mov	r2, r7
 8005590:	1d39      	adds	r1, r7, #4
 8005592:	f107 0308 	add.w	r3, r7, #8
 8005596:	4618      	mov	r0, r3
 8005598:	f7fa ffce 	bl	8000538 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800559c:	6839      	ldr	r1, [r7, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	9202      	str	r2, [sp, #8]
 80055a4:	9301      	str	r3, [sp, #4]
 80055a6:	2300      	movs	r3, #0
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	2300      	movs	r3, #0
 80055ac:	460a      	mov	r2, r1
 80055ae:	491d      	ldr	r1, [pc, #116]	; (8005624 <vTaskStartScheduler+0xa4>)
 80055b0:	481d      	ldr	r0, [pc, #116]	; (8005628 <vTaskStartScheduler+0xa8>)
 80055b2:	f7ff fe2b 	bl	800520c <xTaskCreateStatic>
 80055b6:	4602      	mov	r2, r0
 80055b8:	4b1c      	ldr	r3, [pc, #112]	; (800562c <vTaskStartScheduler+0xac>)
 80055ba:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055bc:	4b1b      	ldr	r3, [pc, #108]	; (800562c <vTaskStartScheduler+0xac>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055c4:	2301      	movs	r3, #1
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	e001      	b.n	80055ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d115      	bne.n	8005600 <vTaskStartScheduler+0x80>
 80055d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055e6:	4b12      	ldr	r3, [pc, #72]	; (8005630 <vTaskStartScheduler+0xb0>)
 80055e8:	f04f 32ff 	mov.w	r2, #4294967295
 80055ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055ee:	4b11      	ldr	r3, [pc, #68]	; (8005634 <vTaskStartScheduler+0xb4>)
 80055f0:	2201      	movs	r2, #1
 80055f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80055f4:	4b10      	ldr	r3, [pc, #64]	; (8005638 <vTaskStartScheduler+0xb8>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055fa:	f000 fd69 	bl	80060d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055fe:	e00d      	b.n	800561c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005606:	d109      	bne.n	800561c <vTaskStartScheduler+0x9c>
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	e7fe      	b.n	800561a <vTaskStartScheduler+0x9a>
}
 800561c:	bf00      	nop
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	080068f8 	.word	0x080068f8
 8005628:	080059bd 	.word	0x080059bd
 800562c:	200003a4 	.word	0x200003a4
 8005630:	200003a0 	.word	0x200003a0
 8005634:	2000038c 	.word	0x2000038c
 8005638:	20000384 	.word	0x20000384

0800563c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005640:	4b04      	ldr	r3, [pc, #16]	; (8005654 <vTaskSuspendAll+0x18>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3301      	adds	r3, #1
 8005646:	4a03      	ldr	r2, [pc, #12]	; (8005654 <vTaskSuspendAll+0x18>)
 8005648:	6013      	str	r3, [r2, #0]
}
 800564a:	bf00      	nop
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	200003a8 	.word	0x200003a8

08005658 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005662:	2300      	movs	r3, #0
 8005664:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005666:	4b41      	ldr	r3, [pc, #260]	; (800576c <xTaskResumeAll+0x114>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d109      	bne.n	8005682 <xTaskResumeAll+0x2a>
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	e7fe      	b.n	8005680 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005682:	f000 fdc3 	bl	800620c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005686:	4b39      	ldr	r3, [pc, #228]	; (800576c <xTaskResumeAll+0x114>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3b01      	subs	r3, #1
 800568c:	4a37      	ldr	r2, [pc, #220]	; (800576c <xTaskResumeAll+0x114>)
 800568e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005690:	4b36      	ldr	r3, [pc, #216]	; (800576c <xTaskResumeAll+0x114>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d161      	bne.n	800575c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005698:	4b35      	ldr	r3, [pc, #212]	; (8005770 <xTaskResumeAll+0x118>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d05d      	beq.n	800575c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056a0:	e02e      	b.n	8005700 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80056a2:	4b34      	ldr	r3, [pc, #208]	; (8005774 <xTaskResumeAll+0x11c>)
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3318      	adds	r3, #24
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff fd82 	bl	80051b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7ff fd7d 	bl	80051b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c2:	2201      	movs	r2, #1
 80056c4:	409a      	lsls	r2, r3
 80056c6:	4b2c      	ldr	r3, [pc, #176]	; (8005778 <xTaskResumeAll+0x120>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	4a2a      	ldr	r2, [pc, #168]	; (8005778 <xTaskResumeAll+0x120>)
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d4:	4613      	mov	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4a27      	ldr	r2, [pc, #156]	; (800577c <xTaskResumeAll+0x124>)
 80056de:	441a      	add	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3304      	adds	r3, #4
 80056e4:	4619      	mov	r1, r3
 80056e6:	4610      	mov	r0, r2
 80056e8:	f7ff fd09 	bl	80050fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f0:	4b23      	ldr	r3, [pc, #140]	; (8005780 <xTaskResumeAll+0x128>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d302      	bcc.n	8005700 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80056fa:	4b22      	ldr	r3, [pc, #136]	; (8005784 <xTaskResumeAll+0x12c>)
 80056fc:	2201      	movs	r2, #1
 80056fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005700:	4b1c      	ldr	r3, [pc, #112]	; (8005774 <xTaskResumeAll+0x11c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1cc      	bne.n	80056a2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800570e:	f000 fa07 	bl	8005b20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005712:	4b1d      	ldr	r3, [pc, #116]	; (8005788 <xTaskResumeAll+0x130>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d010      	beq.n	8005740 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800571e:	f000 f837 	bl	8005790 <xTaskIncrementTick>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005728:	4b16      	ldr	r3, [pc, #88]	; (8005784 <xTaskResumeAll+0x12c>)
 800572a:	2201      	movs	r2, #1
 800572c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	3b01      	subs	r3, #1
 8005732:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1f1      	bne.n	800571e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800573a:	4b13      	ldr	r3, [pc, #76]	; (8005788 <xTaskResumeAll+0x130>)
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005740:	4b10      	ldr	r3, [pc, #64]	; (8005784 <xTaskResumeAll+0x12c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d009      	beq.n	800575c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005748:	2301      	movs	r3, #1
 800574a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800574c:	4b0f      	ldr	r3, [pc, #60]	; (800578c <xTaskResumeAll+0x134>)
 800574e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800575c:	f000 fd84 	bl	8006268 <vPortExitCritical>

	return xAlreadyYielded;
 8005760:	68bb      	ldr	r3, [r7, #8]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	200003a8 	.word	0x200003a8
 8005770:	20000380 	.word	0x20000380
 8005774:	20000340 	.word	0x20000340
 8005778:	20000388 	.word	0x20000388
 800577c:	20000284 	.word	0x20000284
 8005780:	20000280 	.word	0x20000280
 8005784:	20000394 	.word	0x20000394
 8005788:	20000390 	.word	0x20000390
 800578c:	e000ed04 	.word	0xe000ed04

08005790 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005796:	2300      	movs	r3, #0
 8005798:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800579a:	4b50      	ldr	r3, [pc, #320]	; (80058dc <xTaskIncrementTick+0x14c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f040 808c 	bne.w	80058bc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057a4:	4b4e      	ldr	r3, [pc, #312]	; (80058e0 <xTaskIncrementTick+0x150>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3301      	adds	r3, #1
 80057aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057ac:	4a4c      	ldr	r2, [pc, #304]	; (80058e0 <xTaskIncrementTick+0x150>)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d11f      	bne.n	80057f8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80057b8:	4b4a      	ldr	r3, [pc, #296]	; (80058e4 <xTaskIncrementTick+0x154>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d009      	beq.n	80057d6 <xTaskIncrementTick+0x46>
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	e7fe      	b.n	80057d4 <xTaskIncrementTick+0x44>
 80057d6:	4b43      	ldr	r3, [pc, #268]	; (80058e4 <xTaskIncrementTick+0x154>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	4b42      	ldr	r3, [pc, #264]	; (80058e8 <xTaskIncrementTick+0x158>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a40      	ldr	r2, [pc, #256]	; (80058e4 <xTaskIncrementTick+0x154>)
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	4a40      	ldr	r2, [pc, #256]	; (80058e8 <xTaskIncrementTick+0x158>)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	4b40      	ldr	r3, [pc, #256]	; (80058ec <xTaskIncrementTick+0x15c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3301      	adds	r3, #1
 80057f0:	4a3e      	ldr	r2, [pc, #248]	; (80058ec <xTaskIncrementTick+0x15c>)
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	f000 f994 	bl	8005b20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057f8:	4b3d      	ldr	r3, [pc, #244]	; (80058f0 <xTaskIncrementTick+0x160>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d34d      	bcc.n	800589e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005802:	4b38      	ldr	r3, [pc, #224]	; (80058e4 <xTaskIncrementTick+0x154>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <xTaskIncrementTick+0x80>
 800580c:	2301      	movs	r3, #1
 800580e:	e000      	b.n	8005812 <xTaskIncrementTick+0x82>
 8005810:	2300      	movs	r3, #0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d004      	beq.n	8005820 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005816:	4b36      	ldr	r3, [pc, #216]	; (80058f0 <xTaskIncrementTick+0x160>)
 8005818:	f04f 32ff 	mov.w	r2, #4294967295
 800581c:	601a      	str	r2, [r3, #0]
					break;
 800581e:	e03e      	b.n	800589e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005820:	4b30      	ldr	r3, [pc, #192]	; (80058e4 <xTaskIncrementTick+0x154>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	429a      	cmp	r2, r3
 8005836:	d203      	bcs.n	8005840 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005838:	4a2d      	ldr	r2, [pc, #180]	; (80058f0 <xTaskIncrementTick+0x160>)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6013      	str	r3, [r2, #0]
						break;
 800583e:	e02e      	b.n	800589e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	3304      	adds	r3, #4
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff fcb7 	bl	80051b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584e:	2b00      	cmp	r3, #0
 8005850:	d004      	beq.n	800585c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	3318      	adds	r3, #24
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff fcae 	bl	80051b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005860:	2201      	movs	r2, #1
 8005862:	409a      	lsls	r2, r3
 8005864:	4b23      	ldr	r3, [pc, #140]	; (80058f4 <xTaskIncrementTick+0x164>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4313      	orrs	r3, r2
 800586a:	4a22      	ldr	r2, [pc, #136]	; (80058f4 <xTaskIncrementTick+0x164>)
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005872:	4613      	mov	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4a1f      	ldr	r2, [pc, #124]	; (80058f8 <xTaskIncrementTick+0x168>)
 800587c:	441a      	add	r2, r3
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	3304      	adds	r3, #4
 8005882:	4619      	mov	r1, r3
 8005884:	4610      	mov	r0, r2
 8005886:	f7ff fc3a 	bl	80050fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588e:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <xTaskIncrementTick+0x16c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	429a      	cmp	r2, r3
 8005896:	d3b4      	bcc.n	8005802 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005898:	2301      	movs	r3, #1
 800589a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800589c:	e7b1      	b.n	8005802 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800589e:	4b17      	ldr	r3, [pc, #92]	; (80058fc <xTaskIncrementTick+0x16c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a4:	4914      	ldr	r1, [pc, #80]	; (80058f8 <xTaskIncrementTick+0x168>)
 80058a6:	4613      	mov	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	440b      	add	r3, r1
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d907      	bls.n	80058c6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80058b6:	2301      	movs	r3, #1
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	e004      	b.n	80058c6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80058bc:	4b10      	ldr	r3, [pc, #64]	; (8005900 <xTaskIncrementTick+0x170>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3301      	adds	r3, #1
 80058c2:	4a0f      	ldr	r2, [pc, #60]	; (8005900 <xTaskIncrementTick+0x170>)
 80058c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80058c6:	4b0f      	ldr	r3, [pc, #60]	; (8005904 <xTaskIncrementTick+0x174>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80058ce:	2301      	movs	r3, #1
 80058d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80058d2:	697b      	ldr	r3, [r7, #20]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	200003a8 	.word	0x200003a8
 80058e0:	20000384 	.word	0x20000384
 80058e4:	20000338 	.word	0x20000338
 80058e8:	2000033c 	.word	0x2000033c
 80058ec:	20000398 	.word	0x20000398
 80058f0:	200003a0 	.word	0x200003a0
 80058f4:	20000388 	.word	0x20000388
 80058f8:	20000284 	.word	0x20000284
 80058fc:	20000280 	.word	0x20000280
 8005900:	20000390 	.word	0x20000390
 8005904:	20000394 	.word	0x20000394

08005908 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800590e:	4b26      	ldr	r3, [pc, #152]	; (80059a8 <vTaskSwitchContext+0xa0>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005916:	4b25      	ldr	r3, [pc, #148]	; (80059ac <vTaskSwitchContext+0xa4>)
 8005918:	2201      	movs	r2, #1
 800591a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800591c:	e03e      	b.n	800599c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800591e:	4b23      	ldr	r3, [pc, #140]	; (80059ac <vTaskSwitchContext+0xa4>)
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005924:	4b22      	ldr	r3, [pc, #136]	; (80059b0 <vTaskSwitchContext+0xa8>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	fab3 f383 	clz	r3, r3
 8005930:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005932:	7afb      	ldrb	r3, [r7, #11]
 8005934:	f1c3 031f 	rsb	r3, r3, #31
 8005938:	617b      	str	r3, [r7, #20]
 800593a:	491e      	ldr	r1, [pc, #120]	; (80059b4 <vTaskSwitchContext+0xac>)
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d109      	bne.n	8005962 <vTaskSwitchContext+0x5a>
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	607b      	str	r3, [r7, #4]
 8005960:	e7fe      	b.n	8005960 <vTaskSwitchContext+0x58>
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4a11      	ldr	r2, [pc, #68]	; (80059b4 <vTaskSwitchContext+0xac>)
 800596e:	4413      	add	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	605a      	str	r2, [r3, #4]
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	3308      	adds	r3, #8
 8005984:	429a      	cmp	r2, r3
 8005986:	d104      	bne.n	8005992 <vTaskSwitchContext+0x8a>
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	605a      	str	r2, [r3, #4]
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	4a07      	ldr	r2, [pc, #28]	; (80059b8 <vTaskSwitchContext+0xb0>)
 800599a:	6013      	str	r3, [r2, #0]
}
 800599c:	bf00      	nop
 800599e:	371c      	adds	r7, #28
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	200003a8 	.word	0x200003a8
 80059ac:	20000394 	.word	0x20000394
 80059b0:	20000388 	.word	0x20000388
 80059b4:	20000284 	.word	0x20000284
 80059b8:	20000280 	.word	0x20000280

080059bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059c4:	f000 f852 	bl	8005a6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059c8:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <prvIdleTask+0x28>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d9f9      	bls.n	80059c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <prvIdleTask+0x2c>)
 80059d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059e0:	e7f0      	b.n	80059c4 <prvIdleTask+0x8>
 80059e2:	bf00      	nop
 80059e4:	20000284 	.word	0x20000284
 80059e8:	e000ed04 	.word	0xe000ed04

080059ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059f2:	2300      	movs	r3, #0
 80059f4:	607b      	str	r3, [r7, #4]
 80059f6:	e00c      	b.n	8005a12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	4613      	mov	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4a12      	ldr	r2, [pc, #72]	; (8005a4c <prvInitialiseTaskLists+0x60>)
 8005a04:	4413      	add	r3, r2
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff fb4c 	bl	80050a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	607b      	str	r3, [r7, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b06      	cmp	r3, #6
 8005a16:	d9ef      	bls.n	80059f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a18:	480d      	ldr	r0, [pc, #52]	; (8005a50 <prvInitialiseTaskLists+0x64>)
 8005a1a:	f7ff fb43 	bl	80050a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a1e:	480d      	ldr	r0, [pc, #52]	; (8005a54 <prvInitialiseTaskLists+0x68>)
 8005a20:	f7ff fb40 	bl	80050a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a24:	480c      	ldr	r0, [pc, #48]	; (8005a58 <prvInitialiseTaskLists+0x6c>)
 8005a26:	f7ff fb3d 	bl	80050a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a2a:	480c      	ldr	r0, [pc, #48]	; (8005a5c <prvInitialiseTaskLists+0x70>)
 8005a2c:	f7ff fb3a 	bl	80050a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a30:	480b      	ldr	r0, [pc, #44]	; (8005a60 <prvInitialiseTaskLists+0x74>)
 8005a32:	f7ff fb37 	bl	80050a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a36:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <prvInitialiseTaskLists+0x78>)
 8005a38:	4a05      	ldr	r2, [pc, #20]	; (8005a50 <prvInitialiseTaskLists+0x64>)
 8005a3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <prvInitialiseTaskLists+0x7c>)
 8005a3e:	4a05      	ldr	r2, [pc, #20]	; (8005a54 <prvInitialiseTaskLists+0x68>)
 8005a40:	601a      	str	r2, [r3, #0]
}
 8005a42:	bf00      	nop
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000284 	.word	0x20000284
 8005a50:	20000310 	.word	0x20000310
 8005a54:	20000324 	.word	0x20000324
 8005a58:	20000340 	.word	0x20000340
 8005a5c:	20000354 	.word	0x20000354
 8005a60:	2000036c 	.word	0x2000036c
 8005a64:	20000338 	.word	0x20000338
 8005a68:	2000033c 	.word	0x2000033c

08005a6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a72:	e019      	b.n	8005aa8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a74:	f000 fbca 	bl	800620c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005a78:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <prvCheckTasksWaitingTermination+0x4c>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3304      	adds	r3, #4
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff fb97 	bl	80051b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a8a:	4b0c      	ldr	r3, [pc, #48]	; (8005abc <prvCheckTasksWaitingTermination+0x50>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	4a0a      	ldr	r2, [pc, #40]	; (8005abc <prvCheckTasksWaitingTermination+0x50>)
 8005a92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a94:	4b0a      	ldr	r3, [pc, #40]	; (8005ac0 <prvCheckTasksWaitingTermination+0x54>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	4a09      	ldr	r2, [pc, #36]	; (8005ac0 <prvCheckTasksWaitingTermination+0x54>)
 8005a9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a9e:	f000 fbe3 	bl	8006268 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f80e 	bl	8005ac4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <prvCheckTasksWaitingTermination+0x54>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e1      	bne.n	8005a74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ab0:	bf00      	nop
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	20000354 	.word	0x20000354
 8005abc:	20000380 	.word	0x20000380
 8005ac0:	20000368 	.word	0x20000368

08005ac4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d108      	bne.n	8005ae8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 fd72 	bl	80065c4 <vPortFree>
				vPortFree( pxTCB );
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fd6f 	bl	80065c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ae6:	e017      	b.n	8005b18 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d103      	bne.n	8005afa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fd66 	bl	80065c4 <vPortFree>
	}
 8005af8:	e00e      	b.n	8005b18 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d009      	beq.n	8005b18 <prvDeleteTCB+0x54>
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	e7fe      	b.n	8005b16 <prvDeleteTCB+0x52>
	}
 8005b18:	bf00      	nop
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b26:	4b0f      	ldr	r3, [pc, #60]	; (8005b64 <prvResetNextTaskUnblockTime+0x44>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <prvResetNextTaskUnblockTime+0x14>
 8005b30:	2301      	movs	r3, #1
 8005b32:	e000      	b.n	8005b36 <prvResetNextTaskUnblockTime+0x16>
 8005b34:	2300      	movs	r3, #0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d004      	beq.n	8005b44 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b3a:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <prvResetNextTaskUnblockTime+0x48>)
 8005b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b40:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b42:	e008      	b.n	8005b56 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b44:	4b07      	ldr	r3, [pc, #28]	; (8005b64 <prvResetNextTaskUnblockTime+0x44>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	4a05      	ldr	r2, [pc, #20]	; (8005b68 <prvResetNextTaskUnblockTime+0x48>)
 8005b54:	6013      	str	r3, [r2, #0]
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	20000338 	.word	0x20000338
 8005b68:	200003a0 	.word	0x200003a0

08005b6c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005b7a:	f000 fb47 	bl	800620c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005b7e:	4b26      	ldr	r3, [pc, #152]	; (8005c18 <xTaskNotifyWait+0xac>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d01a      	beq.n	8005bc2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005b8c:	4b22      	ldr	r3, [pc, #136]	; (8005c18 <xTaskNotifyWait+0xac>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	43d2      	mvns	r2, r2
 8005b96:	400a      	ands	r2, r1
 8005b98:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005b9a:	4b1f      	ldr	r3, [pc, #124]	; (8005c18 <xTaskNotifyWait+0xac>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00b      	beq.n	8005bc2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005baa:	2101      	movs	r1, #1
 8005bac:	6838      	ldr	r0, [r7, #0]
 8005bae:	f000 f99d 	bl	8005eec <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005bb2:	4b1a      	ldr	r3, [pc, #104]	; (8005c1c <xTaskNotifyWait+0xb0>)
 8005bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005bc2:	f000 fb51 	bl	8006268 <vPortExitCritical>

		taskENTER_CRITICAL();
 8005bc6:	f000 fb21 	bl	800620c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d004      	beq.n	8005bda <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005bd0:	4b11      	ldr	r3, [pc, #68]	; (8005c18 <xTaskNotifyWait+0xac>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005bda:	4b0f      	ldr	r3, [pc, #60]	; (8005c18 <xTaskNotifyWait+0xac>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d002      	beq.n	8005bee <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8005be8:	2300      	movs	r3, #0
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	e008      	b.n	8005c00 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005bee:	4b0a      	ldr	r3, [pc, #40]	; (8005c18 <xTaskNotifyWait+0xac>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	43d2      	mvns	r2, r2
 8005bf8:	400a      	ands	r2, r1
 8005bfa:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c00:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <xTaskNotifyWait+0xac>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8005c0a:	f000 fb2d 	bl	8006268 <vPortExitCritical>

		return xReturn;
 8005c0e:	697b      	ldr	r3, [r7, #20]
	}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	20000280 	.word	0x20000280
 8005c1c:	e000ed04 	.word	0xe000ed04

08005c20 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08a      	sub	sp, #40	; 0x28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005c30:	2301      	movs	r3, #1
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d109      	bne.n	8005c4e <xTaskGenericNotify+0x2e>
 8005c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	61bb      	str	r3, [r7, #24]
 8005c4c:	e7fe      	b.n	8005c4c <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005c52:	f000 fadb 	bl	800620c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c6a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8005c74:	79fb      	ldrb	r3, [r7, #7]
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d827      	bhi.n	8005cca <xTaskGenericNotify+0xaa>
 8005c7a:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <xTaskGenericNotify+0x60>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005ccb 	.word	0x08005ccb
 8005c84:	08005c95 	.word	0x08005c95
 8005c88:	08005ca3 	.word	0x08005ca3
 8005c8c:	08005caf 	.word	0x08005caf
 8005c90:	08005cb7 	.word	0x08005cb7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005ca0:	e013      	b.n	8005cca <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005cac:	e00d      	b.n	8005cca <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005cb4:	e009      	b.n	8005cca <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005cb6:	7ffb      	ldrb	r3, [r7, #31]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d003      	beq.n	8005cc4 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005cc2:	e001      	b.n	8005cc8 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8005cc8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005cca:	7ffb      	ldrb	r3, [r7, #31]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d138      	bne.n	8005d42 <xTaskGenericNotify+0x122>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff fa6f 	bl	80051b8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cde:	2201      	movs	r2, #1
 8005ce0:	409a      	lsls	r2, r3
 8005ce2:	4b1b      	ldr	r3, [pc, #108]	; (8005d50 <xTaskGenericNotify+0x130>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	4a19      	ldr	r2, [pc, #100]	; (8005d50 <xTaskGenericNotify+0x130>)
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4a16      	ldr	r2, [pc, #88]	; (8005d54 <xTaskGenericNotify+0x134>)
 8005cfa:	441a      	add	r2, r3
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	3304      	adds	r3, #4
 8005d00:	4619      	mov	r1, r3
 8005d02:	4610      	mov	r0, r2
 8005d04:	f7ff f9fb 	bl	80050fe <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d009      	beq.n	8005d24 <xTaskGenericNotify+0x104>
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	e7fe      	b.n	8005d22 <xTaskGenericNotify+0x102>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d28:	4b0b      	ldr	r3, [pc, #44]	; (8005d58 <xTaskGenericNotify+0x138>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d907      	bls.n	8005d42 <xTaskGenericNotify+0x122>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005d32:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <xTaskGenericNotify+0x13c>)
 8005d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005d42:	f000 fa91 	bl	8006268 <vPortExitCritical>

		return xReturn;
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3728      	adds	r7, #40	; 0x28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	20000388 	.word	0x20000388
 8005d54:	20000284 	.word	0x20000284
 8005d58:	20000280 	.word	0x20000280
 8005d5c:	e000ed04 	.word	0xe000ed04

08005d60 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08e      	sub	sp, #56	; 0x38
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	603b      	str	r3, [r7, #0]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005d70:	2301      	movs	r3, #1
 8005d72:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d109      	bne.n	8005d8e <xTaskGenericNotifyFromISR+0x2e>
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d8c:	e7fe      	b.n	8005d8c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d8e:	f000 fb19 	bl	80063c4 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d96:	f3ef 8211 	mrs	r2, BASEPRI
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	623a      	str	r2, [r7, #32]
 8005dac:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005dae:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005db0:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	2202      	movs	r2, #2
 8005dce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8005dd2:	79fb      	ldrb	r3, [r7, #7]
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d829      	bhi.n	8005e2c <xTaskGenericNotifyFromISR+0xcc>
 8005dd8:	a201      	add	r2, pc, #4	; (adr r2, 8005de0 <xTaskGenericNotifyFromISR+0x80>)
 8005dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dde:	bf00      	nop
 8005de0:	08005e2d 	.word	0x08005e2d
 8005de4:	08005df5 	.word	0x08005df5
 8005de8:	08005e03 	.word	0x08005e03
 8005dec:	08005e0f 	.word	0x08005e0f
 8005df0:	08005e17 	.word	0x08005e17
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005e00:	e014      	b.n	8005e2c <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005e0c:	e00e      	b.n	8005e2c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005e14:	e00a      	b.n	8005e2c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005e16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d003      	beq.n	8005e26 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005e24:	e001      	b.n	8005e2a <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8005e26:	2300      	movs	r3, #0
 8005e28:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005e2a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005e2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d145      	bne.n	8005ec0 <xTaskGenericNotifyFromISR+0x160>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d009      	beq.n	8005e50 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	61bb      	str	r3, [r7, #24]
 8005e4e:	e7fe      	b.n	8005e4e <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e50:	4b20      	ldr	r3, [pc, #128]	; (8005ed4 <xTaskGenericNotifyFromISR+0x174>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d11c      	bne.n	8005e92 <xTaskGenericNotifyFromISR+0x132>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff f9ab 	bl	80051b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e66:	2201      	movs	r2, #1
 8005e68:	409a      	lsls	r2, r3
 8005e6a:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <xTaskGenericNotifyFromISR+0x178>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	4a19      	ldr	r2, [pc, #100]	; (8005ed8 <xTaskGenericNotifyFromISR+0x178>)
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4a16      	ldr	r2, [pc, #88]	; (8005edc <xTaskGenericNotifyFromISR+0x17c>)
 8005e82:	441a      	add	r2, r3
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	3304      	adds	r3, #4
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	f7ff f937 	bl	80050fe <vListInsertEnd>
 8005e90:	e005      	b.n	8005e9e <xTaskGenericNotifyFromISR+0x13e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	3318      	adds	r3, #24
 8005e96:	4619      	mov	r1, r3
 8005e98:	4811      	ldr	r0, [pc, #68]	; (8005ee0 <xTaskGenericNotifyFromISR+0x180>)
 8005e9a:	f7ff f930 	bl	80050fe <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea2:	4b10      	ldr	r3, [pc, #64]	; (8005ee4 <xTaskGenericNotifyFromISR+0x184>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d909      	bls.n	8005ec0 <xTaskGenericNotifyFromISR+0x160>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <xTaskGenericNotifyFromISR+0x15a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	e002      	b.n	8005ec0 <xTaskGenericNotifyFromISR+0x160>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8005eba:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <xTaskGenericNotifyFromISR+0x188>)
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3738      	adds	r7, #56	; 0x38
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	200003a8 	.word	0x200003a8
 8005ed8:	20000388 	.word	0x20000388
 8005edc:	20000284 	.word	0x20000284
 8005ee0:	20000340 	.word	0x20000340
 8005ee4:	20000280 	.word	0x20000280
 8005ee8:	20000394 	.word	0x20000394

08005eec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ef6:	4b29      	ldr	r3, [pc, #164]	; (8005f9c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005efc:	4b28      	ldr	r3, [pc, #160]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3304      	adds	r3, #4
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff f958 	bl	80051b8 <uxListRemove>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10b      	bne.n	8005f26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005f0e:	4b24      	ldr	r3, [pc, #144]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	2201      	movs	r2, #1
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	43da      	mvns	r2, r3
 8005f1c:	4b21      	ldr	r3, [pc, #132]	; (8005fa4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4013      	ands	r3, r2
 8005f22:	4a20      	ldr	r2, [pc, #128]	; (8005fa4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2c:	d10a      	bne.n	8005f44 <prvAddCurrentTaskToDelayedList+0x58>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d007      	beq.n	8005f44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f34:	4b1a      	ldr	r3, [pc, #104]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	481a      	ldr	r0, [pc, #104]	; (8005fa8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005f3e:	f7ff f8de 	bl	80050fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f42:	e026      	b.n	8005f92 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4413      	add	r3, r2
 8005f4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f4c:	4b14      	ldr	r3, [pc, #80]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d209      	bcs.n	8005f70 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f5c:	4b13      	ldr	r3, [pc, #76]	; (8005fac <prvAddCurrentTaskToDelayedList+0xc0>)
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	4b0f      	ldr	r3, [pc, #60]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3304      	adds	r3, #4
 8005f66:	4619      	mov	r1, r3
 8005f68:	4610      	mov	r0, r2
 8005f6a:	f7ff f8ec 	bl	8005146 <vListInsert>
}
 8005f6e:	e010      	b.n	8005f92 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f70:	4b0f      	ldr	r3, [pc, #60]	; (8005fb0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3304      	adds	r3, #4
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	f7ff f8e2 	bl	8005146 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f82:	4b0c      	ldr	r3, [pc, #48]	; (8005fb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d202      	bcs.n	8005f92 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f8c:	4a09      	ldr	r2, [pc, #36]	; (8005fb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	6013      	str	r3, [r2, #0]
}
 8005f92:	bf00      	nop
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000384 	.word	0x20000384
 8005fa0:	20000280 	.word	0x20000280
 8005fa4:	20000388 	.word	0x20000388
 8005fa8:	2000036c 	.word	0x2000036c
 8005fac:	2000033c 	.word	0x2000033c
 8005fb0:	20000338 	.word	0x20000338
 8005fb4:	200003a0 	.word	0x200003a0

08005fb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	3b04      	subs	r3, #4
 8005fc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3b04      	subs	r3, #4
 8005fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f023 0201 	bic.w	r2, r3, #1
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3b04      	subs	r3, #4
 8005fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fe8:	4a0c      	ldr	r2, [pc, #48]	; (800601c <pxPortInitialiseStack+0x64>)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3b14      	subs	r3, #20
 8005ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3b04      	subs	r3, #4
 8005ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f06f 0202 	mvn.w	r2, #2
 8006006:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3b20      	subs	r3, #32
 800600c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800600e:	68fb      	ldr	r3, [r7, #12]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	08006021 	.word	0x08006021

08006020 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800602a:	4b11      	ldr	r3, [pc, #68]	; (8006070 <prvTaskExitError+0x50>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006032:	d009      	beq.n	8006048 <prvTaskExitError+0x28>
	__asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	60fb      	str	r3, [r7, #12]
 8006046:	e7fe      	b.n	8006046 <prvTaskExitError+0x26>
 8006048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800605a:	bf00      	nop
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0fc      	beq.n	800605c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006062:	bf00      	nop
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	2000000c 	.word	0x2000000c
	...

08006080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006080:	4b07      	ldr	r3, [pc, #28]	; (80060a0 <pxCurrentTCBConst2>)
 8006082:	6819      	ldr	r1, [r3, #0]
 8006084:	6808      	ldr	r0, [r1, #0]
 8006086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608a:	f380 8809 	msr	PSP, r0
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f04f 0000 	mov.w	r0, #0
 8006096:	f380 8811 	msr	BASEPRI, r0
 800609a:	4770      	bx	lr
 800609c:	f3af 8000 	nop.w

080060a0 <pxCurrentTCBConst2>:
 80060a0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop

080060a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80060a8:	4808      	ldr	r0, [pc, #32]	; (80060cc <prvPortStartFirstTask+0x24>)
 80060aa:	6800      	ldr	r0, [r0, #0]
 80060ac:	6800      	ldr	r0, [r0, #0]
 80060ae:	f380 8808 	msr	MSP, r0
 80060b2:	f04f 0000 	mov.w	r0, #0
 80060b6:	f380 8814 	msr	CONTROL, r0
 80060ba:	b662      	cpsie	i
 80060bc:	b661      	cpsie	f
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	df00      	svc	0
 80060c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060ca:	bf00      	nop
 80060cc:	e000ed08 	.word	0xe000ed08

080060d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060d6:	4b44      	ldr	r3, [pc, #272]	; (80061e8 <xPortStartScheduler+0x118>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a44      	ldr	r2, [pc, #272]	; (80061ec <xPortStartScheduler+0x11c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d109      	bne.n	80060f4 <xPortStartScheduler+0x24>
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	613b      	str	r3, [r7, #16]
 80060f2:	e7fe      	b.n	80060f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060f4:	4b3c      	ldr	r3, [pc, #240]	; (80061e8 <xPortStartScheduler+0x118>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a3d      	ldr	r2, [pc, #244]	; (80061f0 <xPortStartScheduler+0x120>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d109      	bne.n	8006112 <xPortStartScheduler+0x42>
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	60fb      	str	r3, [r7, #12]
 8006110:	e7fe      	b.n	8006110 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006112:	4b38      	ldr	r3, [pc, #224]	; (80061f4 <xPortStartScheduler+0x124>)
 8006114:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	b2db      	uxtb	r3, r3
 800611c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	22ff      	movs	r2, #255	; 0xff
 8006122:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	b2db      	uxtb	r3, r3
 800612a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006134:	b2da      	uxtb	r2, r3
 8006136:	4b30      	ldr	r3, [pc, #192]	; (80061f8 <xPortStartScheduler+0x128>)
 8006138:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800613a:	4b30      	ldr	r3, [pc, #192]	; (80061fc <xPortStartScheduler+0x12c>)
 800613c:	2207      	movs	r2, #7
 800613e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006140:	e009      	b.n	8006156 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006142:	4b2e      	ldr	r3, [pc, #184]	; (80061fc <xPortStartScheduler+0x12c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3b01      	subs	r3, #1
 8006148:	4a2c      	ldr	r2, [pc, #176]	; (80061fc <xPortStartScheduler+0x12c>)
 800614a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800614c:	78fb      	ldrb	r3, [r7, #3]
 800614e:	b2db      	uxtb	r3, r3
 8006150:	005b      	lsls	r3, r3, #1
 8006152:	b2db      	uxtb	r3, r3
 8006154:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006156:	78fb      	ldrb	r3, [r7, #3]
 8006158:	b2db      	uxtb	r3, r3
 800615a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615e:	2b80      	cmp	r3, #128	; 0x80
 8006160:	d0ef      	beq.n	8006142 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006162:	4b26      	ldr	r3, [pc, #152]	; (80061fc <xPortStartScheduler+0x12c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f1c3 0307 	rsb	r3, r3, #7
 800616a:	2b04      	cmp	r3, #4
 800616c:	d009      	beq.n	8006182 <xPortStartScheduler+0xb2>
 800616e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	60bb      	str	r3, [r7, #8]
 8006180:	e7fe      	b.n	8006180 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006182:	4b1e      	ldr	r3, [pc, #120]	; (80061fc <xPortStartScheduler+0x12c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	021b      	lsls	r3, r3, #8
 8006188:	4a1c      	ldr	r2, [pc, #112]	; (80061fc <xPortStartScheduler+0x12c>)
 800618a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800618c:	4b1b      	ldr	r3, [pc, #108]	; (80061fc <xPortStartScheduler+0x12c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006194:	4a19      	ldr	r2, [pc, #100]	; (80061fc <xPortStartScheduler+0x12c>)
 8006196:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	b2da      	uxtb	r2, r3
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80061a0:	4b17      	ldr	r3, [pc, #92]	; (8006200 <xPortStartScheduler+0x130>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a16      	ldr	r2, [pc, #88]	; (8006200 <xPortStartScheduler+0x130>)
 80061a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061ac:	4b14      	ldr	r3, [pc, #80]	; (8006200 <xPortStartScheduler+0x130>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a13      	ldr	r2, [pc, #76]	; (8006200 <xPortStartScheduler+0x130>)
 80061b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061b8:	f000 f8d6 	bl	8006368 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061bc:	4b11      	ldr	r3, [pc, #68]	; (8006204 <xPortStartScheduler+0x134>)
 80061be:	2200      	movs	r2, #0
 80061c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061c2:	f000 f8f5 	bl	80063b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061c6:	4b10      	ldr	r3, [pc, #64]	; (8006208 <xPortStartScheduler+0x138>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a0f      	ldr	r2, [pc, #60]	; (8006208 <xPortStartScheduler+0x138>)
 80061cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061d2:	f7ff ff69 	bl	80060a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061d6:	f7ff fb97 	bl	8005908 <vTaskSwitchContext>
	prvTaskExitError();
 80061da:	f7ff ff21 	bl	8006020 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	e000ed00 	.word	0xe000ed00
 80061ec:	410fc271 	.word	0x410fc271
 80061f0:	410fc270 	.word	0x410fc270
 80061f4:	e000e400 	.word	0xe000e400
 80061f8:	200003ac 	.word	0x200003ac
 80061fc:	200003b0 	.word	0x200003b0
 8006200:	e000ed20 	.word	0xe000ed20
 8006204:	2000000c 	.word	0x2000000c
 8006208:	e000ef34 	.word	0xe000ef34

0800620c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006216:	f383 8811 	msr	BASEPRI, r3
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006224:	4b0e      	ldr	r3, [pc, #56]	; (8006260 <vPortEnterCritical+0x54>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3301      	adds	r3, #1
 800622a:	4a0d      	ldr	r2, [pc, #52]	; (8006260 <vPortEnterCritical+0x54>)
 800622c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800622e:	4b0c      	ldr	r3, [pc, #48]	; (8006260 <vPortEnterCritical+0x54>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d10e      	bne.n	8006254 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006236:	4b0b      	ldr	r3, [pc, #44]	; (8006264 <vPortEnterCritical+0x58>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d009      	beq.n	8006254 <vPortEnterCritical+0x48>
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	603b      	str	r3, [r7, #0]
 8006252:	e7fe      	b.n	8006252 <vPortEnterCritical+0x46>
	}
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	2000000c 	.word	0x2000000c
 8006264:	e000ed04 	.word	0xe000ed04

08006268 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800626e:	4b11      	ldr	r3, [pc, #68]	; (80062b4 <vPortExitCritical+0x4c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d109      	bne.n	800628a <vPortExitCritical+0x22>
 8006276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	607b      	str	r3, [r7, #4]
 8006288:	e7fe      	b.n	8006288 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800628a:	4b0a      	ldr	r3, [pc, #40]	; (80062b4 <vPortExitCritical+0x4c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	3b01      	subs	r3, #1
 8006290:	4a08      	ldr	r2, [pc, #32]	; (80062b4 <vPortExitCritical+0x4c>)
 8006292:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006294:	4b07      	ldr	r3, [pc, #28]	; (80062b4 <vPortExitCritical+0x4c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d104      	bne.n	80062a6 <vPortExitCritical+0x3e>
 800629c:	2300      	movs	r3, #0
 800629e:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	2000000c 	.word	0x2000000c
	...

080062c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062c0:	f3ef 8009 	mrs	r0, PSP
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	4b15      	ldr	r3, [pc, #84]	; (8006320 <pxCurrentTCBConst>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	f01e 0f10 	tst.w	lr, #16
 80062d0:	bf08      	it	eq
 80062d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062da:	6010      	str	r0, [r2, #0]
 80062dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062e4:	f380 8811 	msr	BASEPRI, r0
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f7ff fb0a 	bl	8005908 <vTaskSwitchContext>
 80062f4:	f04f 0000 	mov.w	r0, #0
 80062f8:	f380 8811 	msr	BASEPRI, r0
 80062fc:	bc09      	pop	{r0, r3}
 80062fe:	6819      	ldr	r1, [r3, #0]
 8006300:	6808      	ldr	r0, [r1, #0]
 8006302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006306:	f01e 0f10 	tst.w	lr, #16
 800630a:	bf08      	it	eq
 800630c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006310:	f380 8809 	msr	PSP, r0
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	f3af 8000 	nop.w

08006320 <pxCurrentTCBConst>:
 8006320:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop

08006328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006340:	f7ff fa26 	bl	8005790 <xTaskIncrementTick>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800634a:	4b06      	ldr	r3, [pc, #24]	; (8006364 <SysTick_Handler+0x3c>)
 800634c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	2300      	movs	r3, #0
 8006354:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800635c:	bf00      	nop
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	e000ed04 	.word	0xe000ed04

08006368 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800636c:	4b0b      	ldr	r3, [pc, #44]	; (800639c <vPortSetupTimerInterrupt+0x34>)
 800636e:	2200      	movs	r2, #0
 8006370:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006372:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <vPortSetupTimerInterrupt+0x38>)
 8006374:	2200      	movs	r2, #0
 8006376:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006378:	4b0a      	ldr	r3, [pc, #40]	; (80063a4 <vPortSetupTimerInterrupt+0x3c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a0a      	ldr	r2, [pc, #40]	; (80063a8 <vPortSetupTimerInterrupt+0x40>)
 800637e:	fba2 2303 	umull	r2, r3, r2, r3
 8006382:	099b      	lsrs	r3, r3, #6
 8006384:	4a09      	ldr	r2, [pc, #36]	; (80063ac <vPortSetupTimerInterrupt+0x44>)
 8006386:	3b01      	subs	r3, #1
 8006388:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800638a:	4b04      	ldr	r3, [pc, #16]	; (800639c <vPortSetupTimerInterrupt+0x34>)
 800638c:	2207      	movs	r2, #7
 800638e:	601a      	str	r2, [r3, #0]
}
 8006390:	bf00      	nop
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	e000e010 	.word	0xe000e010
 80063a0:	e000e018 	.word	0xe000e018
 80063a4:	20000000 	.word	0x20000000
 80063a8:	10624dd3 	.word	0x10624dd3
 80063ac:	e000e014 	.word	0xe000e014

080063b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063c0 <vPortEnableVFP+0x10>
 80063b4:	6801      	ldr	r1, [r0, #0]
 80063b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063ba:	6001      	str	r1, [r0, #0]
 80063bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063be:	bf00      	nop
 80063c0:	e000ed88 	.word	0xe000ed88

080063c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063ca:	f3ef 8305 	mrs	r3, IPSR
 80063ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b0f      	cmp	r3, #15
 80063d4:	d913      	bls.n	80063fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063d6:	4a16      	ldr	r2, [pc, #88]	; (8006430 <vPortValidateInterruptPriority+0x6c>)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4413      	add	r3, r2
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063e0:	4b14      	ldr	r3, [pc, #80]	; (8006434 <vPortValidateInterruptPriority+0x70>)
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	7afa      	ldrb	r2, [r7, #11]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d209      	bcs.n	80063fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80063ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	607b      	str	r3, [r7, #4]
 80063fc:	e7fe      	b.n	80063fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063fe:	4b0e      	ldr	r3, [pc, #56]	; (8006438 <vPortValidateInterruptPriority+0x74>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006406:	4b0d      	ldr	r3, [pc, #52]	; (800643c <vPortValidateInterruptPriority+0x78>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d909      	bls.n	8006422 <vPortValidateInterruptPriority+0x5e>
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	603b      	str	r3, [r7, #0]
 8006420:	e7fe      	b.n	8006420 <vPortValidateInterruptPriority+0x5c>
	}
 8006422:	bf00      	nop
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	e000e3f0 	.word	0xe000e3f0
 8006434:	200003ac 	.word	0x200003ac
 8006438:	e000ed0c 	.word	0xe000ed0c
 800643c:	200003b0 	.word	0x200003b0

08006440 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	; 0x28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006448:	2300      	movs	r3, #0
 800644a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800644c:	f7ff f8f6 	bl	800563c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006450:	4b57      	ldr	r3, [pc, #348]	; (80065b0 <pvPortMalloc+0x170>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006458:	f000 f90c 	bl	8006674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800645c:	4b55      	ldr	r3, [pc, #340]	; (80065b4 <pvPortMalloc+0x174>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4013      	ands	r3, r2
 8006464:	2b00      	cmp	r3, #0
 8006466:	f040 808c 	bne.w	8006582 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d01c      	beq.n	80064aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006470:	2208      	movs	r2, #8
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4413      	add	r3, r2
 8006476:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	2b00      	cmp	r3, #0
 8006480:	d013      	beq.n	80064aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f023 0307 	bic.w	r3, r3, #7
 8006488:	3308      	adds	r3, #8
 800648a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	2b00      	cmp	r3, #0
 8006494:	d009      	beq.n	80064aa <pvPortMalloc+0x6a>
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	e7fe      	b.n	80064a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d068      	beq.n	8006582 <pvPortMalloc+0x142>
 80064b0:	4b41      	ldr	r3, [pc, #260]	; (80065b8 <pvPortMalloc+0x178>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d863      	bhi.n	8006582 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064ba:	4b40      	ldr	r3, [pc, #256]	; (80065bc <pvPortMalloc+0x17c>)
 80064bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064be:	4b3f      	ldr	r3, [pc, #252]	; (80065bc <pvPortMalloc+0x17c>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064c4:	e004      	b.n	80064d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d903      	bls.n	80064e2 <pvPortMalloc+0xa2>
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1f1      	bne.n	80064c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064e2:	4b33      	ldr	r3, [pc, #204]	; (80065b0 <pvPortMalloc+0x170>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d04a      	beq.n	8006582 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2208      	movs	r2, #8
 80064f2:	4413      	add	r3, r2
 80064f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	1ad2      	subs	r2, r2, r3
 8006506:	2308      	movs	r3, #8
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	429a      	cmp	r2, r3
 800650c:	d91e      	bls.n	800654c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800650e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4413      	add	r3, r2
 8006514:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	2b00      	cmp	r3, #0
 800651e:	d009      	beq.n	8006534 <pvPortMalloc+0xf4>
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	613b      	str	r3, [r7, #16]
 8006532:	e7fe      	b.n	8006532 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	1ad2      	subs	r2, r2, r3
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006546:	69b8      	ldr	r0, [r7, #24]
 8006548:	f000 f8f6 	bl	8006738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800654c:	4b1a      	ldr	r3, [pc, #104]	; (80065b8 <pvPortMalloc+0x178>)
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	4a18      	ldr	r2, [pc, #96]	; (80065b8 <pvPortMalloc+0x178>)
 8006558:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800655a:	4b17      	ldr	r3, [pc, #92]	; (80065b8 <pvPortMalloc+0x178>)
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	4b18      	ldr	r3, [pc, #96]	; (80065c0 <pvPortMalloc+0x180>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	429a      	cmp	r2, r3
 8006564:	d203      	bcs.n	800656e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006566:	4b14      	ldr	r3, [pc, #80]	; (80065b8 <pvPortMalloc+0x178>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a15      	ldr	r2, [pc, #84]	; (80065c0 <pvPortMalloc+0x180>)
 800656c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	4b10      	ldr	r3, [pc, #64]	; (80065b4 <pvPortMalloc+0x174>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	431a      	orrs	r2, r3
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006582:	f7ff f869 	bl	8005658 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	2b00      	cmp	r3, #0
 800658e:	d009      	beq.n	80065a4 <pvPortMalloc+0x164>
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	60fb      	str	r3, [r7, #12]
 80065a2:	e7fe      	b.n	80065a2 <pvPortMalloc+0x162>
	return pvReturn;
 80065a4:	69fb      	ldr	r3, [r7, #28]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3728      	adds	r7, #40	; 0x28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20003fbc 	.word	0x20003fbc
 80065b4:	20003fc8 	.word	0x20003fc8
 80065b8:	20003fc0 	.word	0x20003fc0
 80065bc:	20003fb4 	.word	0x20003fb4
 80065c0:	20003fc4 	.word	0x20003fc4

080065c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d046      	beq.n	8006664 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065d6:	2308      	movs	r3, #8
 80065d8:	425b      	negs	r3, r3
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	4413      	add	r3, r2
 80065de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	4b20      	ldr	r3, [pc, #128]	; (800666c <vPortFree+0xa8>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4013      	ands	r3, r2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d109      	bne.n	8006606 <vPortFree+0x42>
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	e7fe      	b.n	8006604 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d009      	beq.n	8006622 <vPortFree+0x5e>
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	60bb      	str	r3, [r7, #8]
 8006620:	e7fe      	b.n	8006620 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	4b11      	ldr	r3, [pc, #68]	; (800666c <vPortFree+0xa8>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4013      	ands	r3, r2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d019      	beq.n	8006664 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d115      	bne.n	8006664 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	4b0b      	ldr	r3, [pc, #44]	; (800666c <vPortFree+0xa8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	43db      	mvns	r3, r3
 8006642:	401a      	ands	r2, r3
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006648:	f7fe fff8 	bl	800563c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	4b07      	ldr	r3, [pc, #28]	; (8006670 <vPortFree+0xac>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4413      	add	r3, r2
 8006656:	4a06      	ldr	r2, [pc, #24]	; (8006670 <vPortFree+0xac>)
 8006658:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800665a:	6938      	ldr	r0, [r7, #16]
 800665c:	f000 f86c 	bl	8006738 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006660:	f7fe fffa 	bl	8005658 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006664:	bf00      	nop
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	20003fc8 	.word	0x20003fc8
 8006670:	20003fc0 	.word	0x20003fc0

08006674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800667a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800667e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006680:	4b27      	ldr	r3, [pc, #156]	; (8006720 <prvHeapInit+0xac>)
 8006682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00c      	beq.n	80066a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3307      	adds	r3, #7
 8006692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 0307 	bic.w	r3, r3, #7
 800669a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	4a1f      	ldr	r2, [pc, #124]	; (8006720 <prvHeapInit+0xac>)
 80066a4:	4413      	add	r3, r2
 80066a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066ac:	4a1d      	ldr	r2, [pc, #116]	; (8006724 <prvHeapInit+0xb0>)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066b2:	4b1c      	ldr	r3, [pc, #112]	; (8006724 <prvHeapInit+0xb0>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	4413      	add	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066c0:	2208      	movs	r2, #8
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	1a9b      	subs	r3, r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 0307 	bic.w	r3, r3, #7
 80066ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4a15      	ldr	r2, [pc, #84]	; (8006728 <prvHeapInit+0xb4>)
 80066d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066d6:	4b14      	ldr	r3, [pc, #80]	; (8006728 <prvHeapInit+0xb4>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2200      	movs	r2, #0
 80066dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066de:	4b12      	ldr	r3, [pc, #72]	; (8006728 <prvHeapInit+0xb4>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	1ad2      	subs	r2, r2, r3
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066f4:	4b0c      	ldr	r3, [pc, #48]	; (8006728 <prvHeapInit+0xb4>)
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	4a0a      	ldr	r2, [pc, #40]	; (800672c <prvHeapInit+0xb8>)
 8006702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	4a09      	ldr	r2, [pc, #36]	; (8006730 <prvHeapInit+0xbc>)
 800670a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800670c:	4b09      	ldr	r3, [pc, #36]	; (8006734 <prvHeapInit+0xc0>)
 800670e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006712:	601a      	str	r2, [r3, #0]
}
 8006714:	bf00      	nop
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	200003b4 	.word	0x200003b4
 8006724:	20003fb4 	.word	0x20003fb4
 8006728:	20003fbc 	.word	0x20003fbc
 800672c:	20003fc4 	.word	0x20003fc4
 8006730:	20003fc0 	.word	0x20003fc0
 8006734:	20003fc8 	.word	0x20003fc8

08006738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006740:	4b28      	ldr	r3, [pc, #160]	; (80067e4 <prvInsertBlockIntoFreeList+0xac>)
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	e002      	b.n	800674c <prvInsertBlockIntoFreeList+0x14>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	60fb      	str	r3, [r7, #12]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	429a      	cmp	r2, r3
 8006754:	d8f7      	bhi.n	8006746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	4413      	add	r3, r2
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	429a      	cmp	r2, r3
 8006766:	d108      	bne.n	800677a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	441a      	add	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	441a      	add	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d118      	bne.n	80067c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <prvInsertBlockIntoFreeList+0xb0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	429a      	cmp	r2, r3
 8006798:	d00d      	beq.n	80067b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	441a      	add	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	e008      	b.n	80067c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067b6:	4b0c      	ldr	r3, [pc, #48]	; (80067e8 <prvInsertBlockIntoFreeList+0xb0>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	e003      	b.n	80067c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d002      	beq.n	80067d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067d6:	bf00      	nop
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	20003fb4 	.word	0x20003fb4
 80067e8:	20003fbc 	.word	0x20003fbc

080067ec <__libc_init_array>:
 80067ec:	b570      	push	{r4, r5, r6, lr}
 80067ee:	4e0d      	ldr	r6, [pc, #52]	; (8006824 <__libc_init_array+0x38>)
 80067f0:	4c0d      	ldr	r4, [pc, #52]	; (8006828 <__libc_init_array+0x3c>)
 80067f2:	1ba4      	subs	r4, r4, r6
 80067f4:	10a4      	asrs	r4, r4, #2
 80067f6:	2500      	movs	r5, #0
 80067f8:	42a5      	cmp	r5, r4
 80067fa:	d109      	bne.n	8006810 <__libc_init_array+0x24>
 80067fc:	4e0b      	ldr	r6, [pc, #44]	; (800682c <__libc_init_array+0x40>)
 80067fe:	4c0c      	ldr	r4, [pc, #48]	; (8006830 <__libc_init_array+0x44>)
 8006800:	f000 f820 	bl	8006844 <_init>
 8006804:	1ba4      	subs	r4, r4, r6
 8006806:	10a4      	asrs	r4, r4, #2
 8006808:	2500      	movs	r5, #0
 800680a:	42a5      	cmp	r5, r4
 800680c:	d105      	bne.n	800681a <__libc_init_array+0x2e>
 800680e:	bd70      	pop	{r4, r5, r6, pc}
 8006810:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006814:	4798      	blx	r3
 8006816:	3501      	adds	r5, #1
 8006818:	e7ee      	b.n	80067f8 <__libc_init_array+0xc>
 800681a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800681e:	4798      	blx	r3
 8006820:	3501      	adds	r5, #1
 8006822:	e7f2      	b.n	800680a <__libc_init_array+0x1e>
 8006824:	08006920 	.word	0x08006920
 8006828:	08006920 	.word	0x08006920
 800682c:	08006920 	.word	0x08006920
 8006830:	08006924 	.word	0x08006924

08006834 <memset>:
 8006834:	4402      	add	r2, r0
 8006836:	4603      	mov	r3, r0
 8006838:	4293      	cmp	r3, r2
 800683a:	d100      	bne.n	800683e <memset+0xa>
 800683c:	4770      	bx	lr
 800683e:	f803 1b01 	strb.w	r1, [r3], #1
 8006842:	e7f9      	b.n	8006838 <memset+0x4>

08006844 <_init>:
 8006844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006846:	bf00      	nop
 8006848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800684a:	bc08      	pop	{r3}
 800684c:	469e      	mov	lr, r3
 800684e:	4770      	bx	lr

08006850 <_fini>:
 8006850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006852:	bf00      	nop
 8006854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006856:	bc08      	pop	{r3}
 8006858:	469e      	mov	lr, r3
 800685a:	4770      	bx	lr
